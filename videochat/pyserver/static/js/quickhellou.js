/*! For license information please see quickhellou.js.LICENSE.txt */
(()=>{var __webpack_modules__={"../../node_modules/expose-loader/dist/cjs.js?exposes=videochat!./ts/comProxy-exposed.ts":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var ___EXPOSE_LOADER_IMPORT___ = __webpack_require__(/*! -!../../../node_modules/ts-loader/index.js!./comProxy.ts */ "../../node_modules/ts-loader/index.js!./ts/comProxy.ts");\nvar ___EXPOSE_LOADER_GET_GLOBAL_THIS___ = __webpack_require__(/*! ../../../node_modules/expose-loader/dist/runtime/getGlobalThis.js */ "../../node_modules/expose-loader/dist/runtime/getGlobalThis.js");\nvar ___EXPOSE_LOADER_GLOBAL_THIS___ = ___EXPOSE_LOADER_GET_GLOBAL_THIS___;\nif (typeof ___EXPOSE_LOADER_GLOBAL_THIS___["videochat"] === \'undefined\') ___EXPOSE_LOADER_GLOBAL_THIS___["videochat"] = ___EXPOSE_LOADER_IMPORT___;\nelse throw new Error(\'[exposes-loader] The "videochat" value exists in the global scope, it may not be safe to overwrite it, use the "override" option\')\nmodule.exports = ___EXPOSE_LOADER_IMPORT___;\n\n\n//# sourceURL=webpack:///./ts/comProxy-exposed.ts?../../node_modules/expose-loader/dist/cjs.js?exposes=videochat')},"../../node_modules/expose-loader/dist/runtime/getGlobalThis.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\n// eslint-disable-next-line func-names\nmodule.exports = function () {\n  if (typeof globalThis === "object") {\n    return globalThis;\n  }\n\n  var g;\n\n  try {\n    // This works if eval is allowed (see CSP)\n    // eslint-disable-next-line no-new-func\n    g = this || new Function("return this")();\n  } catch (e) {\n    // This works if the window reference is available\n    if (typeof window === "object") {\n      return window;\n    } // This works if the self reference is available\n\n\n    if (typeof self === "object") {\n      return self;\n    } // This works if the global reference is available\n\n\n    if (typeof __webpack_require__.g !== "undefined") {\n      return __webpack_require__.g;\n    }\n  }\n\n  return g;\n}();\n\n//# sourceURL=webpack:///../../node_modules/expose-loader/dist/runtime/getGlobalThis.js?')},"./scss/web_app.scss":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./scss/web_app.scss?")},"./ts/com/genb/base/components/Component.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Component = void 0;\nvar EventDispatcherService_1 = __webpack_require__(/*! ../services/EventDispatcherService */ "./ts/com/genb/base/services/EventDispatcherService.ts");\n/**\n * Generic component.\n *\n * @export\n * @class Component\n */\nvar Component = /** @class */ (function () {\n    /**\n     * Creates an instance of Component.\n     * @memberof Component\n     */\n    function Component() {\n        this.service = new EventDispatcherService_1.EventDispatcherService();\n    }\n    /**\n     * Adds a listener.\n     *\n     * @public\n     * @param {string} eventName\n     * @param {Function} handler\n     * @param {*} scope\n     * @memberof Component\n     */\n    Component.prototype.addEventListener = function (eventName, handler, scope) {\n        this.service.addEventListener(eventName, handler, scope);\n    };\n    /**\n     * Removes a listener.\n     *\n     * @public\n     * @param {string} eventType\n     * @memberof Component\n     */\n    Component.prototype.removeEventListener = function (eventType) {\n        this.service.removeEventListener(eventType);\n    };\n    /**\n     * Dispatches an event.\n     *\n     * @public\n     * @param {string} eventName\n     * @param {*} [data]\n     * @memberof Component\n     */\n    Component.prototype.dispatchEvent = function (eventName, data) {\n        this.service.dispatchEvent(eventName, data);\n    };\n    /**\n     * Destroys a component.\n     *\n     * @public\n     * @memberof Component\n     */\n    Component.prototype.destroy = function () {\n        this.service.removeAllEventListeners();\n    };\n    /**\n     * Gets an identifier.\n     *\n     * @public\n     * @returns {string}\n     * @memberof Component\n     */\n    Component.prototype.getId = function () {\n        return this.id;\n    };\n    /**\n     * Sets an identifier.\n     *\n     * @public\n     * @param {string} id\n     * @memberof Component\n     */\n    Component.prototype.setId = function (id) {\n        this.id = id;\n    };\n    /**\n     * Gets an unique identifier.\n     *\n     * @public\n     * @returns {string}\n     * @memberof Component\n     */\n    Component.prototype.getUid = function () {\n        return this.uid;\n    };\n    /**\n     * Sets an unique identifier\n     *\n     * @public\n     * @param {string} uid\n     * @memberof Component\n     */\n    Component.prototype.setUid = function (uid) {\n        this.uid = uid;\n    };\n    return Component;\n}());\nexports.Component = Component;\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/components/Component.ts?')},"./ts/com/genb/base/components/HtmlComponent.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.HTMLComponent = void 0;\nvar BaseUtils_1 = __webpack_require__(/*! ../../base/utils/BaseUtils */ "./ts/com/genb/base/utils/BaseUtils.ts");\nvar ToggleableComponent_1 = __webpack_require__(/*! ./ToggleableComponent */ "./ts/com/genb/base/components/ToggleableComponent.ts");\nvar Log_1 = __webpack_require__(/*! ../utils/Log */ "./ts/com/genb/base/utils/Log.ts");\n/**\n * HTMLElement based Component\n *\n * @export\n * @class HtmlComponent\n * @extends {Component}\n */\nvar HTMLComponent = /** @class */ (function (_super) {\n    __extends(HTMLComponent, _super);\n    /**\n     * Creates an instance of RawUIComponent.\n     * @param {JQuery} element\n     * @memberof UIComponent\n     */\n    function HTMLComponent(element) {\n        var _this = _super.call(this) || this;\n        _this.setElement(element);\n        return _this;\n    }\n    /**\n     * Destroys an instance of UIComponent\n     *\n     * @memberof UIComponent\n     */\n    HTMLComponent.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.element.remove();\n    };\n    /**\n     * Sets the element.\n     *\n     * @param {HTMLElement} element\n     * @memberof UIComponent\n     */\n    HTMLComponent.prototype.setElement = function (element) {\n        this.element = element;\n    };\n    /**\n     * Gets the element.\n     *\n     * @param {HTMLElement} element\n     * @memberof UIComponent\n     */\n    HTMLComponent.prototype.getElement = function () {\n        try {\n            return this.element;\n        }\n        catch (exception) {\n            Log_1.Log.error("No element for ", this.getId(), " component");\n        }\n        return undefined;\n    };\n    /**\n     * Gets data value by identifier from a JQuery element.\n     *\n     * @param {string} id\n     * @returns {any}\n     * @memberof UIComponent\n     */\n    HTMLComponent.prototype.getData = function (id) {\n        if (BaseUtils_1.BaseUtils.isObjectDefined(this.getElement())) {\n            return this.getElement().dataset[id];\n        }\n        return BaseUtils_1.BaseUtils.UNDEFINED;\n    };\n    /**\n     * Finds child elements within root element.\n     *\n     * @public\n     * @param {string} elementQuery\n     * @returns {NodeListOf<Element>}\n     * @memberof HtmlComponent\n     */\n    HTMLComponent.prototype.findElements = function (elementQuery) {\n        if (BaseUtils_1.BaseUtils.isObjectDefined(this.getElement())) {\n            return this.getElement().querySelectorAll(elementQuery);\n        }\n        return BaseUtils_1.BaseUtils.UNDEFINED;\n    };\n    /**\n     * Finds an child element within root element.\n     *\n     * @public\n     * @param {string} elementQuery\n     * @returns {HTMLElement}\n     * @memberof HtmlComponent\n     */\n    HTMLComponent.prototype.findElement = function (elementQuery) {\n        if (BaseUtils_1.BaseUtils.isObjectDefined(this.getElement())) {\n            var results = this.findElements(elementQuery);\n            if (results.length > 0) {\n                return results[0];\n            }\n        }\n        return BaseUtils_1.BaseUtils.UNDEFINED;\n    };\n    /**\n     * Finds a form element within root element.\n     *\n     * @public\n     * @returns {HTMLFormElement}\n     * @memberof HtmlComponent\n     */\n    HTMLComponent.prototype.findFormElement = function () {\n        return this.findElement("form");\n    };\n    /**\n     * Finds an input element within root element.\n     *\n     * @public\n     * @returns {Element}\n     * @memberof HtmlComponent\n     */\n    HTMLComponent.prototype.findInputElement = function () {\n        return this.findElement("input");\n    };\n    /**\n     * Adds a class to the component element.\n     *\n     * @public\n     * @param {string} className\n     * @memberof UIComponent\n     */\n    HTMLComponent.prototype.addClass = function (className) {\n        if (BaseUtils_1.BaseUtils.isObjectDefined(this.getElement())) {\n            this.getElement().classList.add(className);\n        }\n    };\n    /**\n     * Removes a class from the component element.\n     *\n     * @param {string} className\n     * @memberof UIComponent\n     */\n    HTMLComponent.prototype.removeClass = function (className) {\n        if (BaseUtils_1.BaseUtils.isObjectDefined(this.getElement())) {\n            this.getElement().classList.remove(className);\n        }\n    };\n    /**\n     * Adds an event listener handler for the component.\n     *\n     * @param {string} eventName\n     * @param {Function} handler\n     * @memberof HtmlComponent\n     */\n    HTMLComponent.prototype.addHTMLEventListener = function (eventName, handler) {\n        var _this = this;\n        this.getElement().addEventListener(eventName, function () {\n            handler.call(_this);\n        });\n    };\n    /**\n     * Enables component.\n     *\n     * @memberof UIComponent\n     */\n    HTMLComponent.prototype.enable = function () {\n        _super.prototype.enable.call(this);\n        this.getElement().classList.remove("js-disabled");\n    };\n    /**\n     * Disables component.\n     *\n     * @memberof UIComponent\n     */\n    HTMLComponent.prototype.disable = function () {\n        _super.prototype.disable.call(this);\n        this.getElement().classList.add("js-disabled");\n    };\n    /**\n     * Sets component enable state.\n     *\n     * @param {boolean} isEnabled\n     * @memberof UIComponent\n     */\n    HTMLComponent.prototype.setIsEnabled = function (isEnabled) {\n        _super.prototype.setIsEnabled.call(this, isEnabled);\n        this.getElement().classList.toggle("js-disabled", !isEnabled);\n    };\n    return HTMLComponent;\n}(ToggleableComponent_1.ToggleableComponent));\nexports.HTMLComponent = HTMLComponent;\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/components/HtmlComponent.ts?')},"./ts/com/genb/base/components/ToggleableComponent.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ToggleableComponent = void 0;\nvar Component_1 = __webpack_require__(/*! ./Component */ "./ts/com/genb/base/components/Component.ts");\n/**\n * Toggleable component\n *\n * @export\n * @class ToggleableComponent\n * @extends {Component}\n */\nvar ToggleableComponent = /** @class */ (function (_super) {\n    __extends(ToggleableComponent, _super);\n    function ToggleableComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Component state\n         *\n         * @private\n         * @type {boolean}\n         * @memberof ToggleableComponent\n         */\n        _this.isEnabled = true;\n        return _this;\n    }\n    /**\n     * Toggle component.\n     *\n     * @memberof ToggleableComponent\n     */\n    ToggleableComponent.prototype.toggle = function () {\n        this.setIsEnabled(!this.getIsEnabled);\n    };\n    /**\n     * Enable component.\n     *\n     * @memberof ToggleableComponent\n     */\n    ToggleableComponent.prototype.enable = function () {\n        this.setIsEnabled(true);\n    };\n    /**\n     * Disable component.\n     *\n     * @memberof ToggleableComponent\n     */\n    ToggleableComponent.prototype.disable = function () {\n        this.setIsEnabled(false);\n    };\n    /**\n     * Sets component state.\n     *\n     * @param {boolean} isEnabled\n     * @memberof ToggleableComponent\n     */\n    ToggleableComponent.prototype.setIsEnabled = function (isEnabled) {\n        this.isEnabled = isEnabled;\n    };\n    /**\n     * Gets component state.\n     *\n     * @returns {boolean}\n     * @memberof ToggleableComponent\n     */\n    ToggleableComponent.prototype.getIsEnabled = function () {\n        return this.isEnabled;\n    };\n    return ToggleableComponent;\n}(Component_1.Component));\nexports.ToggleableComponent = ToggleableComponent;\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/components/ToggleableComponent.ts?')},"./ts/com/genb/base/models/Enviroment.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Enviroment = void 0;\nvar Enviroment = /** @class */ (function () {\n    function Enviroment() {\n    }\n    Enviroment.LOCAL = "local";\n    Enviroment.SANDBOX = "sandbox";\n    Enviroment.PRODUCTION = "production";\n    Enviroment.LOCAL_HOSTNAME = "Computer";\n    Enviroment.SANDBOX_HOSTNAME = "elara.genesi.pl" || 0;\n    Enviroment.PRODUCTION_HOSTNAME = "deposit.venturevisa.com";\n    return Enviroment;\n}());\nexports.Enviroment = Enviroment;\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/models/Enviroment.ts?')},"./ts/com/genb/base/models/EventListener.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.EventListener = void 0;\nvar EventObject_1 = __webpack_require__(/*! ../models/EventObject */ "./ts/com/genb/base/models/EventObject.ts");\n/**\n * Event dispatching component.\n *\n * @export\n * @class EventListener\n */\nvar EventListener = /** @class */ (function () {\n    /**\n     * Creates an instance of EventListener.\n     *\n     * @param {string} type\n     * @param {Function} handler\n     * @param {*} scope\n     * @memberof EventListener\n     */\n    function EventListener(type, handler, scope) {\n        this.event = new EventObject_1.EventObject(type);\n        this.handler = handler;\n        this.scope = scope;\n    }\n    /**\n     * Gets a handler.\n     *\n     * @returns {Function}\n     * @memberof EventListener\n     */\n    EventListener.prototype.getHandler = function () {\n        return this.handler;\n    };\n    /**\n     * Gets and event object.\n     *\n     * @returns {EventObject}\n     * @memberof EventListener\n     */\n    EventListener.prototype.getEventObject = function () {\n        return this.event;\n    };\n    /**\n     * Gets a scope.\n     *\n     * @returns {*}\n     * @memberof EventListener\n     */\n    EventListener.prototype.getScope = function () {\n        return this.scope;\n    };\n    return EventListener;\n}());\nexports.EventListener = EventListener;\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/models/EventListener.ts?')},"./ts/com/genb/base/models/EventListeners.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.EventListeners = void 0;\n/**\n * Event listeners aggregator\n *\n * @export\n * @class EventListeners\n */\nvar EventListeners = /** @class */ (function () {\n    /**\n     * Creates an instance of EventListeners.\n     * @memberof EventListeners\n     */\n    function EventListeners() {\n        this.setListeners(new Array());\n    }\n    EventListeners.prototype.addEventListener = function (type, eventListener) {\n        var eventListeners = this.getEventListenersListByType(type);\n        eventListeners.push(eventListener);\n        this.listeners[type] = eventListeners;\n    };\n    EventListeners.prototype.removeEventListener = function (type) {\n        delete this.listeners[type];\n    };\n    EventListeners.prototype.getEventListenersListByType = function (type) {\n        var eventListenersList = this.listeners[type];\n        return eventListenersList ? eventListenersList : [];\n    };\n    EventListeners.prototype.empty = function () {\n        this.listeners = [];\n    };\n    EventListeners.prototype.getListeners = function () {\n        return this.listeners;\n    };\n    EventListeners.prototype.setListeners = function (listeners) {\n        this.listeners = listeners;\n    };\n    return EventListeners;\n}());\nexports.EventListeners = EventListeners;\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/models/EventListeners.ts?')},"./ts/com/genb/base/models/EventObject.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.EventObject = void 0;\nvar StringUtils_1 = __webpack_require__(/*! ../utils/StringUtils */ "./ts/com/genb/base/utils/StringUtils.ts");\n/**\n * Event object\n *\n * @export\n * @class EventObject\n */\nvar EventObject = /** @class */ (function () {\n    /**\n     * Creates an instance of EventObject.\n     *\n     * @param {string} type\n     * @param {*} [data]\n     * @memberof EventObject\n     */\n    function EventObject(type, data) {\n        this.type = type;\n        if (StringUtils_1.StringUtils.isDefined(data))\n            this.setData(data);\n    }\n    /**\n     * Gets an event type.\n     *\n     * @returns {string}\n     * @memberof EventObject\n     */\n    EventObject.prototype.getType = function () {\n        return this.type;\n    };\n    /**\n     * Sets an event type.\n     *\n     * @param {string} type\n     * @memberof EventObject\n     */\n    EventObject.prototype.setType = function (type) {\n        this.type = type;\n    };\n    /**\n     * Gets a data.\n     *\n     * @returns {*}\n     * @memberof EventObject\n     */\n    EventObject.prototype.getData = function () {\n        return this.data;\n    };\n    /**\n     * Sets a data.\n     *\n     * @param {*} data\n     * @memberof EventObject\n     */\n    EventObject.prototype.setData = function (data) {\n        this.data = data;\n    };\n    EventObject.COMPLETE = "complete";\n    return EventObject;\n}());\nexports.EventObject = EventObject;\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/models/EventObject.ts?')},"./ts/com/genb/base/services/EventDispatcherService.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.EventDispatcherService = void 0;\nvar EventListener_1 = __webpack_require__(/*! ../models/EventListener */ "./ts/com/genb/base/models/EventListener.ts");\nvar EventListeners_1 = __webpack_require__(/*! ../models/EventListeners */ "./ts/com/genb/base/models/EventListeners.ts");\nvar EventDispatcherService = /** @class */ (function () {\n    function EventDispatcherService() {\n        this.listeners = new EventListeners_1.EventListeners();\n    }\n    /**\n     *\n     * service.addEventListener(Event.COMPLETE, handler);\n     *\n     */\n    EventDispatcherService.prototype.addEventListener = function (type, handler, scope) {\n        var eventListener = new EventListener_1.EventListener(type, handler, scope);\n        this.listeners.addEventListener(type, eventListener);\n    };\n    EventDispatcherService.prototype.removeEventListener = function (type) {\n        this.listeners.removeEventListener(type);\n    };\n    EventDispatcherService.prototype.removeAllEventListeners = function () {\n        this.listeners.empty();\n    };\n    EventDispatcherService.prototype.dispatchEvent = function (type, data) {\n        var eventListeners = this.listeners.getEventListenersListByType(type);\n        eventListeners.forEach(function (eventListener) {\n            eventListener.getHandler().call(eventListener.getScope(), data);\n        });\n    };\n    return EventDispatcherService;\n}());\nexports.EventDispatcherService = EventDispatcherService;\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/services/EventDispatcherService.ts?')},"./ts/com/genb/base/services/FormService.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.FormService = void 0;\nvar EventDispatcherService_1 = __webpack_require__(/*! ./EventDispatcherService */ "./ts/com/genb/base/services/EventDispatcherService.ts");\nvar BaseUtils_1 = __webpack_require__(/*! ../utils/BaseUtils */ "./ts/com/genb/base/utils/BaseUtils.ts");\nvar Log_1 = __webpack_require__(/*! ../utils/Log */ "./ts/com/genb/base/utils/Log.ts");\n/**\n * Form services facade\n *\n * @export\n * @class FormService\n * @extends {EventDispatcherService}\n */\nvar FormService = /** @class */ (function (_super) {\n    __extends(FormService, _super);\n    function FormService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Makes a POST request.\n     *\n     * @param {string} url\n     * @param {(string | FormData)} postData\n     * @returns {Promise<any>}\n     * @memberof FormService\n     */\n    FormService.prototype.post = function (url, postData) {\n        return new Promise(function (resolve, reject) {\n            var request = new XMLHttpRequest();\n            request.open(FormService.POST, url, true);\n            request.addEventListener("load", function (event) {\n                if (request.status === FormService.STATUS_FORBIDDEN) {\n                    alert("You\'ve been logged out. Please try again.");\n                }\n                else if (request.status === FormService.STATUS_INTERNAL_SERVER_ERROR) {\n                    Log_1.Log.warn("There was an error while processing your request.", request.statusText, request.responseText);\n                    reject(request.responseText);\n                }\n                else if (request.statusText === FormService.OK &&\n                    BaseUtils_1.BaseUtils.isObjectDefined(resolve)) {\n                    resolve(request.responseText);\n                }\n            });\n            if (!!postData) {\n                request.send(postData);\n            }\n            else {\n                request.send();\n            }\n        });\n    };\n    /**\n     * Makes a GET request.\n     *\n     * @public\n     * @param {string} url\n     * @param {Function} [resolve]\n     * @memberof FormService\n     */\n    FormService.prototype.get = function (url, resolve) {\n        var request = new XMLHttpRequest();\n        request.open(FormService.GET, url);\n        request.addEventListener("load", function (event) {\n            if (request.status === FormService.STATUS_FORBIDDEN) {\n                alert("You\'ve been logged out. Please try again.");\n            }\n            else if (request.status === FormService.STATUS_INTERNAL_SERVER_ERROR) {\n                alert("There was an error while processing your request.");\n            }\n            else if (request.status === FormService.STATUS_OK &&\n                BaseUtils_1.BaseUtils.isObjectDefined(resolve)) {\n                resolve(request.responseText);\n            }\n        });\n        request.send();\n    };\n    FormService.LOAD = "load";\n    FormService.OK = "OK";\n    FormService.STATUS_OK = 200;\n    FormService.STATUS_FORBIDDEN = 403;\n    FormService.STATUS_INTERNAL_SERVER_ERROR = 500;\n    FormService.GET = "GET";\n    FormService.POST = "POST";\n    return FormService;\n}(EventDispatcherService_1.EventDispatcherService));\nexports.FormService = FormService;\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/services/FormService.ts?')},"./ts/com/genb/base/utils/BaseUtils.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.BaseUtils = void 0;\nvar StringUtils_1 = __webpack_require__(/*! ./StringUtils */ "./ts/com/genb/base/utils/StringUtils.ts");\nvar Enviroment_1 = __webpack_require__(/*! ../models/Enviroment */ "./ts/com/genb/base/models/Enviroment.ts");\n/**\n * Base utilities.\n *\n * @export\n * @class BaseUtils\n */\nvar BaseUtils = /** @class */ (function () {\n    function BaseUtils() {\n    }\n    /**\n     * Checks if an object is defined.\n     *\n     * @public\n     * @static\n     * @param {*} s\n     * @returns {boolean}\n     * @memberof BaseUtils\n     */\n    BaseUtils.isObjectDefined = function (s) {\n        try {\n            return typeof s !== \'undefined\' && s !== null;\n        }\n        catch (e) {\n            return false;\n        }\n    };\n    /**\n     * Checks if object is not empty.\n     *\n     * @public\n     * @static\n     * @param {*} object\n     * @returns {boolean}\n     * @memberof BaseUtils\n     */\n    BaseUtils.isObjectNotEmpty = function (object) {\n        return (this.isObjectDefined(object) &&\n            Object.getOwnPropertyNames(object).length !== 0);\n    };\n    /**\n     * Navigates to an URL address.\n     *\n     * @param {string} url\n     * @memberof BaseUtils\n     */\n    BaseUtils.navigateToUrl = function (url) {\n        window.location.href = url;\n    };\n    BaseUtils.isLocalEnviroment = function () {\n        return StringUtils_1.StringUtils.equals(this.getEnviroment(), Enviroment_1.Enviroment.LOCAL);\n    };\n    BaseUtils.isSandboxEnviroment = function () {\n        return StringUtils_1.StringUtils.equals(this.getEnviroment(), Enviroment_1.Enviroment.SANDBOX);\n    };\n    BaseUtils.isProductionEnviroment = function () {\n        return StringUtils_1.StringUtils.equals(this.getEnviroment(), Enviroment_1.Enviroment.PRODUCTION);\n    };\n    Object.defineProperty(BaseUtils, "hostname", {\n        get: function () {\n            return window.location.hostname;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BaseUtils.getEnviroment = function () {\n        var element = document.querySelector(\'meta[property="vis:env"]\');\n        var enviroment = Enviroment_1.Enviroment.LOCAL;\n        if (BaseUtils.isObjectDefined(element)) {\n            enviroment =\n                BaseUtils.isObjectDefined(element) && element.getAttribute(\'content\');\n        }\n        else {\n            var hostname = window.location.hostname;\n            enviroment = StringUtils_1.StringUtils.equals(hostname, Enviroment_1.Enviroment.PRODUCTION_HOSTNAME)\n                ? Enviroment_1.Enviroment.PRODUCTION\n                : Enviroment_1.Enviroment.SANDBOX;\n        }\n        return enviroment;\n    };\n    BaseUtils.UNDEFINED = undefined;\n    BaseUtils.NULL = null;\n    return BaseUtils;\n}());\nexports.BaseUtils = BaseUtils;\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/utils/BaseUtils.ts?')},"./ts/com/genb/base/utils/HTMLUtils.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.HTMLUtils = void 0;\nvar BaseUtils_1 = __webpack_require__(/*! ./BaseUtils */ "./ts/com/genb/base/utils/BaseUtils.ts");\nvar Log_1 = __webpack_require__(/*! ./Log */ "./ts/com/genb/base/utils/Log.ts");\nvar HTMLUtils = /** @class */ (function () {\n    function HTMLUtils() {\n    }\n    HTMLUtils.get = function (selector) {\n        var element = document.querySelector(selector);\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(element)) {\n            Log_1.Log.warn("Element \\"" + selector + "\\" is not defined.");\n        }\n        return element;\n    };\n    HTMLUtils.input = function (selector) {\n        return HTMLUtils.get(selector);\n    };\n    HTMLUtils.list = function (selector) {\n        var elementList = document.querySelectorAll(selector);\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(elementList)) {\n            Log_1.Log.warn("Elements \\"" + selector + "\\" are not defined.");\n        }\n        return elementList;\n    };\n    HTMLUtils.array = function (selector) {\n        return Array.from(HTMLUtils.list(selector));\n    };\n    HTMLUtils.firstToHTMLElement = function (elements) {\n        if (elements.length > 0) {\n            return elements[0];\n        }\n    };\n    /**\n     * Checks if DOM element selected by given CSS selector exists.\n     *\n     * @public\n     * @static\n     * @param {string} selector\n     * @returns\n     * @memberof HTMLUtils\n     */\n    HTMLUtils.exists = function (cssSelector) {\n        var element = document.querySelector(cssSelector);\n        return BaseUtils_1.BaseUtils.isObjectDefined(element);\n    };\n    HTMLUtils.getCookie = function (name) {\n        var cookieValue = null;\n        if (document.cookie && document.cookie !== \'\') {\n            var cookies = document.cookie.split(\';\');\n            for (var i = 0; i < cookies.length; i++) {\n                var cookie = cookies[i].trim();\n                // Does this cookie string begin with the name we want?\n                if (cookie.substring(0, name.length + 1) === name + \'=\') {\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                    break;\n                }\n            }\n        }\n        return cookieValue;\n    };\n    return HTMLUtils;\n}());\nexports.HTMLUtils = HTMLUtils;\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/utils/HTMLUtils.ts?')},"./ts/com/genb/base/utils/Log.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Log = void 0;\nvar StringUtils_1 = __webpack_require__(/*! ./StringUtils */ "./ts/com/genb/base/utils/StringUtils.ts");\nvar Log = /** @class */ (function () {\n    function Log() {\n    }\n    /**\n     * Sets enviroment variable.\n     *\n     * @static\n     * @param {string} environment\n     * @memberof Log\n     */\n    Log.setEnvironment = function (environment) {\n        this.isDevelopment = StringUtils_1.StringUtils.equals(environment, "development");\n    };\n    /**\n     * Displays log objects.\n     *\n     * @static\n     * @param {*} [message]\n     * @param {...any[]} optionalParams\n     * @memberof Log\n     */\n    Log.log = function (message) {\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        if (!this.isDevelopment) {\n            return;\n        }\n        // tslint:disable-next-line:no-console\n        console.log.apply(console, __spreadArray(["%c" + this.getNow(), "color: #008000",\n            message], optionalParams, false));\n    };\n    /**\n     * Displays warn objects.\n     *\n     * @static\n     * @param {*} [message]\n     * @param {...any[]} optionalParams\n     * @memberof Log\n     */\n    Log.warn = function (message) {\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        if (!this.isDevelopment) {\n            return;\n        }\n        // tslint:disable-next-line:no-console\n        console.warn.apply(console, __spreadArray(["%c" + this.getNow(), "color: #FF7F00",\n            message], optionalParams, false));\n    };\n    /**\n     * Displays error objects.\n     *\n     * @static\n     * @param {*} [message]\n     * @param {...any[]} optionalParams\n     * @memberof Log\n     */\n    Log.error = function (message) {\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        if (!this.isDevelopment) {\n            return;\n        }\n        // tslint:disable-next-line:no-console\n        console.error.apply(console, __spreadArray(["" + this.getNow(), message], optionalParams, false));\n    };\n    /**\n     * Asserts log objects if condition is met.\n     *\n     * @static\n     * @param {boolean} [condition]\n     * @param {string} [message]\n     * @param {...any[]} data\n     * @memberof Log\n     */\n    Log.assert = function (condition, message) {\n        var data = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            data[_i - 2] = arguments[_i];\n        }\n        if (!this.isDevelopment) {\n            return;\n        }\n        // tslint:disable-next-line:no-console\n        console.assert.apply(console, __spreadArray([condition, "%c" + this.getNow(), "color: #008000",\n            message], data, false));\n    };\n    /**\n     * Displays breakpoint label and log objects.\n     *\n     * @static\n     * @param {string} [label]\n     * @param {...any[]} optionalParams\n     * @memberof Log\n     */\n    Log.breakpoint = function (label) {\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        if (!this.isDevelopment) {\n            return;\n        }\n        // tslint:disable-next-line:no-console\n        console.log.apply(console, __spreadArray(["%c" + this.getNow() + " " + label, "background-color: #144E8B; color:#fff"], optionalParams, false));\n    };\n    /**\n     * Displays breakpoint fatal error label and log objects.\n     *\n     * @static\n     * @param {string} [label]\n     * @param {...any[]} optionalParams\n     * @memberof Log\n     */\n    Log.fatal = function (label) {\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        if (!this.isDevelopment) {\n            return;\n        }\n        // tslint:disable-next-line:no-console\n        console.log.apply(console, __spreadArray(["%c" + this.getNow() + " " + label, "background-color: #c90000; color:#fff"], optionalParams, false));\n    };\n    /**\n     * Displays breakpoint success label and log objects.\n     *\n     * @static\n     * @param {string} [label]\n     * @param {...any[]} optionalParams\n     * @memberof Log\n     */\n    Log.success = function (label) {\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        if (!this.isDevelopment) {\n            return;\n        }\n        // tslint:disable-next-line:no-console\n        console.log.apply(console, __spreadArray(["%c" + this.getNow() + " " + label, "background-color: #008000; color:#fff"], optionalParams, false));\n    };\n    Log.info = function (label) {\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        if (!this.isDevelopment) {\n            return;\n        }\n        // tslint:disable-next-line:no-console\n        console.log.apply(console, __spreadArray(["%c" + this.getNow() + " " + label, "background-color: #4AAEFB; color:#fff"], optionalParams, false));\n    };\n    /**\n     * Gets window perfomance now value.\n     *\n     * @private\n     * @static\n     * @returns {string}\n     * @memberof Log\n     */\n    Log.getNow = function () {\n        return (window.performance.now() / 1000).toFixed(3);\n    };\n    Log.isDevelopment = true;\n    return Log;\n}());\nexports.Log = Log;\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/utils/Log.ts?')},"./ts/com/genb/base/utils/StringUtils.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.StringUtils = void 0;\n/**\n * String utilities\n *\n * @export\n * @class StringUtils\n */\nvar StringUtils = /** @class */ (function () {\n    function StringUtils() {\n    }\n    /**\n     * Checks if a string is defined.\n     *\n     * @static\n     * @param {string} s\n     * @returns {boolean}\n     * @memberof StringUtils\n     */\n    StringUtils.isDefined = function (s) {\n        return typeof s === "string";\n    };\n    /**\n     * Checks if a string is empty.\n     *\n     * @static\n     * @param {string} s\n     * @returns\n     * @memberof StringUtils\n     */\n    StringUtils.isEmpty = function (s) {\n        return typeof s === "string" && s.length === 0;\n    };\n    /**\n     * Checks if a string is not empty.\n     *\n     * @static\n     * @param {string} s\n     * @returns {boolean}\n     * @memberof StringUtils\n     */\n    StringUtils.isNotEmpty = function (s) {\n        return !this.isEmpty(s);\n    };\n    /**\n     * Checks if two strings are equal.\n     *\n     * @static\n     * @param {string} string1\n     * @param {string} string2\n     * @returns {boolean}\n     * @memberof StringUtils\n     */\n    StringUtils.equals = function (string1, string2) {\n        return string1 === string2;\n    };\n    /**\n     * Gets an unique identifier.\n     *\n     * @static\n     * @returns {string}\n     * @memberof StringUtils\n     */\n    StringUtils.getUID = function () {\n        var timestamp = new Date().getTime();\n        return timestamp.toString();\n    };\n    StringUtils.uuidv4 = function () {\n        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {\n            var r = (Math.random() * 16) | 0;\n            var v = c === "x" ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    };\n    /**\n     * Checks if e-mail string is valid.\n     *\n     * @static\n     * @param {string} email\n     * @returns {boolean}\n     * @memberof StringUtils\n     */\n    StringUtils.isEmailValid = function (email) {\n        return /^[a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(email);\n    };\n    /**\n     * Checks if URL string is valid.\n     *\n     * @static\n     * @param {string} url\n     * @returns {boolean}\n     * @memberof StringUtils\n     */\n    StringUtils.isUrlValid = function (url) {\n        return /((http|ftp|https):\\/\\/)?[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:\\/~+#-]*[\\w@?^=%&amp;\\/~+#-])?/.test(url);\n    };\n    /**\n     * Checks if a string is a number.\n     *\n     * @static\n     * @param {string} s\n     * @returns {boolean}\n     * @memberof StringUtils\n     */\n    StringUtils.isNumber = function (s) {\n        return /^-?\\d*[\\.]?\\d+$/.test(s);\n    };\n    /**\n     * Checks if a string is in a currency format.\n     *\n     * @static\n     * @param {string} s\n     * @returns {boolean}\n     * @memberof StringUtils\n     */\n    StringUtils.isCurrency = function (s) {\n        return /(?=.)^\\$?(([1-9][0-9]{0,2}(,[0-9]{3})*)|[0-9]+)?(\\.[0-9]{1,2})?$/.test(s);\n    };\n    /**\n     * Extracts Form Builder field type string.\n     *\n     * @static\n     * @param {string} className\n     * @returns {string}\n     * @memberof StringUtils\n     */\n    StringUtils.extractFormBuilderFormFieldType = function (className) {\n        return className.split(" ")[0].split("-")[1];\n    };\n    /**\n     * Extracts file name from path.\n     *\n     * @static\n     * @param {string} path\n     * @returns {string}\n     * @memberof StringUtils\n     */\n    StringUtils.extractFileNameFromPath = function (path) {\n        return path.replace(/^.*[\\\\\\/]/, "");\n    };\n    /**\n     * Converts string to boolean.\n     *\n     * @static\n     * @param {string} s\n     * @returns {boolean}\n     * @memberof StringUtils\n     */\n    StringUtils.toBoolean = function (s) {\n        return /(true|True|1)/g.test(s);\n    };\n    StringUtils.toString = function (b) {\n        return b ? "true" : "false";\n    };\n    StringUtils.stripFromQuotes = function (expression) {\n        var matches = /([\'"]?)(.*)\\1/.exec(expression);\n        if (matches.length > 2) {\n            return matches[2];\n        }\n        return StringUtils.EMPTY;\n    };\n    StringUtils.hashCode = function (s) {\n        return s\n            .split("")\n            .reduce(function (prevHash, currVal) {\n            return (prevHash << 5) - prevHash + currVal.charCodeAt(0);\n        }, 0);\n    };\n    StringUtils.EMPTY = "";\n    StringUtils.TRUE = "true";\n    StringUtils.FALSE = "false";\n    StringUtils.URL_TARGET_BLANK = "_blank";\n    StringUtils.URL_TARGET_SELF = "_self";\n    return StringUtils;\n}());\nexports.StringUtils = StringUtils;\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/utils/StringUtils.ts?')},"./ts/com/quickhellou/AppController.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AppController = void 0;\nvar BaseUtils_1 = __webpack_require__(/*! ../genb/base/utils/BaseUtils */ \"./ts/com/genb/base/utils/BaseUtils.ts\");\nvar HTMLUtils_1 = __webpack_require__(/*! ../genb/base/utils/HTMLUtils */ \"./ts/com/genb/base/utils/HTMLUtils.ts\");\nvar AppControllerEvent_1 = __webpack_require__(/*! ./AppControllerEvent */ \"./ts/com/quickhellou/AppControllerEvent.ts\");\nvar CallEvent_1 = __webpack_require__(/*! ./CallEvent */ \"./ts/com/quickhellou/CallEvent.ts\");\nvar LoadingParams_1 = __webpack_require__(/*! ./LoadingParams */ \"./ts/com/quickhellou/LoadingParams.ts\");\nvar Util_1 = __webpack_require__(/*! ./Util */ \"./ts/com/quickhellou/Util.ts\");\nvar IconSet_1 = __webpack_require__(/*! ./IconSet */ \"./ts/com/quickhellou/IconSet.ts\");\nvar HTMLTemplates_1 = __webpack_require__(/*! ./HTMLTemplates */ \"./ts/com/quickhellou/HTMLTemplates.ts\");\nvar StringUtils_1 = __webpack_require__(/*! ../genb/base/utils/StringUtils */ \"./ts/com/genb/base/utils/StringUtils.ts\");\nvar EventDispatcherService_1 = __webpack_require__(/*! ../genb/base/services/EventDispatcherService */ \"./ts/com/genb/base/services/EventDispatcherService.ts\");\nvar InvitationView_1 = __webpack_require__(/*! ./InvitationView */ \"./ts/com/quickhellou/InvitationView.ts\");\nvar RemoteVideos_1 = __webpack_require__(/*! ./application/RemoteVideos */ \"./ts/com/quickhellou/application/RemoteVideos.ts\");\nvar Room_1 = __webpack_require__(/*! ./application/model/Room */ \"./ts/com/quickhellou/application/model/Room.ts\");\nvar RemoteVideosEvent_1 = __webpack_require__(/*! ./application/model/RemoteVideosEvent */ \"./ts/com/quickhellou/application/model/RemoteVideosEvent.ts\");\nvar MediaCommunication_1 = __webpack_require__(/*! ./application/controller/MediaCommunication */ \"./ts/com/quickhellou/application/controller/MediaCommunication.ts\");\nvar MediaEvent_1 = __webpack_require__(/*! ./application/model/MediaEvent */ \"./ts/com/quickhellou/application/model/MediaEvent.ts\");\nvar Log_1 = __webpack_require__(/*! ../genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\nvar ScreenShareButtonComponent_1 = __webpack_require__(/*! ./application/controller/ScreenShareButtonComponent */ \"./ts/com/quickhellou/application/controller/ScreenShareButtonComponent.ts\");\nvar ShareScreenEvent_1 = __webpack_require__(/*! ./application/model/ShareScreenEvent */ \"./ts/com/quickhellou/application/model/ShareScreenEvent.ts\");\nvar VideoTrackEventOptions_1 = __webpack_require__(/*! ./application/model/VideoTrackEventOptions */ \"./ts/com/quickhellou/application/model/VideoTrackEventOptions.ts\");\nvar RoomSelection_1 = __webpack_require__(/*! ./RoomSelection */ \"./ts/com/quickhellou/RoomSelection.ts\");\nvar UIConstants_1 = __webpack_require__(/*! ./UIConstants */ \"./ts/com/quickhellou/UIConstants.ts\");\nvar FormService_1 = __webpack_require__(/*! ../../com/genb/base/services/FormService */ \"./ts/com/genb/base/services/FormService.ts\");\nvar ColliderServiceEvent_1 = __webpack_require__(/*! ./application/model/ColliderServiceEvent */ \"./ts/com/quickhellou/application/model/ColliderServiceEvent.ts\");\n/**\n * Quick Hellou controller.\n *\n * @export\n * @class AppController\n */\nvar AppController = /** @class */ (function (_super) {\n    __extends(AppController, _super);\n    /**\n     * Creates an instance of AppController.\n     *\n     * @param roomId the room ID\n     * @param initType the init type\n     * @param videoAppUrl the video app URL\n     *\n     * @memberof AppController\n     */\n    function AppController(roomId, initType, videoAppUrl) {\n        var _this = _super.call(this) || this;\n        _this.hide = function (element) {\n            element.classList.add('hidden');\n        };\n        _this.show = function (element) {\n            element.classList.remove('hidden');\n        };\n        _this.deactivate = function (element) {\n            element.classList.remove('active');\n        };\n        _this.loadingParams = new LoadingParams_1.LoadingParams(roomId);\n        _this.initType = initType;\n        _this.videoAppUrl = videoAppUrl;\n        return _this;\n    }\n    /**\n     * Intializes the controller.\n     *\n     * @memberof AppController\n     */\n    AppController.prototype.init = function () {\n        var _this = this;\n        var formService = new FormService_1.FormService();\n        formService\n            .post(this.videoAppUrl + \"/api/video-settings/\" + this.loadingParams.roomID)\n            .then(function (data) {\n            _this.loadingParams.load(JSON.parse(data));\n            _this.onParamsLoaded();\n        });\n    };\n    /**\n     * Destroy application transmitter.\n     */\n    AppController.prototype.destroy = function () {\n        this.dispatchEvent(AppControllerEvent_1.AppControllerEvent.DESTROY);\n    };\n    AppController.prototype.onParamsLoaded = function () {\n        var _this = this;\n        this.createCommunication();\n        Log_1.Log.log('Initializing; Room ID ' +\n            (BaseUtils_1.BaseUtils.isObjectDefined(this.loadingParams.roomID)\n                ? \"= \" + this.loadingParams.roomID\n                : 'not defined') +\n            '.');\n        this.hangupSvg = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.hangupSvg);\n        this.icons = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.icons);\n        this.localVideo = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.localVideo);\n        this.miniVideo = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.miniVideo);\n        this.sharingDiv = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.sharingDiv);\n        this.initRemoteVideos();\n        this.videosDiv = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.videosDiv);\n        this.roomLinkHref = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.roomLinkHref);\n        this.roomLinkHrefWaiting = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.roomLinkHrefWaiting);\n        this.rejoinDiv = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.rejoinDiv);\n        this.textChatButton = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.textChatButton);\n        this.rejoinButton = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.rejoinButton);\n        this.newRoomButton = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.newRoomButton);\n        this.fullscreenIcon = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.fullscreenSvg);\n        this.hellouLogoFooterDiv = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.hellouLogoFooterDiv);\n        this.overlayDiv = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.overlayDiv);\n        this.overlayWaitingDiv = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.overlayWaitingDiv);\n        this.closeOverlayButton = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.closeOverlayButton);\n        this.textChatWindow = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.textChat.chatWindow);\n        this.textChatCloseButton = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.textChat.closeButton);\n        this.textChatCollapseButton = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.textChat.collapseButton);\n        this.textChatMessageList = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.textChat.messageList);\n        this.textChatInput = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.textChat.input);\n        this.newRoomButton.addEventListener('click', function () {\n            _this.onNewRoomClick();\n        }, false);\n        this.rejoinButton.addEventListener('click', function () {\n            _this.onRejoinClick();\n        }, false);\n        this.closeOverlayButton.addEventListener('click', function () {\n            _this.onCloseOverlayClick();\n        }, false);\n        this.textChatButton.addEventListener('click', function () {\n            _this.onTextChatButtonClick();\n        }, false);\n        this.textChatCloseButton.addEventListener('click', function () {\n            _this.onTextChatCloseButtonClick();\n        }, false);\n        this.textChatCollapseButton.addEventListener('click', function (event) {\n            _this.onTextChatCollapseButtonClick();\n        }, false);\n        this.textChatInput.addEventListener('keyup', function (event) {\n            _this.onTextChatInputKeyUp(event);\n        }, false);\n        var sendTextChatMessageButton = HTMLUtils_1.HTMLUtils.get('.text-chat-window__send-message-button');\n        sendTextChatMessageButton.addEventListener('click', function () {\n            _this.sendTextChatMessageButtonClickHandler();\n        });\n        var overlayButtonsList = HTMLUtils_1.HTMLUtils.array('.button--send-invitation');\n        var sendInvitationCloserButtonList = HTMLUtils_1.HTMLUtils.array('.overlay__closer-button');\n        sendInvitationCloserButtonList.forEach(function (sendInvitationCloserButton) {\n            sendInvitationCloserButton.addEventListener('click', function (event) {\n                _this.closeOverlay(HTMLUtils_1.HTMLUtils.get(\".\" + sendInvitationCloserButton.dataset.screen), HTMLUtils_1.HTMLUtils.array(\".button--overlay[data-screen='\" + sendInvitationCloserButton.dataset.screen + \"']\"));\n            });\n        });\n        overlayButtonsList.forEach(function (overlayButton) {\n            var screen = overlayButton.dataset.screen;\n            var overlaySelector = \".\" + screen;\n            var selectedOverlayButtonsList = HTMLUtils_1.HTMLUtils.array(\".button--overlay[data-screen='\" + screen + \"']\");\n            overlayButton.onclick = function () {\n                _this.closeAllOverlays();\n                var sendInvitationOverlay = HTMLUtils_1.HTMLUtils.get(overlaySelector);\n                sendInvitationOverlay.classList.remove('hidden');\n                var sendInvitationResult = HTMLUtils_1.HTMLUtils.get(\".overlay--\" + screen + \"__result\");\n                sendInvitationResult.classList.add('hidden');\n                var sendInvitationResultMessage = HTMLUtils_1.HTMLUtils.get(\".overlay--\" + screen + \"__result-message\");\n                sendInvitationResultMessage.innerHTML = '';\n                var sendInvitationBody = HTMLUtils_1.HTMLUtils.get(\".overlay--\" + screen + \"__body\");\n                sendInvitationBody.classList.remove('hidden');\n                selectedOverlayButtonsList.forEach(function (inviteButton) {\n                    inviteButton.classList.add('js-active');\n                });\n            };\n        });\n        var schedulerButton = HTMLUtils_1.HTMLUtils.get('.button--setup-future-talk');\n        schedulerButton.addEventListener('click', function (event) {\n            var setupFutureTalkOverlay = HTMLUtils_1.HTMLUtils.get('.overlay--setup-future-talk');\n            if (BaseUtils_1.BaseUtils.isObjectDefined(setupFutureTalkOverlay)) {\n                setupFutureTalkOverlay.classList.remove('hidden');\n            }\n        });\n        this.shareScreenButton = new ScreenShareButtonComponent_1.ScreenShareButtonComponent(HTMLUtils_1.HTMLUtils.get('.button--share-screen'));\n        if (!Util_1.Util.isMobile() && !Util_1.Util.isEdgeHTML()) {\n            this.shareScreenButton.init();\n            this.shareScreenButton.addEventListener(ShareScreenEvent_1.ShareScreenEvent.START_SHARING, function () {\n                _this.mediaCommunication.displayMedia();\n            }, this);\n            this.shareScreenButton.addEventListener(ShareScreenEvent_1.ShareScreenEvent.STOP_SHARING, function () {\n                _this.mediaCommunication.stopSendingDisplayMedia();\n            }, this);\n        }\n        else {\n            this.shareScreenButton.disableSharingState();\n        }\n        // send invitation view\n        // tslint:disable-next-line:no-unused-expression\n        new InvitationView_1.InvitationView(HTMLUtils_1.HTMLUtils.get('.send-invitation'));\n        // chat window handlers\n        var chatWindowInput = HTMLUtils_1.HTMLUtils.get('.text-chat-window__message-input');\n        chatWindowInput.addEventListener('focusin', function (event) {\n            if (chatWindowInput.value === 'Type your message here') {\n                chatWindowInput.value = '';\n            }\n        });\n        chatWindowInput.addEventListener('focusout', function () {\n            if (StringUtils_1.StringUtils.isEmpty(chatWindowInput.value)) {\n                chatWindowInput.value = 'Type your message here';\n            }\n        });\n        this.muteAudioIconSet = new IconSet_1.IconSet(UIConstants_1.UIConstants.muteAudioSvg);\n        this.muteVideoIconSet = new IconSet_1.IconSet(UIConstants_1.UIConstants.muteVideoSvg);\n        this.fullscreenIconSet = new IconSet_1.IconSet(UIConstants_1.UIConstants.fullscreenSvg);\n        this.roomLink = StringUtils_1.StringUtils.EMPTY;\n        this.localStream = null;\n        this.createCall();\n        // If the params has a roomID specified, we should connect to that room\n        // immediately. If not, show the room selection UI.\n        if (this.loadingParams.roomID) {\n            this.updateInvitationLinks(this.loadingParams.roomID);\n            if (StringUtils_1.StringUtils.equals(this.loadingParams.additionalParam, 'setup')) {\n                this.roomSelectedHander(this.loadingParams.roomID);\n            }\n            else {\n                // Ask the user to confirm.\n                if (!RoomSelection_1.RoomSelection.matchRandomRoomPattern(this.loadingParams.roomID)) {\n                    // Show the room name only if it does not match the random room pattern.\n                    var confirmJoinRoomSpanElement = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.confirmJoinRoomSpan);\n                    confirmJoinRoomSpanElement.textContent = \" \\\"\" + this.loadingParams.roomID + \"\\\"\";\n                }\n                var confirmJoinDiv_1 = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.confirmJoinDiv);\n                this.show(confirmJoinDiv_1);\n                var confirmJoinButtonElement = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.confirmJoinButton);\n                confirmJoinButtonElement.addEventListener('click', function () {\n                    _this.confirmJoin(confirmJoinDiv_1);\n                });\n                if (this.loadingParams.bypassJoinConfirmation) {\n                    this.hide(confirmJoinDiv_1);\n                    this.setupCall();\n                }\n                if (this.initType === 'instant') {\n                    this.confirmJoin(confirmJoinDiv_1);\n                }\n            }\n        }\n        else {\n            Log_1.Log.warn('Missing RoomID.');\n        }\n        window.addEventListener('online', function (event) {\n            _this.updateOnlineStatus(event);\n        });\n        window.addEventListener('offline', function (event) {\n            _this.updateOnlineStatus(event);\n        });\n        if (StringUtils_1.StringUtils.isNotEmpty(this.loadingParams.additionalParam) &&\n            StringUtils_1.StringUtils.equals(this.loadingParams.additionalParam, 'invite')) {\n            this.openSendInvitationOverlay();\n        }\n        this.dispatchEvent(AppControllerEvent_1.AppControllerEvent.INITIALIZED);\n    };\n    /**\n     * Creates media communication instance.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.createCommunication = function () {\n        this.mediaCommunication = new MediaCommunication_1.MediaCommunication(this.loadingParams);\n    };\n    /**\n     * Opens \"Send Invitation\" overlay.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.openSendInvitationOverlay = function () {\n        var _this = this;\n        var overlayButtonsList = HTMLUtils_1.HTMLUtils.array('.button--overlay');\n        overlayButtonsList.forEach(function () {\n            var screen = 'send-invitation';\n            var overlaySelector = \".\" + screen;\n            var selectedOverlayButtonsList = HTMLUtils_1.HTMLUtils.array(\".button--overlay[data-screen='\" + screen + \"']\");\n            _this.closeAllOverlays();\n            var sendInvitationOverlay = HTMLUtils_1.HTMLUtils.get(overlaySelector);\n            sendInvitationOverlay.classList.remove('hidden');\n            var sendInvitationResult = HTMLUtils_1.HTMLUtils.get(\".overlay--\" + screen + \"__result\");\n            sendInvitationResult.classList.add('hidden');\n            var sendInvitationResultMessage = HTMLUtils_1.HTMLUtils.get(\".overlay--\" + screen + \"__result-message\");\n            sendInvitationResultMessage.innerHTML = '';\n            var sendInvitationBody = HTMLUtils_1.HTMLUtils.get(\".overlay--\" + screen + \"__body\");\n            sendInvitationBody.classList.remove('hidden');\n            selectedOverlayButtonsList.forEach(function (inviteButton) {\n                inviteButton.classList.add('js-active');\n            });\n        });\n    };\n    /**\n     * Closes all overlays.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.closeAllOverlays = function () {\n        this.closeOverlay(HTMLUtils_1.HTMLUtils.get(\".send-invitation\"), HTMLUtils_1.HTMLUtils.array(\".button--overlay[data-screen='send-invitation']\"));\n    };\n    /**\n     * Closes an overlay.\n     *\n     * @private\n     * @param {HTMLElement} overlay\n     * @param {HTMLElement[]} buttons\n     * @memberof AppController\n     */\n    AppController.prototype.closeOverlay = function (overlay, buttons) {\n        overlay.classList.add('hidden');\n        buttons.forEach(function (inviteButton) {\n            inviteButton.classList.remove('js-active');\n        });\n    };\n    AppController.prototype.updateOnlineStatus = function (event) {\n        var status = navigator.onLine ? 'online' : 'offline';\n    };\n    /**\n     * Handles room selection.\n     *\n     * @private\n     * @param {string} roomId\n     * @memberof AppController\n     */\n    AppController.prototype.roomSelectedHander = function (roomId) {\n        var roomSelectionDiv = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.roomSelection.div);\n        // patch to set room url before local stream initialization\n        var roomLink = this.loadingParams.hostUrl + \"/r/\" + roomId;\n        this.mediaCommunication.setRoom(roomId, roomLink);\n        this.pushCallNavigation(new Room_1.Room(roomId, roomLink));\n        if (this.localStream) {\n            this.attachLocalStream();\n        }\n        this.hide(roomSelectionDiv);\n        this.createCall();\n        this.setupCall();\n        var schedulerLinkElement = HTMLUtils_1.HTMLUtils.get('footer .button--setup-future-talk');\n        schedulerLinkElement.href = \"/scheduler/\" + roomId;\n    };\n    /**\n     * Loads URL parameters into LoadingParams object.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.loadUrlParams = function () {\n        var DEFAULT_VIDEO_CODEC = 'VP9';\n        var urlParams = Util_1.Util.queryStringToDictionary(window.location.search);\n        this.loadingParams.audioSendBitrate = urlParams.asbr;\n        this.loadingParams.audioSendCodec = urlParams.asc;\n        this.loadingParams.audioRecvBitrate = urlParams.arbr;\n        this.loadingParams.audioRecvCodec = urlParams.arc;\n        this.loadingParams.opusMaxPbr = urlParams.opusmaxpbr;\n        this.loadingParams.opusFec = urlParams.opusfec;\n        this.loadingParams.opusDtx = urlParams.opusdtx;\n        this.loadingParams.opusStereo = urlParams.stereo;\n        this.loadingParams.videoSendBitrate = urlParams.vsbr;\n        this.loadingParams.videoSendInitialBitrate = urlParams.vsibr;\n        this.loadingParams.videoSendCodec = urlParams.vsc;\n        this.loadingParams.videoRecvBitrate = urlParams.vrbr;\n        this.loadingParams.videoRecvCodec = urlParams.vrc || DEFAULT_VIDEO_CODEC;\n        this.loadingParams.videoFec = urlParams.videofec;\n    };\n    /**\n     * Creates a call.\n     *\n     * @private\n     * @returns {void}\n     * @memberof AppController\n     */\n    AppController.prototype.createCall = function () {\n        var _this = this;\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.WEBSOCKET_CLOSED, this.hangup, this);\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.REMOTE_HANGUP, function (sessionId) {\n            _this.onRemoteHangup(sessionId);\n        }, this);\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.REMOTE_SDP_PROTOCOL_RECEIVED, function (data) {\n            _this.onRemoteSdpProtocolReceived(data.sessionId, data.isRemoteVideoPlaybackAvailable, data.isRemoteDisplayMediaAvailable);\n        }, this);\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.REMOTE_STREAM_ADDED, function (data) {\n            _this.onRemoteStreamAdded(data.sessionId, data.stream);\n        }, this);\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.LOCAL_STREAM_ADDED, function (stream) {\n            _this.onLocalStreamAdded(stream);\n        }, this);\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.SIGNALING_STATE_CHANGE, function () {\n            // no code\n        }, this);\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.ICE_CONNECTION_STATE_CHANGE, function () {\n            // no code\n        }, this);\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.NEW_ICE_CANDIDATE, function (data) {\n            // no code\n        }, this);\n        this.mediaCommunication.addEventListener(MediaEvent_1.MediaEvent.DISPLAY_MEDIA_DISPLAYED, function () {\n            _this.shareScreenButton.unlock();\n        }, this);\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.REMOTE_TEXT_CHAT_MESSAGE, function (message) {\n            _this.onRemoteTextChatMessage(message);\n        }, this);\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.STATUS_MESSAGE, function (message) {\n            Log_1.Log.log(message);\n        }, this);\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.ERROR, function (message) {\n            _this.displayError(message);\n        }, this);\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.CALLER_STARTED, this.displaySharingInfo, this);\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.REMOTE_CLIENT_REGISTERED, function (registerOptions) {\n            _this.onRemoteClientRegistered(registerOptions);\n        }, this);\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.LOCAL_VIDEO_MEDIA_CHANGE, function (options) {\n            _this.toggleVideoTrack(options);\n        }, this);\n        this.mediaCommunication.addEventListener(ColliderServiceEvent_1.ColliderServiceEvent.DESTROY, function () {\n            _this.destroy();\n        }, this);\n        this.mediaCommunication.addEventListener(ShareScreenEvent_1.ShareScreenEvent.NOT_ALLOWED, function () {\n            _this.shareScreenButton.enableSharingState();\n        }, this);\n        this.mediaCommunication.createCall();\n        this.show(this.hellouLogoFooterDiv);\n        this.show(this.videosDiv);\n        this.show(this.overlayDiv);\n    };\n    /**\n     * Handles media track toggling.\n     *\n     * @private\n     * @param {VideoTrackEventOptions} options\n     * @memberof AppController\n     */\n    AppController.prototype.toggleVideoTrack = function (options) {\n        var enabledTrack = options.track;\n        this.localStream.getTracks().forEach(function (track) {\n            track.enabled = track.id === enabledTrack.id;\n        });\n        var isCaptureScreenTrack = StringUtils_1.StringUtils.equals(options.type, VideoTrackEventOptions_1.VideoTrackEventOptions.SCREEN_CAPTURE);\n        this.shareScreenButton.toggleScreenSharingWithFlag(isCaptureScreenTrack);\n        var tracks = __spreadArray(__spreadArray([], this.localStream.getAudioTracks(), true), [\n            enabledTrack,\n        ], false);\n        var stream = new MediaStream(tracks);\n        try {\n            this.miniVideo.srcObject = stream;\n        }\n        catch (e) {\n            Log_1.Log.warn('Unable to attach stream to video element.');\n        }\n        this.toggleAudioUnMute();\n    };\n    /**\n     * Initializes call setup.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.setupCall = function () {\n        var _this = this;\n        this.mediaCommunication.connect();\n        this.setupUI();\n        // Call hangup with async = false. Required to complete multiple\n        // clean up steps before page is closed.\n        window.onbeforeunload = function () {\n            _this.mediaCommunication.hangupCall(false);\n        };\n        window.onpopstate = function (event) {\n            if (!event.state) {\n                Log_1.Log.log('Reloading main page.');\n                location.href = location.origin;\n            }\n            else {\n                // This could be a forward request to open a room again.\n                if (event.state.roomLink) {\n                    location.href = event.state.roomLink;\n                }\n            }\n        };\n    };\n    /**\n     * Attaches local stream.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.attachLocalStream = function () {\n        try {\n            this.localVideo.srcObject = this.localStream;\n            if (!Util_1.Util.isMobile() && !Util_1.Util.isEdgeHTML()) {\n                this.shareScreenButton.enableSharingState();\n            }\n        }\n        catch (e) {\n            Log_1.Log.log('Unable to attach stream to video element.');\n        }\n        this.activate(this.localVideo);\n        this.show(this.icons);\n        this.show(this.fullscreenIcon);\n        if (this.localStream.getVideoTracks().length === 0) {\n            var muteVideoSVGElement = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.muteVideoSvg);\n            this.hide(muteVideoSVGElement);\n        }\n        if (this.localStream.getAudioTracks().length === 0) {\n            var muteAudioSVGElement = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.muteAudioSvg);\n            this.hide(muteAudioSVGElement);\n        }\n    };\n    /**\n     * Hangs up connection.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.hangup = function () {\n        Log_1.Log.log('AppController::hangup (true, from WS)');\n        this.hide(this.icons);\n        this.transitionToDone();\n        // Call hangup with async = true.\n        this.mediaCommunication.hangupCall(true);\n        // Reset key and mouse event handlers.\n        document.onkeypress = null;\n        window.onmousemove = null;\n    };\n    AppController.prototype.sendTextChatMessageButtonClickHandler = function () {\n        var message = this.textChatInput.value\n            .trim()\n            .replace(/(\\r\\n|\\n|\\r)/gm, '');\n        if (StringUtils_1.StringUtils.isNotEmpty(message)) {\n            this.addLocalMessageHTML(message);\n            this.mediaCommunication.sendLocalChatMessage(message);\n            this.textChatInput.value = '';\n            this.textChatInput.focus();\n        }\n    };\n    /**\n     * Handles new room request event.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.onNewRoomClick = function () {\n        location.href = location.origin;\n    };\n    /**\n     * Handles rejoin event.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.onRejoinClick = function () {\n        this.deactivate(this.rejoinDiv);\n        this.hide(this.rejoinDiv);\n        this.mediaCommunication.restartCall();\n    };\n    /**\n     * Setups UI.\n     *\n     * @memberof AppController\n     */\n    AppController.prototype.setupUI = function () {\n        var _this = this;\n        this.iconEventSetup();\n        window.addEventListener('mousemove', function () {\n            _this.showIcons();\n        });\n        this.overlayDiv.addEventListener('mousemove', function () {\n            _this.showIcons();\n        });\n        this.overlayDiv.addEventListener('click', function () {\n            _this.showIcons();\n        });\n        document.addEventListener('touchstart', function () {\n            _this.showIcons();\n        });\n        document.addEventListener('click', function () {\n            _this.showIcons();\n        });\n        var muteAudioSVGElement = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.muteAudioSvg);\n        muteAudioSVGElement.addEventListener('click', function () {\n            _this.toggleAudioMute();\n        });\n        var muteVideoSVGElement = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.muteVideoSvg);\n        muteVideoSVGElement.addEventListener('click', function () {\n            _this.toggleVideoMute();\n        });\n        /*\n        const fullscreenSVGElement: HTMLElement = HTMLUtils.get(\n          UIConstants.fullscreenSvg\n        );\n        fullscreenSVGElement.addEventListener(\"click\", (): void => {\n          this.toggleFullScreen();\n        });\n    */\n        var hangupSVGElement = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.hangupSvg);\n        hangupSVGElement.addEventListener('click', function () {\n            Log_1.Log.log('hangup click');\n            _this.hangup();\n            _this.shareScreenButton.disableSharingState();\n            _this.closeFullScreen();\n        });\n        /*\n        document.addEventListener(\n          \"fullscreenchange\",\n          (): void => {\n            this.onFullScreenChange();\n          },\n          false\n        );\n        document.addEventListener(\n          \"webkitfullscreenchange\",\n          (): void => {\n            this.onFullScreenChange();\n          },\n          false\n        );\n        document.addEventListener(\n          \"mozfullscreenchange\",\n          (event: MouseEvent): void => {\n            this.onFullScreenChange();\n          },\n          false\n        );\n    */\n        Util_1.Util.setUpFullScreen();\n    };\n    /**\n     * Joins the video call.\n     *\n     * @param confirmJoinDiv\n     */\n    AppController.prototype.confirmJoin = function (confirmJoinDiv) {\n        Log_1.Log.log('confirmJoin');\n        this.hide(confirmJoinDiv);\n        this.setupCall();\n    };\n    /**\n     * Toggles audio unmuting.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.toggleAudioUnMute = function () {\n        this.mediaCommunication.toggleAudioUnMute();\n        this.muteAudioIconSet.enable();\n    };\n    /**\n     * Toggles audio muting.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.toggleAudioMute = function () {\n        this.mediaCommunication.toggleAudioMute();\n        this.muteAudioIconSet.toggle();\n    };\n    /**\n     * Toggles video muting.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.toggleVideoMute = function () {\n        this.mediaCommunication.toggleVideoMute();\n        this.muteVideoIconSet.toggle();\n    };\n    /**\n     * Handles full screen change event.\n     *\n     * @memberof AppController\n     */\n    AppController.prototype.closeFullScreen = function () {\n        var footer = HTMLUtils_1.HTMLUtils.get('.footer');\n        var videosWrapList = HTMLUtils_1.HTMLUtils.list('.video-columns-wrap, .videos-wrap, .remote-video-wrap');\n        footer.classList.remove('hidden');\n        videosWrapList.forEach(function (elem) {\n            elem.classList.remove('js-fullscreen');\n        });\n    };\n    /**\n     * Toggles full screen.\n     *\n     * @private\n     * @memberof AppController\n     */\n    /*\n    private toggleFullScreen(): void {\n      const footer: HTMLElement = HTMLUtils.get(\".footer\");\n      const videosWrapList: NodeListOf<HTMLElement> = HTMLUtils.list(\n        \".video-columns-wrap, .videos-wrap\"\n      );\n      if (Util.isFullScreen()) {\n        Log.log(\"Exiting fullscreen.\");\n        footer.classList.remove(\"hidden\");\n        videosWrapList.item(0).classList.remove(\"js-fullscreen\");\n        videosWrapList.item(1).classList.remove(\"js-fullscreen\");\n        Util.cancelFullScreen();\n      } else {\n        Log.log(\"Entering fullscreen.\");\n        footer.classList.add(\"hidden\");\n        videosWrapList.item(0).classList.add(\"js-fullscreen\");\n        videosWrapList.item(1).classList.add(\"js-fullscreen\");\n        Util.requestFullscreen();\n      }\n      if (this.fullscreenIconSet) {\n        this.fullscreenIconSet.toggle();\n      }\n    }\n  */\n    AppController.prototype.iconEventSetup = function () {\n        var _this = this;\n        this.icons.addEventListener('onmouseenter', function () {\n            window.clearTimeout(_this.hideIconsAfterTimeout);\n        });\n        this.icons.addEventListener('mouseleave', function () {\n            _this.setIconTimeout();\n        });\n    };\n    AppController.prototype.setIconTimeout = function () {\n        var _this = this;\n        if (this.hideIconsAfterTimeout) {\n            window.clearTimeout.bind(this, this.hideIconsAfterTimeout);\n        }\n        this.hideIconsAfterTimeout = window.setTimeout(function () {\n            _this.hideIcons();\n        }, 5000);\n    };\n    /**\n     * Hides waiting overlay.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.onCloseOverlayClick = function () {\n        this.hide(this.overlayWaitingDiv);\n    };\n    /**\n     * Opens chat window.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.onTextChatButtonClick = function () {\n        this.show(this.textChatWindow);\n    };\n    /**\n     * Closes text chat window.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.onTextChatCloseButtonClick = function () {\n        this.hide(this.textChatWindow);\n    };\n    /**\n     * Collapses text chat window.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.onTextChatCollapseButtonClick = function () {\n        this.hide(this.textChatWindow);\n    };\n    /**\n     * Handles key up event in the chat window.\n     *\n     * @private\n     * @param {KeyboardEvent} event\n     * @memberof AppController\n     */\n    AppController.prototype.onTextChatInputKeyUp = function (event) {\n        var message = this.textChatInput.value\n            .trim()\n            .replace(/(\\r\\n|\\n|\\r)/gm, '');\n        if (event.keyCode === 13 && message.length > 0) {\n            this.addLocalMessageHTML(message);\n            this.mediaCommunication.sendLocalChatMessage(message);\n            this.textChatInput.value = '';\n        }\n    };\n    /**\n     * Adds a remote video element.\n     *\n     * @private\n     * @param {RegisterOptions} registerOptions\n     * @memberof AppController\n     */\n    AppController.prototype.onRemoteClientRegistered = function (registerOptions) {\n        this.remoteVideos.addRemoteVideo(registerOptions);\n    };\n    AppController.prototype.onRemoteTextChatMessage = function (message) {\n        this.show(this.textChatWindow);\n        this.addRemoteMessageHTML(message);\n    };\n    AppController.prototype.addRemoteMessageHTML = function (message) {\n        var messageHTML = HTMLTemplates_1.HTMLTemplates.getRemoteMessageHTML(message);\n        this.textChatMessageList.insertAdjacentHTML('beforeend', messageHTML);\n        this.textChatMessageList.scrollTop =\n            this.textChatMessageList.scrollHeight -\n                this.textChatMessageList.clientHeight;\n    };\n    AppController.prototype.addLocalMessageHTML = function (message) {\n        var messageHTML = HTMLTemplates_1.HTMLTemplates.getLocalMessageHTML(message);\n        this.textChatMessageList.insertAdjacentHTML('beforeend', messageHTML);\n        this.textChatMessageList.scrollTop =\n            this.textChatMessageList.scrollHeight -\n                this.textChatMessageList.clientHeight;\n    };\n    /**\n     * Stops waiting for remote video.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.transitionToDone = function () {\n        this.remoteVideos.removeCanPlayHandlers();\n        this.deactivate(this.localVideo);\n        this.remoteVideos.deactivateAll();\n        this.deactivate(this.miniVideo);\n        this.hide(this.hangupSvg);\n        this.hide(this.textChatButton);\n        this.hide(this.textChatWindow);\n        this.activate(this.rejoinDiv);\n        this.show(this.rejoinDiv);\n    };\n    AppController.prototype.displayError = function (error) {\n        Log_1.Log.warn(error);\n    };\n    /**\n     * Enables sharing info overlay (the \"Invite someone to join you!\" one).\n     *\n     * @private\n     * @param {*} data\n     * @memberof AppController\n     */\n    AppController.prototype.displaySharingInfo = function (room) {\n        var roomId = room.id;\n        var roomLink = room.link;\n        this.roomLink =\n            roomLink = window.location.protocol + \"//\" + window.location.host + \"/r/\" + roomId;\n        this.pushCallNavigation(new Room_1.Room(roomId, roomLink));\n        var isRoomAThirdPartyAccesedRoom = /[a-zA-Z0-9]+\\-\\d+/g.test(roomId);\n        this.activate(this.sharingDiv);\n        if (!isRoomAThirdPartyAccesedRoom) {\n            this.activate(this.overlayWaitingDiv);\n        }\n    };\n    /**\n     * Pushes call view to navigation history.\n     *\n     * @protected\n     * @param {string} roomID\n     * @param {string} roomLink\n     * @memberof AppController\n     */\n    AppController.prototype.pushCallNavigation = function (room) {\n        this.updateInvitationLinks(room.id);\n        /*window.history.pushState(\n          { roomId: room.id, roomLink: room.link },\n          room.id,\n          room.link\n        )*/\n    };\n    AppController.prototype.updateInvitationLinks = function (roomID) {\n        var tmpRoomLink = \"https://www.quickhellou.com/r/\" + roomID;\n        var invitationLink = HTMLUtils_1.HTMLUtils.get(\".overlay--send-invitation__message-editable a\");\n        this.roomLinkHref.href = invitationLink.href = tmpRoomLink;\n        this.roomLinkHref.textContent = invitationLink.innerHTML = tmpRoomLink;\n        this.roomLinkHrefWaiting.textContent = tmpRoomLink;\n        this.roomLinkHrefWaiting.href = tmpRoomLink;\n        var inviteBySMSButtonElement = HTMLUtils_1.HTMLUtils.get('.invite-waiting-button--sms');\n        if (Util_1.Util.isMobile()) {\n            inviteBySMSButtonElement.addEventListener('click', function () {\n                window.open('sms://?body=Please join talk with me:' + tmpRoomLink, '_self');\n            });\n        }\n        else {\n            inviteBySMSButtonElement.style.display = 'none';\n        }\n    };\n    /**\n     * Hadles remote stream addition.\n     *\n     * @param {MediaStream} stream\n     * @memberof AppController\n     */\n    AppController.prototype.onRemoteStreamAdded = function (sessionId, stream) {\n        this.deactivate(this.sharingDiv);\n        this.deactivate(this.overlayWaitingDiv);\n        if (!Util_1.Util.isMobile() && !Util_1.Util.isEdgeHTML()) {\n            // if(!this.shareScreenButton.getIsEnabled) this.shareScreenButton.enableSharingState();\n        }\n        this.remoteVideos.addStream(sessionId, stream);\n    };\n    /**\n     * Handles local stream addition complete.\n     *\n     * @private\n     * @param {MediaStream} stream\n     * @memberof AppController\n     */\n    AppController.prototype.onLocalStreamAdded = function (stream) {\n        Log_1.Log.log('User has granted access to local media.');\n        this.localStream = stream;\n        this.attachLocalStream();\n    };\n    /**\n     * Handles remote SDP protocol arrival.\n     *\n     * @private\n     * @param {string} remoteStreamId\n     * @param {boolean} isRemoteVideoPlaybackAvailable\n     * @memberof AppController\n     */\n    AppController.prototype.onRemoteSdpProtocolReceived = function (remoteStreamId, isRemoteVideoPlaybackAvailable, isRemoteDisplayMediaAvailable) {\n        if (!isRemoteVideoPlaybackAvailable) {\n            this.transitionToActive(remoteStreamId);\n        }\n        if (isRemoteDisplayMediaAvailable) {\n            Log_1.Log.log('run display media');\n        }\n    };\n    /**\n     * Handles transition to active state action.\n     *\n     * @private\n     * @param {HTMLVideoElement} remoteVideoElement\n     * @returns {void}\n     * @memberof AppController\n     */\n    AppController.prototype.onTransitionToActive = function (remoteVideoElement) {\n        remoteVideoElement.oncanplay = undefined;\n        var connectTime = window.performance.now();\n        this.activate(remoteVideoElement);\n        this.remoteVideos.updateVideoElementsLayout();\n        // Prepare the remote video and PIP elements.\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.localVideo.srcObject)) {\n            Log_1.Log.log('AppController::onTransitionToActive: No local video source. Not swapping.');\n            return;\n        }\n        try {\n            this.miniVideo.srcObject = this.localVideo.srcObject;\n        }\n        catch (e) {\n            Log_1.Log.warn('Unable to attach stream to video element.', e);\n        }\n        // Transition opacity from 0 to 1 for the remote and mini videos.\n        this.activate(this.miniVideo);\n        // Transition opacity from 1 to 0 for the local video.\n        this.deactivate(this.localVideo);\n        try {\n            this.localVideo.srcObject = null;\n        }\n        catch (e) {\n            Log_1.Log.warn('Unable to attach stream to video element.', e);\n        }\n        // Rotate the div containing the videos 180 deg with a CSS transform.\n        this.activate(this.videosDiv);\n        var videosWrapElement = HTMLUtils_1.HTMLUtils.get('.videos-wrap');\n        videosWrapElement.classList.add('active');\n        this.showActiveConnectionControls();\n        Log_1.Log.success('Connection established.');\n    };\n    /**\n     * Shows controls associated with active connection.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.showActiveConnectionControls = function () {\n        this.show(this.hangupSvg);\n        this.show(this.textChatButton);\n    };\n    /**\n     * Enable active connection state.\n     *\n     * @private\n     * @param {string} videoId\n     * @memberof AppController\n     */\n    AppController.prototype.transitionToActive = function (videoId) {\n        var remoteVideoElement = this.remoteVideos.getElement(videoId);\n        // Stop waiting for remote video.\n        remoteVideoElement.oncanplay = undefined;\n        var connectTime = window.performance.now();\n        // Prepare the remote video and PIP elements.\n        try {\n            Log_1.Log.log(this.localVideo.srcObject);\n            this.miniVideo.srcObject = this.localVideo.srcObject;\n        }\n        catch (e) {\n            Log_1.Log.warn('Unable to attach stream to video element.', e);\n        }\n        // Transition opacity from 0 to 1 for the remote and mini videos.\n        this.activate(remoteVideoElement);\n        this.activate(this.miniVideo);\n        // Transition opacity from 1 to 0 for the local video.\n        this.deactivate(this.localVideo);\n        try {\n            this.localVideo.srcObject = null;\n        }\n        catch (e) {\n            Log_1.Log.warn('Unable to attach stream to video element.', e);\n        }\n        // Rotate the div containing the videos 180 deg with a CSS transform.\n        this.activate(this.videosDiv);\n        var videosWrapElement = HTMLUtils_1.HTMLUtils.get('.videos-wrap');\n        videosWrapElement.classList.add('active');\n        this.showActiveConnectionControls();\n    };\n    /**\n     * Switches to waiting for connection state.\n     * Called after all remote connections hang up.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.transitionToWaiting = function () {\n        this.hide(this.hangupSvg);\n        this.hide(this.textChatButton);\n        this.hide(this.textChatWindow);\n        this.deactivate(this.videosDiv);\n        // Set localVideo.srcObject now so that the local stream won't be lost if the\n        // call is restarted before the timeout.\n        try {\n            this.localVideo.srcObject = this.miniVideo.srcObject;\n        }\n        catch (e) {\n            Log_1.Log.log('Unable to attach stream to video element.', e);\n        }\n        // Transition opacity from 0 to 1 for the local video.\n        this.activate(this.localVideo);\n        this.remoteVideos.deactivateAll();\n        this.deactivate(this.miniVideo);\n    };\n    /**\n     * Handles remote hangup event.\n     *\n     * @private\n     * @param {string} sessionId\n     * @memberof AppController\n     */\n    AppController.prototype.onRemoteHangup = function (sessionId) {\n        Log_1.Log.log('The remote side hung up. ', sessionId);\n        this.remoteVideos.removeRemoteVideo(sessionId);\n        if (this.remoteVideos.isEmpty()) {\n            this.mediaCommunication.stopSendingDisplayMedia();\n            // this.shareScreenButton.disableSharingState();\n            this.transitionToWaiting();\n            this.closeFullScreen();\n        }\n    };\n    /**\n     * Shows icons.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.showIcons = function () {\n        if (!this.icons.classList.contains('active')) {\n            this.activate(this.fullscreenIcon);\n            this.activate(this.icons);\n            this.setIconTimeout();\n        }\n    };\n    /**\n     * Hides icons.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.hideIcons = function () {\n        if (this.icons.classList.contains('active')) {\n            this.deactivate(this.icons);\n            this.deactivate(this.fullscreenIcon);\n        }\n    };\n    /**\n     * Activates HTML element by adding \"active\" class.\n     *\n     * @private\n     * @param {HTMLElement} element\n     * @memberof AppController\n     */\n    AppController.prototype.activate = function (element) {\n        element.classList.add('active');\n    };\n    /**\n     * Initialize remote videos.\n     *\n     * @private\n     * @memberof AppController\n     */\n    AppController.prototype.initRemoteVideos = function () {\n        this.remoteVideos = RemoteVideos_1.RemoteVideos.getInstance();\n        this.remoteVideos.addEventListener(RemoteVideosEvent_1.RemoteVideosEvent.ADD_STREAM_SUCCESS, this.onTransitionToActive, this);\n    };\n    return AppController;\n}(EventDispatcherService_1.EventDispatcherService));\nexports.AppController = AppController;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/AppController.ts?")},"./ts/com/quickhellou/AppControllerEvent.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AppControllerEvent = void 0;\nvar AppControllerEvent = /** @class */ (function () {\n    function AppControllerEvent() {\n    }\n    AppControllerEvent.INITIALIZED = "initialized";\n    AppControllerEvent.DESTROY = "destroy";\n    return AppControllerEvent;\n}());\nexports.AppControllerEvent = AppControllerEvent;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/AppControllerEvent.ts?')},"./ts/com/quickhellou/Call.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Call = void 0;\nvar ColliderService_1 = __webpack_require__(/*! ./application/service/ColliderService */ \"./ts/com/quickhellou/application/service/ColliderService.ts\");\nvar PeerConnectionClient_1 = __webpack_require__(/*! ./PeerConnectionClient */ \"./ts/com/quickhellou/PeerConnectionClient.ts\");\nvar CallEvent_1 = __webpack_require__(/*! ./CallEvent */ \"./ts/com/quickhellou/CallEvent.ts\");\nvar Util_1 = __webpack_require__(/*! ./Util */ \"./ts/com/quickhellou/Util.ts\");\nvar PeerConnectionClientEvent_1 = __webpack_require__(/*! ./PeerConnectionClientEvent */ \"./ts/com/quickhellou/PeerConnectionClientEvent.ts\");\nvar BaseUtils_1 = __webpack_require__(/*! ../genb/base/utils/BaseUtils */ \"./ts/com/genb/base/utils/BaseUtils.ts\");\nvar FormService_1 = __webpack_require__(/*! ../genb/base/services/FormService */ \"./ts/com/genb/base/services/FormService.ts\");\nvar PeerConnectionResponseType_1 = __webpack_require__(/*! ./application/model/PeerConnectionResponseType */ \"./ts/com/quickhellou/application/model/PeerConnectionResponseType.ts\");\nvar Log_1 = __webpack_require__(/*! ../genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\nvar StringUtils_1 = __webpack_require__(/*! ../genb/base/utils/StringUtils */ \"./ts/com/genb/base/utils/StringUtils.ts\");\nvar RegisterOptions_1 = __webpack_require__(/*! ./application/model/RegisterOptions */ \"./ts/com/quickhellou/application/model/RegisterOptions.ts\");\nvar SessionInit_1 = __webpack_require__(/*! ./application/model/SessionInit */ \"./ts/com/quickhellou/application/model/SessionInit.ts\");\nvar RtcSession_1 = __webpack_require__(/*! ./application/model/RtcSession */ \"./ts/com/quickhellou/application/model/RtcSession.ts\");\nvar SessionOptions_1 = __webpack_require__(/*! ./application/model/SessionOptions */ \"./ts/com/quickhellou/application/model/SessionOptions.ts\");\nvar VideoTrackEventOptions_1 = __webpack_require__(/*! ./application/model/VideoTrackEventOptions */ \"./ts/com/quickhellou/application/model/VideoTrackEventOptions.ts\");\nvar RetryConsumeManager_1 = __webpack_require__(/*! ./application/controller/RetryConsumeManager */ \"./ts/com/quickhellou/application/controller/RetryConsumeManager.ts\");\nvar RetryJobEvent_1 = __webpack_require__(/*! ./application/events/RetryJobEvent */ \"./ts/com/quickhellou/application/events/RetryJobEvent.ts\");\n/**\n * Call facade.\n *\n * @export\n * @class Call\n * @extends {FormService}\n */\nvar Call = /** @class */ (function (_super) {\n    __extends(Call, _super);\n    /**\n     * Creates an instance of Call.\n     *\n     * @param {LoadingParams} params\n     * @memberof Call\n     */\n    function Call(params) {\n        var _this = _super.call(this) || this;\n        _this.params = params;\n        _this.colliderService = ColliderService_1.ColliderService.getInstance();\n        _this.retryConsumeManagers = new Map();\n        _this.pcClients = new Map();\n        _this.localStream = null;\n        _this.startTime = null;\n        _this.cameraTrack = null;\n        _this.isCertificateGenerated = false;\n        _this.createCertificate();\n        return _this;\n    }\n    /**\n     * Sends a message via signaling channel.\n     *\n     * @param {*} message\n     * @memberof Call\n     */\n    Call.prototype.send = function (message, persistant) {\n        if (persistant === void 0) { persistant = true; }\n        var msgString = JSON.stringify(message);\n        this.colliderService.send(msgString, persistant);\n    };\n    /**\n     * Broadcasts a message.\n     *\n     * @param {string} inputType\n     * @param {*} message\n     * @memberof Call\n     */\n    Call.prototype.broadcast = function (inputType, message) {\n        this.colliderService.broadcast(inputType, message);\n    };\n    /**\n     * Toggles video muting.\n     *\n     * @returns {void}\n     * @memberof Call\n     */\n    Call.prototype.toggleVideoMute = function () {\n        var videoTracks = this.localStream.getVideoTracks();\n        if (videoTracks.length === 0) {\n            Log_1.Log.log('No local video available.');\n            return;\n        }\n        Log_1.Log.log('Toggling video mute state.');\n        for (var _i = 0, videoTracks_1 = videoTracks; _i < videoTracks_1.length; _i++) {\n            var videoTrack = videoTracks_1[_i];\n            videoTrack.enabled = !videoTrack.enabled;\n        }\n        Log_1.Log.log('Video ' + (videoTracks[0].enabled ? 'unmuted.' : 'muted.'));\n    };\n    /**\n     * Adds display media tracks to peer connection clients.\n     *\n     * @param {MediaStreamTrack} track\n     * @memberof Call\n     */\n    Call.prototype.addDisplayMediaTracks = function (track) {\n        var _this = this;\n        // mute video track\n        this.cameraTrack.enabled = false;\n        // Re-enable video on screen sharing end.\n        track.addEventListener('ended', function () {\n            _this.stopDisplayMedia();\n        });\n        this.localStream\n            .getVideoTracks()\n            .forEach(function (videoTrack) {\n            _this.localStream.removeTrack(videoTrack);\n        });\n        this.localStream.addTrack(track);\n        this.displayTrack = track;\n        this.dispatchEvent(CallEvent_1.CallEvent.LOCAL_VIDEO_MEDIA_CHANGE, new VideoTrackEventOptions_1.VideoTrackEventOptions(this.displayTrack, VideoTrackEventOptions_1.VideoTrackEventOptions.SCREEN_CAPTURE));\n        try {\n            this.pcClients.forEach(function (pcClient) {\n                pcClient.addVideoTrack(_this.displayTrack);\n            });\n        }\n        catch (e) {\n            Log_1.Log.log('error', e);\n        }\n    };\n    /**\n     * Stops the display media.\n     *\n     * @public\n     * @memberof Call\n     */\n    Call.prototype.stopDisplayMedia = function () {\n        if (!this.displayTrack) {\n            return;\n        }\n        if (!this.displayTrack.enabled) {\n            return;\n        }\n        this.displayTrack.enabled = false;\n        this.displayTrack.stop();\n        this.addCameraTracks();\n        this.dispatchEvent(CallEvent_1.CallEvent.LOCAL_VIDEO_MEDIA_CHANGE, new VideoTrackEventOptions_1.VideoTrackEventOptions(this.cameraTrack));\n    };\n    /**\n     * Toggles audio unmuting.\n     *\n     * @returns {void}\n     * @memberof Call\n     */\n    Call.prototype.toggleAudioUnMute = function () {\n        var audioTracks = this.localStream.getAudioTracks();\n        if (audioTracks.length === 0) {\n            Log_1.Log.log('No local audio available.');\n            return;\n        }\n        Log_1.Log.log('Toggling audio to unmute state.');\n        for (var _i = 0, audioTracks_1 = audioTracks; _i < audioTracks_1.length; _i++) {\n            var audioTrack = audioTracks_1[_i];\n            audioTrack.enabled = true;\n        }\n        Log_1.Log.log('Audio unmuted.');\n    };\n    /**\n     * Toggles audio muting.\n     *\n     * @returns {void}\n     * @memberof Call\n     */\n    Call.prototype.toggleAudioMute = function () {\n        var audioTracks = this.localStream.getAudioTracks();\n        if (audioTracks.length === 0) {\n            Log_1.Log.log('No local audio available.');\n            return;\n        }\n        Log_1.Log.log('Toggling audio mute state.');\n        for (var _i = 0, audioTracks_2 = audioTracks; _i < audioTracks_2.length; _i++) {\n            var audioTrack = audioTracks_2[_i];\n            audioTrack.enabled = !audioTrack.enabled;\n        }\n        Log_1.Log.log('Audio ' + (audioTracks[0].enabled ? 'unmuted.' : 'muted.'));\n    };\n    /**\n     * Return call start time.\n     *\n     * @public\n     * @returns {number}\n     * @memberof Call\n     */\n    Call.prototype.getStartTime = function () {\n        return this.startTime;\n    };\n    /**\n     * Sets local stream.\n     *\n     * @public\n     * @param {MediaStream} stream\n     * @memberof Call\n     */\n    Call.prototype.setLocalStream = function (stream) {\n        this.localStream = stream;\n        if (this.localStream.getVideoTracks().length === 0) {\n            return;\n        }\n        this.cameraTrack = this.localStream.getVideoTracks().shift();\n    };\n    /**\n     * Sets room.\n     *\n     * @public\n     * @param {Room} room\n     * @memberof Call\n     */\n    Call.prototype.setRoom = function (room) {\n        this.room = room;\n    };\n    /**\n     * Handles received signaling channel message.\n     *\n     * @public\n     * @param {string} message\n     * @memberof Call\n     */\n    Call.prototype.receiveColliderChannelMessage = function (messageObj) {\n        var message = JSON.parse(messageObj);\n        var sessionId = message.sessionId;\n        Log_1.Log.log('Call::receiveColliderChannelMessage (should create PC Client) ', sessionId);\n        this.createPcClient(new RtcSession_1.RtcSession(sessionId, '', message)).then(function (pcClient) {\n            pcClient.receiveSignalingMessage(message);\n        });\n    };\n    /**\n     * Starts signaling.\n     *\n     * @public\n     * @memberof Call\n     */\n    Call.prototype.startRtcSignaling = function (sessionInit) {\n        var _this = this;\n        sessionInit.sessions.forEach(function (session) {\n            Log_1.Log.log('Call::startRtcSignaling - forward? ', session.isForward);\n            if (!session.isForward) {\n                _this.startNewRtcSession(session);\n            }\n            else {\n                _this.forwardNewRtcSession(session);\n            }\n        });\n    };\n    /**\n     * Starts new connection session.\n     *\n     * @public\n     * @memberof Call\n     */\n    Call.prototype.startNewRtcSession = function (session) {\n        var _this = this;\n        this.startTime = window.performance.now();\n        Log_1.Log.log('Start new session with ID: ', session.id);\n        if (StringUtils_1.StringUtils.isEmpty(session.id)) {\n            Log_1.Log.fatal('No sessionId from the remote peer.');\n            return;\n        }\n        this.createPcClient(session)\n            .then(function (pcClient) {\n            if (_this.localStream) {\n                pcClient.addStream(_this.localStream);\n            }\n            if (session.isInitiator) {\n                _this.startupAsInitiator(pcClient);\n                return;\n            }\n            var started = pcClient.startAsReceiver(session.messages);\n            if (!started) {\n                _this.startRetryConsumeManager(pcClient);\n            }\n        })\n            .catch(function (reason) {\n            _this.onError(\"Create PeerConnection exception: \" + reason);\n        });\n    };\n    /**\n     * Returns peer connection stats.\n     *\n     * @param {Function} callback\n     * @returns {void}\n     * @memberof Call\n     */\n    Call.prototype.getPeerConnectionStats = function (callback, pcClientId) {\n        var pcClient = this.pcClients.get(pcClientId);\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(pcClient)) {\n            return;\n        }\n    };\n    /**\n     * Returns peer connection states.\n     *\n     * @returns\n     * @memberof Call\n     */\n    Call.prototype.getPeerConnectionStates = function (pcClientId) {\n        var pcClient = this.pcClients.get(pcClientId);\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(pcClient)) {\n            return null;\n        }\n        return pcClient.getPeerConnectionStates();\n    };\n    /**\n     * Hangs up a call locally.\n     *\n     * @public\n     * @param {boolean} async\n     * @returns {Promise<any>}\n     * @memberof Call\n     */\n    Call.prototype.hangup = function (async) {\n        var _this = this;\n        this.startTime = null;\n        if (!!this.localStream) {\n            if (typeof this.localStream.getTracks === 'undefined') {\n                this.localStream.stop();\n            }\n            else {\n                this.localStream.getTracks().forEach(function (track) {\n                    track.stop();\n                });\n            }\n            this.localStream = null;\n        }\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.room)) {\n            Log_1.Log.log('No room defined.');\n            return;\n        }\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.room.id)) {\n            Log_1.Log.log('No room ID defined.');\n            return;\n        }\n        // close WebRTC peer client\n        this.pcClients.forEach(function (pcClient) {\n            pcClient.close();\n        });\n        // Send 'leave' to PyApp. This must complete before saying BYE to other client.\n        // When the other client sees BYE it attempts to post offer and candidates to\n        // PyApp. PyApp needs to know that we're disconnected at that point otherwise\n        // it will forward messages to this client instead of storing them.\n        // This section of code is executed in both sync and async depending on\n        // where it is called from. When the browser is closed, the requests must\n        // be executed as sync to finish before the browser closes. When called\n        // from pressing the hang up button, the requests are executed async.\n        // If you modify the steps used to hang up a call, you must also modify\n        // the clean up queue steps set up in queueCleanupMessages_.');\n        var steps = [];\n        steps.push({\n            step: function () {\n                // Send POST request to /leave.\n                if (_this.getLeaveUrl().valid) {\n                    Log_1.Log.log('sending leave', _this.getLeaveUrl().url);\n                    return Util_1.Util.sendUrlRequest('POST', _this.getLeaveUrl().url, async);\n                }\n            },\n            errorString: 'Error sending /leave:',\n        });\n        steps.push({\n            step: function () {\n                // Send bye to the other clients.\n                Array.from(_this.pcClients).forEach(function (pcClientPair) {\n                    var pcClient = pcClientPair[1];\n                    _this.sendToOther(pcClient.getSession().otherClientId, {\n                        type: PeerConnectionResponseType_1.PeerConnectionResponseType.BYE,\n                        clientId: _this.params.clientID,\n                        sessionId: pcClient.getSessionId(),\n                    });\n                    _this.pcClients.delete(pcClient.getId());\n                });\n                // request current sessons and sends session update for collider applicaion.\n            },\n            errorString: 'Error sending bye:',\n        });\n        steps.push({\n            step: function () {\n                // Close signaling channel.\n                Log_1.Log.log('close WS collider from hangup ', async);\n                return _this.colliderService.close(async);\n            },\n            errorString: 'Error closing signaling channel:',\n        });\n        steps.push({\n            step: function () {\n                // the room stays as it is, no need to introduce new one\n                // this.params.previousRoomID = this.room.id;\n                // this.params.roomID = this.room.id = null;\n                _this.params.clientID = null;\n            },\n            errorString: 'Error setting params:',\n        });\n        if (async) {\n            var errorHandler_1 = function (errorString) {\n                Log_1.Log.warn(errorString);\n            };\n            var promise = Promise.resolve();\n            var _loop_1 = function (step) {\n                promise = promise\n                    .then(function () {\n                    step.step.call(_this);\n                })\n                    .catch(function (reason) {\n                    Log_1.Log.log(reason, step.errorString);\n                    errorHandler_1(step.errorString);\n                });\n            };\n            for (var _i = 0, steps_1 = steps; _i < steps_1.length; _i++) {\n                var step = steps_1[_i];\n                _loop_1(step);\n            }\n            return promise;\n        }\n        // Execute the cleanup steps.\n        var executeStep = function (executor, errorString) {\n            try {\n                executor();\n            }\n            catch (ex) {\n                Log_1.Log.log(errorString + ' ' + ex);\n            }\n        };\n        for (var _a = 0, steps_2 = steps; _a < steps_2.length; _a++) {\n            var step = steps_2[_a];\n            executeStep(step.step, step.errorString);\n        }\n        if (BaseUtils_1.BaseUtils.isObjectDefined(this.room.id) ||\n            BaseUtils_1.BaseUtils.isObjectDefined(this.params.clientID)) {\n            Log_1.Log.log('ERROR: sync cleanup tasks did not complete successfully.', this.room.id, this.params.clientID);\n        }\n        else {\n            Log_1.Log.log('Cleanup completed.');\n        }\n        return Promise.resolve();\n    };\n    /**\n     * Handles remote hang up.\n     *\n     * @public\n     * @memberof Call\n     */\n    Call.prototype.onRemoteHangup = function (sessionId) {\n        this.startTime = null;\n        // On remote hangup this client becomes the new initiator.\n        var pcClient = this.pcClients.get(sessionId);\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(pcClient)) {\n            Log_1.Log.warn(\"Call::onRemoteHangup pcClient identified by sessionId \" + sessionId + \" doesn't exist.\\n        Not initializing new connection.\");\n            return;\n        }\n        // this.requestSessionUpdate();\n        pcClient.close();\n        this.pcClients.delete(sessionId);\n        var sessionInit = new SessionInit_1.SessionInit();\n        sessionInit.addSession(new RtcSession_1.RtcSession(pcClient.getSession().id, StringUtils_1.StringUtils.EMPTY, StringUtils_1.StringUtils.EMPTY, true));\n        this.startRtcSignaling(sessionInit);\n    };\n    /**\n     * Handles remote hangup.\n     *\n     * @param {string} clientId\n     * @returns {string}\n     * @memberof Call\n     */\n    Call.prototype.onRemoteHangupByClientId = function (clientId) {\n        var _this = this;\n        var sessionId = StringUtils_1.StringUtils.EMPTY;\n        Array.from(this.pcClients).forEach(function (pcClientPair) {\n            var pcClient = pcClientPair[1];\n            if (pcClient.getSession().otherClientId === clientId) {\n                _this.onRemoteHangup(pcClient.getSession().id);\n                sessionId = pcClient.getSession().id;\n            }\n        });\n        return sessionId;\n    };\n    /**\n     * Sets other client's session ID for a particular peer connection client.\n     *\n     * @param {RegisterOptions} registerOptions\n     * @memberof Call\n     */\n    Call.prototype.setSessionOtherClientId = function (registerOptions) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var pcClient = _this.pcClients.get(registerOptions.sessionId);\n            Log_1.Log.log('Call::setSessionOtherClientId client?', !!pcClient);\n            if (BaseUtils_1.BaseUtils.isObjectDefined(pcClient)) {\n                var session = pcClient.getSession();\n                session.otherClientId = registerOptions.clientId;\n                pcClient.setSession(session);\n                Log_1.Log.log('Call::setSessionOtherClientId updated');\n                if (pcClient.requireDataConsume) {\n                    var retryConsumeManager = _this.retryConsumeManagers.get(session.id);\n                    retryConsumeManager.next();\n                }\n            }\n            else {\n                Log_1.Log.log('No client.');\n            }\n            resolve();\n        });\n    };\n    Call.prototype.onRemoteIceComplete = function (data) {\n        var sessionId = data.sessionId;\n        var candidates = data.candidates;\n        var pcClient = this.pcClients.get(sessionId);\n        pcClient.onRemoteIceComplete(candidates);\n    };\n    Call.prototype.consumeRemoteMessages = function (pcClient) {\n        pcClient.requireDataConsume = false;\n        this.colliderService.touch(this.params.roomID, this.params.clientID);\n        this.post(\"/consume/\" + this.params.roomID + \"/\" + pcClient.getSessionId() + \"/\" + this.params.clientID).then(function (result) {\n            if (!result) {\n                return;\n            }\n            var resultJson = JSON.parse(result);\n            var messages = resultJson.messages;\n            messages.forEach(function (message) {\n                Log_1.Log.log('%%% consumeRemoteMessages %%%', message);\n                pcClient.receiveSignalingMessage(message);\n            });\n        });\n    };\n    /**\n     * Request session update in go app.\n     *\n     * @private\n     * @memberof Call\n     */\n    Call.prototype.requestSessionUpdate = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     *  Requests sessions list from py app.\n     *\n     * @private\n     * @returns {Promise<string>}\n     * @memberof Call\n     */\n    Call.prototype.onLocalIceComplete = function (data) {\n        var session = data.session;\n        /// xxx static\n        this.post(this.params.hostUrl + \"/sessions-getter/\" + this.params.roomID);\n        Log_1.Log.log('onLocalIceComplete requireDataConsume', data.pcClient.requireDataConsume);\n        if (data.pcClient.requireDataConsume) {\n            this.startRetryConsumeManager(data.pcClient);\n        }\n    };\n    /**\n     * Starts retry consume manager.\n     *\n     * @private\n     * @param {PeerConnectionClient} pcClient\n     * @memberof Call\n     */\n    Call.prototype.startRetryConsumeManager = function (pcClient) {\n        var _this = this;\n        var retryConsumeManager = this.retryConsumeManagers.get(pcClient.getSessionId());\n        if (BaseUtils_1.BaseUtils.isObjectDefined(retryConsumeManager)) {\n            return;\n        }\n        retryConsumeManager = new RetryConsumeManager_1.RetryConsumeManager(this.colliderService, pcClient, this.params.roomID, this.params.clientID, this.params.hostUrl);\n        retryConsumeManager.addEventListener(RetryJobEvent_1.RetryJobEvent.COMPLETE, function () {\n            Log_1.Log.log('Job complete.');\n            _this.retryConsumeManagers.delete(pcClient.getSessionId());\n        }, this);\n        retryConsumeManager.start();\n        this.retryConsumeManagers.set(pcClient.getSessionId(), retryConsumeManager);\n    };\n    /**\n     * Sets local video track as camera.\n     *\n     * @private\n     * @memberof Call\n     */\n    Call.prototype.setLocalVideoTrackAsCamera = function () {\n        if (!!this.displayTrack) {\n            this.localStream.removeTrack(this.displayTrack);\n        }\n        if (!this.localStream.getTrackById(this.cameraTrack.id)) {\n            this.localStream.addTrack(this.cameraTrack);\n        }\n    };\n    /**\n     * Adds camera tracks to all the peer connections.\n     *\n     * @private\n     * @memberof Call\n     */\n    Call.prototype.addCameraTracks = function () {\n        var _this = this;\n        this.setLocalVideoTrackAsCamera();\n        this.pcClients.forEach(function (pcClient) {\n            pcClient.addVideoTrack(_this.cameraTrack);\n        });\n    };\n    /**\n     * Sends a message to other client.\n     *\n     * @private\n     * @param {string} otherClientId\n     * @param {*} message\n     * @memberof Call\n     */\n    Call.prototype.sendToOther = function (otherClientId, message) {\n        var msgString = JSON.stringify(message);\n        this.colliderService.sendToOther(this.params.roomID, this.params.clientID, otherClientId, msgString);\n    };\n    /**\n     * Sends response via signling channel.\n     *\n     * @private\n     * @param {*} options\n     * @memberof Call\n     */\n    Call.prototype.sendResponse = function (otherClientId, options) {\n        var responseOptions = {\n            type: 'response',\n            body: options,\n        };\n        if (StringUtils_1.StringUtils.isNotEmpty(otherClientId)) {\n            this.sendToOther(otherClientId, responseOptions);\n            return;\n        }\n        this.send(responseOptions);\n    };\n    /**\n     * Startups connection as initiator.\n     *\n     * @private\n     * @param {PeerConnectionClient} pcClient\n     * @memberof Call\n     */\n    Call.prototype.startupAsInitiator = function (pcClient) {\n        if (!this.hasAnyActiveSession()) {\n            this.dispatchEvent(CallEvent_1.CallEvent.CALLER_STARTED, this.room);\n        }\n        pcClient.startAsInitiator(this.params.offerOptions);\n    };\n    /**\n     * Forwards session initialization to a remote peer.\n     *\n     * @private\n     * @param {RtcSession} session\n     * @memberof Call\n     */\n    Call.prototype.forwardNewRtcSession = function (session) {\n        var options = new SessionOptions_1.SessionOptions();\n        var otherClientId = session.otherClientId;\n        session.isForward = false;\n        session.otherClientId = this.params.clientID;\n        options.session = session;\n        this.sendResponse(otherClientId, options);\n    };\n    /**\n     * Creates peer connection if not exists.\n     * Generates ECDSA certificates.\n     *\n     * @private\n     * @returns {Promise<void>}\n     * @memberof Call\n     */\n    Call.prototype.createCertificate = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (_this.isCertificateGenerated) {\n                resolve();\n                return;\n            }\n            if (typeof RTCPeerConnection.generateCertificate === 'function') {\n                var certParams = { name: 'ECDSA', namedCurve: 'P-256' };\n                RTCPeerConnection\n                    .generateCertificate(certParams)\n                    .then(function (certificate) {\n                    Log_1.Log.log('ECDSA certificate generated successfully.');\n                    _this.params.peerConnectionConfig.certificates = [certificate];\n                    _this.isCertificateGenerated = true;\n                    resolve();\n                })\n                    .catch(function (reason) {\n                    Log_1.Log.log('ECDSA certificate generation failed.');\n                    reject(reason);\n                });\n            }\n            else {\n                resolve();\n            }\n        });\n    };\n    /**\n     * Creates new peer connection client.\n     *\n     * @private\n     * @returns {Promise<PeerConnectionClient>}\n     * @memberof Call\n     */\n    Call.prototype.createPcClient = function (session) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            var pcClient = _this.pcClients.get(session.id);\n            if (BaseUtils_1.BaseUtils.isObjectDefined(pcClient)) {\n                Log_1.Log.log('Call::createPcClient ', session.id, pcClient.requireDataConsume, ' pc client already exists. resolving.');\n                resolve(pcClient);\n                return;\n            }\n            Log_1.Log.log(\"Call::createPcClient \" + session.id + \" pc client not exists. creating.\");\n            pcClient = new PeerConnectionClient_1.PeerConnectionClient(_this.params, _this.startTime, session);\n            _this.pcClients.set(session.id, pcClient);\n            pcClient.init().then(function () {\n                _this.addPeerConnectionClientEvents(pcClient);\n                resolve(pcClient);\n            });\n        });\n    };\n    /**\n     * Adds peer connection client events\n     *\n     * @private\n     * @param {PeerConnectionClient} pcClient\n     * @memberof Call\n     */\n    Call.prototype.addPeerConnectionClientEvents = function (pcClient) {\n        var _this = this;\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.SIGNALING_MESSAGE, function (data) {\n            Log_1.Log.log(\"send SIGNALING_MESSAGE\", data, pcClient.getSession(), pcClient.ifSendAsPyMessage());\n            _this.sendSignalingMessage(data, pcClient.getSession(), pcClient.ifSendAsPyMessage());\n        }, this);\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.REMOTE_SDP_PROTOCOL_RECEIVED, function (data) {\n            // TODO identify RTC client as remote session id\n            _this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_SDP_PROTOCOL_RECEIVED, data);\n        }, this);\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.REMOTE_STREAM_ADDED, function (data) {\n            _this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_STREAM_ADDED, data);\n        }, this);\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.SIGNALING_STATE_CHANGE, function () {\n            _this.dispatchEvent(CallEvent_1.CallEvent.SIGNALING_STATE_CHANGE);\n        }, this);\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ICE_CONNECTION_STATE_CHANGE, function () {\n            _this.dispatchEvent(CallEvent_1.CallEvent.ICE_CONNECTION_STATE_CHANGE);\n        }, this);\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.NEW_ICE_CANDIDATE, function (data) {\n            _this.dispatchEvent(CallEvent_1.CallEvent.NEW_ICE_CANDIDATE, data);\n        }, this);\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ICE_GATHERING_COMPLETE, function (data) {\n            data.pcClient = pcClient;\n            _this.onLocalIceComplete(data);\n        }, this);\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ERROR, function (message) {\n            _this.onError(message);\n        }, this);\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.CREATE_OFFER_SUCCESS, function (session) {\n            var options = new RegisterOptions_1.RegisterOptions();\n            options.clientId = _this.params.clientID;\n            options.sessionId = session.id;\n            options.type = 'offer';\n            options.uuid = StringUtils_1.StringUtils.uuidv4();\n            Log_1.Log.log('Call:: sending offer', session.otherClientId, options);\n            _this.sendResponse(session.otherClientId, options);\n        }, this);\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.CREATE_ANSWER_SUCCESS, function (session) {\n            var options = new RegisterOptions_1.RegisterOptions();\n            options.clientId = _this.params.clientID;\n            options.sessionId = session.id;\n            options.type = 'answer';\n            options.uuid = StringUtils_1.StringUtils.uuidv4();\n            if (session.otherClientId !== '') {\n                Log_1.Log.log('Call:: sending answer', session.otherClientId, options);\n                _this.sendResponse(session.otherClientId, options);\n            }\n        }, this);\n    };\n    /**\n     * Changes call bandwidth.\n     *\n     * @private\n     * @param {string} bandwidth\n     * @returns\n     * @memberof Call\n     */\n    Call.prototype.changeBandwidth = function (bandwidth) {\n        if ((adapter.browserDetails.browser === 'chrome' ||\n            adapter.browserDetails.browser === 'safari' ||\n            (adapter.browserDetails.browser === 'firefox' &&\n                adapter.browserDetails.version >= 64)) &&\n            'RTCRtpSender' in window &&\n            'setParameters' in window.RTCRtpSender.prototype) {\n            this.pcClients.forEach(function (pcClient) {\n                pcClient.changeBandwidth(bandwidth);\n            });\n            return;\n        }\n    };\n    /**\n     * Sends signaling message consumed from peer connection client.\n     * Initiator sends to PyApp, receiver to Collider.\n     *\n     * @private\n     * @param {*} message\n     * @param {RtcSession} session\n     * @param {boolean} [sendAsPyMessage=false]\n     * @memberof Call\n     */\n    Call.prototype.sendSignalingMessage = function (message, session, sendAsPyMessage) {\n        if (sendAsPyMessage === void 0) { sendAsPyMessage = false; }\n        var msgString = JSON.stringify(message);\n        if (sendAsPyMessage) {\n            // Initiator posts all messages to PyApp. PyApp will either store the messages\n            // until the other client connects, or forward the message to Collider if\n            // the other client is already connected.\n            // Must append query parameters in case we've specified alternate WSS url.\n            var path = this.room.server;\n            if (StringUtils_1.StringUtils.isNotEmpty(session.id)) {\n                path = path + \"/sessionmessage/\" + this.room.id + \"/\" + session.id;\n            }\n            else {\n                path = path + \"/message/\" + this.room.id;\n            }\n            path = path + \"/\" + this.params.clientID + window.location.search;\n            this.post(path, msgString);\n        }\n        else {\n            if (StringUtils_1.StringUtils.isNotEmpty(session.otherClientId)) {\n                this.colliderService.sendToOther(this.params.roomID, this.params.clientID, session.otherClientId, msgString);\n            }\n            else {\n                this.colliderService.send(msgString);\n            }\n        }\n    };\n    /**\n     * Handles error message.\n     *\n     * @private\n     * @param {any} message\n     * @memberof Call\n     */\n    Call.prototype.onError = function (message) {\n        this.dispatchEvent(CallEvent_1.CallEvent.ERROR, message);\n    };\n    /**\n     * Returns leave URL.\n     *\n     * @private\n     * @returns {string}\n     * @memberof Call\n     */\n    Call.prototype.getLeaveUrl = function (clientId) {\n        if (clientId === void 0) { clientId = this.params.clientID; }\n        if (!clientId) {\n            return { valid: false };\n        }\n        return {\n            valid: true,\n            url: this.room.server + \"/leave/\" + this.room.id + \"/\" + clientId,\n        };\n    };\n    /**\n     * Checks if call has a single connection only.\n     *\n     * @private\n     * @returns {boolean}\n     * @memberof Call\n     */\n    Call.prototype.hasAnyActiveSession = function () {\n        var hasActiveRemoteSdp = false;\n        this.pcClients.forEach(function (pcClient) {\n            hasActiveRemoteSdp = hasActiveRemoteSdp || pcClient.hasActiveRemoteSdp();\n        });\n        return hasActiveRemoteSdp;\n    };\n    return Call;\n}(FormService_1.FormService));\nexports.Call = Call;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/Call.ts?")},"./ts/com/quickhellou/CallEvent.ts":(__unused_webpack_module,exports)=>{"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CallEvent = void 0;\nvar CallEvent = /** @class */ (function () {\n    function CallEvent() {\n    }\n    CallEvent.ERROR = 'error';\n    CallEvent.STATUS_MESSAGE = 'status_message';\n    CallEvent.NEW_ICE_CANDIDATE = 'new_ice_candidate';\n    CallEvent.ICE_CONNECTION_STATE_CHANGE = 'ice_connection_state_change';\n    CallEvent.SIGNALING_STATE_CHANGE = 'signaling_state_change';\n    CallEvent.REMOTE_STREAM_ADDED = 'remote_stream_added';\n    CallEvent.LOCAL_STREAM_ADDED = 'local_stream_added';\n    CallEvent.LOCAL_DISPLAY_MEDIA_TRACK_ADDED = 'local_display_media_track_added';\n    CallEvent.REMOTE_SDP_PROTOCOL_RECEIVED = 'remote_sdp_protocol_received';\n    CallEvent.REMOTE_HANGUP = 'remote_hangup';\n    CallEvent.WEBSOCKET_CLOSED = 'websocket_closed';\n    CallEvent.WSS_RESPONSE = 'wss_response';\n    CallEvent.CALLER_STARTED = 'caller_started';\n    CallEvent.REMOTE_TEXT_CHAT_MESSAGE = 'remote_text_chat_message';\n    CallEvent.REMOTE_CLIENT_REGISTERED = 'remote_client_registered';\n    CallEvent.LOCAL_VIDEO_MEDIA_CHANGE = 'local_video_media_change';\n    return CallEvent;\n}());\nexports.CallEvent = CallEvent;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/CallEvent.ts?")},"./ts/com/quickhellou/Constants.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Constants = void 0;\nvar Constants = /** @class */ (function () {\n    function Constants() {\n    }\n    // Action type for remote web socket communication.\n    Constants.WS_ACTION = "ws";\n    // Action type for remote xhr communication.\n    Constants.XHR_ACTION = "xhr";\n    // Action type for adding a command to the remote clean up queue.\n    Constants.QUEUEADD_ACTION = "addToQueue";\n    // Action type for clearing the remote clean up queue.\n    Constants.QUEUECLEAR_ACTION = "clearQueue";\n    // Web socket action type specifying that an event occured.\n    Constants.EVENT_ACTION = "event";\n    // Web socket action type to create a remote web socket.\n    Constants.WS_CREATE_ACTION = "create";\n    // Web socket event type onerror.\n    Constants.WS_EVENT_ONERROR = "onerror";\n    // Web socket event type onmessage.\n    Constants.WS_EVENT_ONMESSAGE = "onmessage";\n    // Web socket event type onopen.\n    Constants.WS_EVENT_ONOPEN = "onopen";\n    // Web socket event type onclose.\n    Constants.WS_EVENT_ONCLOSE = "onclose";\n    // Web socket event sent when an error occurs while calling send.\n    Constants.WS_EVENT_SENDERROR = "onsenderror";\n    // Web socket action type to send a message on the remote web socket.\n    Constants.WS_SEND_ACTION = "send";\n    // Web socket action type to close the remote web socket.\n    Constants.WS_CLOSE_ACTION = "close";\n    Constants.TCP = "tcp";\n    Constants.RELAY = "relay";\n    return Constants;\n}());\nexports.Constants = Constants;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/Constants.ts?')},"./ts/com/quickhellou/HTMLTemplates.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.HTMLTemplates = void 0;\nvar HTMLTemplates = /** @class */ (function () {\n    function HTMLTemplates() {\n    }\n    HTMLTemplates.getRemoteMessageHTML = function (message) {\n        return "<div class=\\"text-chat-window__message text-chat-window__message--incoming\\">\\n          <div class=\\"df df-lt text-chat-window__message-content-wrap text-chat-window__message-content-wrap--incoming\\">\\n            <div class=\\"df text-chat-window__message-icon-wrap\\">\\n            </div>\\n            <div class=\\"df df-f1 text-chat-window__message-content text-chat-window__message-content--incoming\\">\\n            " + message.trim() + "</div>\\n          </div>\\n        </div>";\n    };\n    HTMLTemplates.getLocalMessageHTML = function (message) {\n        return "<div class=\\"text-chat-window__message text-chat-window__message--outgoing\\">\\n        <div class=\\"df df-lt text-chat-window__message-content-wrap text-chat-window__message-content-wrap--outgoing\\">\\n          <div class=\\"df df-c  text-chat-window__message-icon-wrap text-chat-window__message-icon-wrap--outcoming\\">\\n            <img class=\\"text-chat-window__message-icon\\" src=\\"/static/images/user.svg\\" alt=\\"\\">\\n          </div>\\n          <div class=\\"df df-f1 text-chat-window__message-content text-chat-window__message-content--outgoing\\">\\n            <div>" + message.trim() + "</div>\\n          </div>\\n        </div>\\n      </div>";\n    };\n    return HTMLTemplates;\n}());\nexports.HTMLTemplates = HTMLTemplates;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/HTMLTemplates.ts?')},"./ts/com/quickhellou/IconSet.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.IconSet = void 0;\nvar HTMLUtils_1 = __webpack_require__(/*! ../genb/base/utils/HTMLUtils */ "./ts/com/genb/base/utils/HTMLUtils.ts");\nvar IconSet = /** @class */ (function () {\n    function IconSet(selector) {\n        this.iconElement = HTMLUtils_1.HTMLUtils.get(selector);\n    }\n    IconSet.prototype.toggle = function () {\n        if (this.iconElement.classList.contains("on")) {\n            this.iconElement.classList.remove("on");\n        }\n        else {\n            this.iconElement.classList.add("on");\n        }\n    };\n    IconSet.prototype.disable = function () {\n        if (!this.iconElement.classList.contains("on")) {\n            this.iconElement.classList.add("on");\n        }\n    };\n    IconSet.prototype.enable = function () {\n        if (this.iconElement.classList.contains("on")) {\n            this.iconElement.classList.remove("on");\n        }\n    };\n    return IconSet;\n}());\nexports.IconSet = IconSet;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/IconSet.ts?')},"./ts/com/quickhellou/InvitationView.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.InvitationView = void 0;\nvar HtmlComponent_1 = __webpack_require__(/*! ../genb/base/components/HtmlComponent */ "./ts/com/genb/base/components/HtmlComponent.ts");\nvar HTMLUtils_1 = __webpack_require__(/*! ../genb/base/utils/HTMLUtils */ "./ts/com/genb/base/utils/HTMLUtils.ts");\nvar StringUtils_1 = __webpack_require__(/*! ../genb/base/utils/StringUtils */ "./ts/com/genb/base/utils/StringUtils.ts");\n/**\n * Send invitation view component.\n *\n * @export\n * @class InvitationView\n * @extends {HTMLComponent}\n */\nvar InvitationView = /** @class */ (function (_super) {\n    __extends(InvitationView, _super);\n    /**\n     * Creates an instance of InvitationView.\n     *\n     * @param {HTMLElement} element\n     * @memberof InvitationView\n     */\n    function InvitationView(element) {\n        var _this = _super.call(this, element) || this;\n        _this.sendInvitationForm = _this.findElement(".send-invitation-form");\n        _this.addFormEvents();\n        return _this;\n    }\n    /**\n     * Adds event to the send invitaion form.\n     *\n     * @private\n     * @memberof InvitationView\n     */\n    InvitationView.prototype.addFormEvents = function () {\n        this.sendInvitationForm.addEventListener("submit", function (event) {\n            event.preventDefault();\n            var emailInput = HTMLUtils_1.HTMLUtils.get(".send-invitation__email");\n            var email = emailInput.value;\n            var messageInput = HTMLUtils_1.HTMLUtils.get(".send-invitation__message-editable");\n            var message = messageInput.innerHTML;\n            var messageErrorMessageElement = HTMLUtils_1.HTMLUtils.get(".send-invitation__error--message");\n            messageErrorMessageElement.classList.add("hidden");\n            var emailErrorMessageElement = HTMLUtils_1.HTMLUtils.get(".send-invitation__error--email");\n            emailErrorMessageElement.classList.add("hidden");\n            if (StringUtils_1.StringUtils.isNotEmpty(email) && StringUtils_1.StringUtils.isNotEmpty(message)) {\n                var formData = new FormData();\n                formData.append("email", email);\n                formData.append("subject", "Quick Hellou - Invitation");\n                formData.append("message", message.trim());\n                formData.append("dateTime", StringUtils_1.StringUtils.EMPTY);\n                formData.append("attachCalendar", StringUtils_1.StringUtils.FALSE);\n                var request_1 = new XMLHttpRequest();\n                request_1.open("POST", "/sendinvitation");\n                request_1.addEventListener("load", function () {\n                    var sendInvitationBodyElement = HTMLUtils_1.HTMLUtils.get(".send-invitation__body");\n                    sendInvitationBodyElement.classList.add("hidden");\n                    var sendInvitationResultElement = HTMLUtils_1.HTMLUtils.get(".send-invitation__result");\n                    sendInvitationResultElement.classList.remove("hidden");\n                    var sendInvitationResultMessageElement = HTMLUtils_1.HTMLUtils.get(".send-invitation__result-message");\n                    sendInvitationResultMessageElement.classList.remove("js-error");\n                    sendInvitationResultMessageElement.innerHTML = request_1.responseText;\n                });\n                request_1.send(formData);\n            }\n            else {\n                if (StringUtils_1.StringUtils.isEmpty(message)) {\n                    messageErrorMessageElement.classList.remove("hidden");\n                }\n                if (StringUtils_1.StringUtils.isEmpty(email) || !StringUtils_1.StringUtils.isEmailValid(email)) {\n                    emailErrorMessageElement.classList.remove("hidden");\n                }\n            }\n        });\n    };\n    return InvitationView;\n}(HtmlComponent_1.HTMLComponent));\nexports.InvitationView = InvitationView;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/InvitationView.ts?')},"./ts/com/quickhellou/LoadingParams.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.LoadingParams = void 0;\nvar Util_1 = __webpack_require__(/*! ./Util */ "./ts/com/quickhellou/Util.ts");\nvar BaseUtils_1 = __webpack_require__(/*! ../genb/base/utils/BaseUtils */ "./ts/com/genb/base/utils/BaseUtils.ts");\n/**\n * Loading params.\n *\n * @export\n * @class LoadingParams\n */\nvar LoadingParams = /** @class */ (function () {\n    function LoadingParams(roomId) {\n        this.errorMessages = new Array();\n        this.warningMessages = new Array();\n        this.suggestedRoomId = Util_1.Util.randomString(9);\n        this.connect = false;\n        this.roomID = roomId;\n    }\n    /**\n     * Loads settings data acquired from local service.\n     *\n     * @param inlineLoadingParams\n     */\n    LoadingParams.prototype.load = function (inlineLoadingParams) {\n        if (BaseUtils_1.BaseUtils.isObjectDefined(inlineLoadingParams)) {\n            this.bypassJoinConfirmation = inlineLoadingParams.bypassJoinConfirmation;\n            this.iceServerRequestUrl = inlineLoadingParams.ice_server_url;\n            this.errorMessages = inlineLoadingParams.error_messages;\n            this.warningMessages = inlineLoadingParams.warning_messages;\n            this.mediaConstraints = inlineLoadingParams.media_constraints;\n            this.offerOptions = inlineLoadingParams.offer_options;\n            this.peerConnectionConfig = inlineLoadingParams.pc_config;\n            this.peerConnectionConstraints = inlineLoadingParams.pc_constraints;\n            this.roomType = inlineLoadingParams.room_type;\n            this.wssPostUrl = inlineLoadingParams.wss_post_url;\n            this.wssUrl = inlineLoadingParams.wss_url;\n            this.hostUrl = inlineLoadingParams.host_url;\n            if (BaseUtils_1.BaseUtils.isObjectDefined(inlineLoadingParams.room_id)) {\n                this.roomID = inlineLoadingParams.room_id;\n            }\n            if (BaseUtils_1.BaseUtils.isObjectDefined(inlineLoadingParams.room_link)) {\n                this.roomLink = inlineLoadingParams.room_link;\n            }\n            if (BaseUtils_1.BaseUtils.isObjectDefined(inlineLoadingParams.additional_param)) {\n                this.additionalParam = inlineLoadingParams.additional_param;\n            }\n        }\n    };\n    return LoadingParams;\n}());\nexports.LoadingParams = LoadingParams;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/LoadingParams.ts?')},"./ts/com/quickhellou/PeerConnectionClient.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PeerConnectionClient = void 0;\nvar SDPUtils_1 = __webpack_require__(/*! ./SDPUtils */ \"./ts/com/quickhellou/SDPUtils.ts\");\nvar PeerConnectionClientEvent_1 = __webpack_require__(/*! ./PeerConnectionClientEvent */ \"./ts/com/quickhellou/PeerConnectionClientEvent.ts\");\nvar BaseUtils_1 = __webpack_require__(/*! ../genb/base/utils/BaseUtils */ \"./ts/com/genb/base/utils/BaseUtils.ts\");\nvar Constants_1 = __webpack_require__(/*! ./Constants */ \"./ts/com/quickhellou/Constants.ts\");\nvar StringUtils_1 = __webpack_require__(/*! ../genb/base/utils/StringUtils */ \"./ts/com/genb/base/utils/StringUtils.ts\");\nvar FormService_1 = __webpack_require__(/*! ../genb/base/services/FormService */ \"./ts/com/genb/base/services/FormService.ts\");\nvar PeerConnectionResponseType_1 = __webpack_require__(/*! ./application/model/PeerConnectionResponseType */ \"./ts/com/quickhellou/application/model/PeerConnectionResponseType.ts\");\nvar Log_1 = __webpack_require__(/*! ../genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\nvar PeerConnectionIdentity_1 = __webpack_require__(/*! ./application/model/PeerConnectionIdentity */ \"./ts/com/quickhellou/application/model/PeerConnectionIdentity.ts\");\nvar StatsMonitor_1 = __webpack_require__(/*! ./application/controller/StatsMonitor */ \"./ts/com/quickhellou/application/controller/StatsMonitor.ts\");\nvar BandwidthLevelUpdateEvent_1 = __webpack_require__(/*! ./application/events/BandwidthLevelUpdateEvent */ \"./ts/com/quickhellou/application/events/BandwidthLevelUpdateEvent.ts\");\nvar BandwidthLevel_1 = __webpack_require__(/*! ./application/model/BandwidthLevel */ \"./ts/com/quickhellou/application/model/BandwidthLevel.ts\");\n/**\n * Peer connection client (WebRTC).\n *\n * @export\n * @class PeerConnectionClient\n * @extends {EventDispatcherService}\n */\nvar PeerConnectionClient = /** @class */ (function (_super) {\n    __extends(PeerConnectionClient, _super);\n    /**\n     * Creates an instance of PeerConnectionClient.\n     *\n     * @param {LoadingParams} params\n     * @param {number} startTime\n     * @memberof PeerConnectionClient\n     */\n    function PeerConnectionClient(params, startTime, session) {\n        var _this = _super.call(this) || this;\n        _this.requireDataConsume = false;\n        _this.params = params;\n        _this.startTime = startTime;\n        _this.identity = new PeerConnectionIdentity_1.PeerConnectionIdentity();\n        _this.session = session;\n        _this.localIceCandidates = [];\n        return _this;\n    }\n    /**\n     * Initializes the client.\n     *\n     * @returns {Promise<void>}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.init = function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            // Create an RTCPeerConnection via the polyfill (adapter.js).\n            // adapter.js is a shim to insulate apps from spec changes and prefix differences.\n            // https://webrtcglossary.com/adapter-js/\n            _this.peerConnection = new RTCPeerConnection(_this.params.peerConnectionConfig, _this.params.peerConnectionConstraints);\n            _this.peerConnection.onicecandidate = function (ev) {\n                _this.onIceCandidate(ev);\n            };\n            _this.peerConnection.ontrack = function (ev) {\n                _this.onRemoteStreamAdded(ev);\n            };\n            _this.peerConnection.onnegotiationneeded = function (event) { return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    this.renegotiate();\n                    return [2 /*return*/];\n                });\n            }); };\n            _this.peerConnection.onsignalingstatechange = function (message) {\n                _this.onSignalingStateChanged();\n            };\n            _this.peerConnection.oniceconnectionstatechange = function (message) {\n                _this.onIceConnectionStateChanged();\n            };\n            _this.peerConnection.onstatsended = function (message) {\n                Log_1.Log.log('message', message);\n            };\n            _this.peerConnection.onicegatheringstatechange = function (ev) {\n                if (_this.peerConnection.iceGatheringState === 'complete') {\n                    _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ICE_GATHERING_COMPLETE, {\n                        session: _this.session,\n                        candidates: _this.localIceCandidates,\n                    });\n                    _this.localIceCandidates = [];\n                }\n            };\n            // is it required?\n            window.dispatchEvent(new CustomEvent('pccreated', {\n                detail: {\n                    pc: _this,\n                    sessionId: _this.params.roomID,\n                    time: new Date(),\n                    userId: _this.params.roomID + (_this.session.isInitiator ? '-0' : '-1'),\n                },\n            }));\n            _this.hasRemoteSdp = false;\n            _this.messageQueue = [];\n            _this.started = false;\n            _this.statsMonitor = new StatsMonitor_1.StatsMonitor(_this.peerConnection);\n            _this.statsMonitor.addEventListener(BandwidthLevelUpdateEvent_1.BandwidthLevelUpdateEvent.OUTBOUND_LEVEL_CHANGE, function (data) {\n                _this.updateOutboundStream(data.level);\n            }, _this);\n            _this.statsMonitor.addEventListener(BandwidthLevelUpdateEvent_1.BandwidthLevelUpdateEvent.INBOUND_LEVEL_CHANGE, function (data) {\n                _this.updateInboundStream(data.level);\n            }, _this);\n            _this.statsMonitor.run();\n            resolve();\n        });\n    };\n    /**\n     * Handles signaling message communication event.\n     *\n     * @public\n     * @param {any} message\n     * @returns {void}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.receiveSignalingMessage = function (messageObj) {\n        // const messageObj: any = Util.parseJSON(message)\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(messageObj)) {\n            Log_1.Log.log('Message object is not defined.');\n            return;\n        }\n        var type = messageObj.type;\n        if ((this.session.isInitiator && PeerConnectionResponseType_1.PeerConnectionResponseType.isAnswer(type)) ||\n            (!this.session.isInitiator && PeerConnectionResponseType_1.PeerConnectionResponseType.isOffer(type))) {\n            this.hasRemoteSdp = true;\n            // Always process offer before candidates.\n            this.messageQueue.unshift(messageObj);\n        }\n        else if (PeerConnectionResponseType_1.PeerConnectionResponseType.isCandidate(type)) {\n            this.messageQueue.push(messageObj);\n        }\n        this.drainMessageQueue();\n    };\n    PeerConnectionClient.prototype.hasActiveRemoteSdp = function () {\n        return this.hasRemoteSdp;\n    };\n    /**\n     * Adds display media track to the RTCPeerConnection client.\n     *\n     * @public\n     * @param {MediaStreamTrack} track\n     * @returns {void}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.addVideoTrack = function (track) {\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\n            Log_1.Log.error('Peer connection is not defined.');\n            return;\n        }\n        Promise.all(this.peerConnection.getSenders().map(function (sender) {\n            if (sender.track.kind === 'video') {\n                try {\n                    var parameters = sender.getParameters();\n                    parameters.degradationPreference = 'maintain-resolution';\n                    sender.setParameters(parameters).then(function () {\n                        sender.replaceTrack(track);\n                    });\n                }\n                catch (e) {\n                    Log_1.Log.warn('Replace track failure.');\n                }\n            }\n        }));\n    };\n    /**\n     * Returns peer connection stats.\n     *\n     * @public\n     * @param {*} callback\n     * @returns {void}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.getPeerConnectionStats = function (track, callback) {\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\n            Log_1.Log.warn('PeerConnectionClient::getPeerConnectionStats No RTCPeerConnection object.');\n            return;\n        }\n        this.peerConnection.getStats(track).then(callback);\n    };\n    /**\n     * Adds a stream to the peer connection to send it to a remote peer.\n     *\n     * @public\n     * @param {MediaStream} stream\n     * @returns {void}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.addStream = function (stream) {\n        var _this = this;\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\n            return null;\n        }\n        stream.getTracks().forEach(function (track) {\n            _this.peerConnection.addTrack(track, stream);\n        });\n    };\n    /**\n     * Returns peer connection states.\n     *\n     * @public\n     * @returns {any}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.getPeerConnectionStates = function () {\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\n            return null;\n        }\n        return {\n            signalingState: this.peerConnection.signalingState,\n            iceGatheringState: this.peerConnection.iceGatheringState,\n            iceConnectionState: this.peerConnection.iceConnectionState,\n        };\n    };\n    /**\n     * Closes peer connection.\n     *\n     * @public\n     * @returns {void}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.close = function () {\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\n            return;\n        }\n        this.peerConnection.close();\n        window.dispatchEvent(new CustomEvent('pcclosed', {\n            detail: {\n                pc: this,\n                time: new Date(),\n            },\n        }));\n        this.peerConnection = null;\n        this.statsMonitor.stop();\n    };\n    /**\n     * Starts signaling as initiator.\n     *\n     * @public\n     * @param {*} offerOptions\n     * @returns {boolean}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.startAsInitiator = function (offerOptions) {\n        var _this = this;\n        Log_1.Log.breakpoint('Start as initiator.');\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\n            Log_1.Log.log('this.peerConnection not defined. return');\n            return false;\n        }\n        if (this.started) {\n            Log_1.Log.log('already started. return');\n            return false;\n        }\n        this.started = true;\n        var constraints = SDPUtils_1.SDPUtils.mergeConstraints(PeerConnectionClient.DEFAULT_SDP_OFFER_OPTIONS, offerOptions);\n        this.peerConnection\n            .createOffer(constraints)\n            .then(function (sessionDescriptionInit) {\n            _this.setLocalSdpAndNotify(sessionDescriptionInit).then(function () {\n                _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.CREATE_OFFER_SUCCESS, _this.session);\n            });\n        })\n            .catch(function (reason) {\n            return _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ERROR, \"ERROR:createOffer => \" + reason);\n        });\n        return true;\n    };\n    /**\n     * Starts signaling when another peer is present.\n     *\n     * @param {any} initialMessages\n     *              SDP and type data\n     * @returns {boolean}\n     *              is process successful\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.startAsReceiver = function (initialMessages) {\n        var _this = this;\n        Log_1.Log.breakpoint('Start as receiver.');\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\n            return false;\n        }\n        if (this.started) {\n            return false;\n        }\n        this.started = true;\n        if (BaseUtils_1.BaseUtils.isObjectDefined(initialMessages) &&\n            initialMessages.length > 0) {\n            // Convert received messages to JSON objects and add them to the message\n            // queue.\n            initialMessages.forEach(function (message) {\n                Log_1.Log.log('proceed with initial message', message);\n                _this.receiveSignalingMessage(message);\n            });\n            return true;\n        }\n        // We may have queued messages received from the signaling channel before\n        // started.\n        if (this.messageQueue.length > 0) {\n            Log_1.Log.log('*** have already queued messages so drain them ***');\n            this.drainMessageQueue();\n        }\n        else {\n            Log_1.Log.log('*** requires remote data to consume ***');\n            this.requireDataConsume = true;\n            return false;\n        }\n        return true;\n    };\n    PeerConnectionClient.prototype.getSessionId = function () {\n        return this.session.id;\n    };\n    /**\n     * Gets the session.\n     *\n     * @returns {RtcSession}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.getSession = function () {\n        return this.session;\n    };\n    /**\n     * Sets the session.\n     *\n     * @public\n     * @param {RtcSession} session\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.setSession = function (session) {\n        this.session = session;\n    };\n    /**\n     * Returns true if send message using memorystore channel.\n     *\n     * @public\n     * @returns {boolean}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.ifSendAsPyMessage = function () {\n        if (!this.session.isInitiator) {\n            return false;\n        }\n        if (StringUtils_1.StringUtils.isNotEmpty(this.session.otherClientId)) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Gets identity token.\n     *\n     * @public\n     * @returns {string}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.getId = function () {\n        return this.session.id;\n    };\n    /**\n     * Changes connection bandwidth.\n     *\n     * @param {string} bandwidth\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.changeBandwidth = function (bandwidth) {\n        var sender = this.peerConnection.getSenders()[0];\n        var parameters = sender.getParameters();\n        if (!parameters.encodings) {\n            parameters.encodings = [{ rid: StringUtils_1.StringUtils.EMPTY }];\n        }\n        if (bandwidth === 'unlimited' &&\n            parameters.encodings[0].maxBitrate !== undefined) {\n            delete parameters.encodings[0].maxBitrate;\n        }\n        else {\n            ;\n            parameters.encodings[0].degradationPreference =\n                'maintain-resolution';\n            parameters.encodings[0].maxBitrate = Number(bandwidth) * 1000;\n            parameters.encodings[0].scaleResolutionDownBy = 8;\n        }\n        parameters.degradationPreference = 'maintain-resolution';\n        sender\n            .setParameters(parameters)\n            .catch(function (reason) { return Log_1.Log.error('error', reason); });\n    };\n    PeerConnectionClient.prototype.onRemoteIceComplete = function (candidateMessages) {\n        Log_1.Log.log('state', this.peerConnection.connectionState);\n        Log_1.Log.log('candidates', candidateMessages);\n    };\n    /**\n     * Updates outbound stream with a new bitrate level.\n     *\n     * @private\n     * @param {string} level\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.updateOutboundStream = function (level) {\n        this.changeBandwidth(BandwidthLevel_1.BandwidthLevel.getBitrate(level));\n    };\n    PeerConnectionClient.prototype.updateInboundStream = function (level) {\n        this.changeBandwidth(BandwidthLevel_1.BandwidthLevel.getBitrate(level));\n        return;\n    };\n    /**\n     * Renegotiates session.\n     * Note: No need to handle this unless using EdgeHTML browser.\n     *\n     * @private\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.renegotiate = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                Log_1.Log.log('Negotiation needed.');\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Sets remote SDP.\n     *\n     * @private\n     * @param {*} message\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.setRemoteSdp = function (message) {\n        var _this = this;\n        message.sdp = SDPUtils_1.SDPUtils.maybeSetOpusOptions(message.sdp, this.params);\n        message.sdp = SDPUtils_1.SDPUtils.maybePreferAudioSendCodec(message.sdp, this.params);\n        message.sdp = SDPUtils_1.SDPUtils.maybePreferVideoSendCodec(message.sdp, this.params);\n        message.sdp = SDPUtils_1.SDPUtils.maybeSetAudioSendBitRate(message.sdp, this.params);\n        message.sdp = SDPUtils_1.SDPUtils.maybeSetVideoSendBitRate(message.sdp, this.params);\n        message.sdp = SDPUtils_1.SDPUtils.maybeSetVideoSendInitialBitRate(message.sdp, this.params);\n        message.sdp = SDPUtils_1.SDPUtils.maybeRemoveVideoFec(message.sdp, this.params);\n        this.peerConnection\n            .setRemoteDescription(new RTCSessionDescription(message))\n            .then(function () {\n            _this.onSetRemoteDescriptionSuccess();\n        })\n            .catch(function (reason) {\n            _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ERROR, 'setRemoteDescription');\n        });\n    };\n    /**\n     * Handles remote session description setting success.\n     *\n     * @private\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.onSetRemoteDescriptionSuccess = function () {\n        // By now all onaddstream events for the setRemoteDescription have fired,\n        // so we can know if the peer has any remote video streams that we need\n        // to wait for. Otherwise, transition immediately to the active state.\n        var remoteStreams = this.getRemoteStreams();\n        var isRemoteStreamAvailable = remoteStreams.length > 0;\n        var isRemoteVideoPlaybackAvailableParam = isRemoteStreamAvailable && remoteStreams[0].getVideoTracks().length > 0;\n        var isRemoteDisplayMediaAvailableParam = isRemoteStreamAvailable && remoteStreams[0].getVideoTracks().length > 1;\n        this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.REMOTE_SDP_PROTOCOL_RECEIVED, {\n            isRemoteDisplayMediaAvailable: isRemoteDisplayMediaAvailableParam,\n            isRemoteVideoPlaybackAvailable: isRemoteVideoPlaybackAvailableParam,\n            sessionId: this.session.id,\n        });\n        Log_1.Log.log('Remote session description setting complete.');\n    };\n    /**\n     * Processes signaling message.\n     *\n     * @private\n     * @param {*} message\n     * @returns {Promise<any>}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.processSignalingMessage = function (message) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            Log_1.Log.info('====> processSignalingMessage', message);\n            // if is receiver and get an offer\n            if (message.type === PeerConnectionResponseType_1.PeerConnectionResponseType.OFFER &&\n                !_this.session.isInitiator) {\n                if (_this.peerConnection.signalingState !== 'stable') {\n                    Log_1.Log.warn(\"Remote offer received in unexpected state:\\n           \" + _this.peerConnection.signalingState);\n                    resolve();\n                    return;\n                }\n                _this.setRemoteSdp(message);\n                _this.doAnswer();\n                resolve();\n                return;\n            }\n            // if is initiator and get an answer\n            if (message.type === PeerConnectionResponseType_1.PeerConnectionResponseType.ANSWER &&\n                _this.session.isInitiator) {\n                if (_this.peerConnection.signalingState !== 'have-local-offer') {\n                    Log_1.Log.warn(\"Remote answer received in unexpected state:\\n          \" + _this.peerConnection.signalingState);\n                    resolve();\n                    return;\n                }\n                _this.setRemoteSdp(message);\n                resolve();\n                return;\n            }\n            if (message.type === 'candidate') {\n                var candidate = new RTCIceCandidate({\n                    candidate: message.candidate,\n                    sdpMLineIndex: message.label,\n                });\n                Log_1.Log.fatal('Remote ICE candidate');\n                _this.recordIceCandidate('Remote', candidate);\n                _this.peerConnection\n                    .addIceCandidate(candidate)\n                    .then(function () {\n                    Log_1.Log.log('Remote candidate added successfully.');\n                })\n                    .catch(function (reason) {\n                    _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ERROR, \"ERROR:addIceCandidate => \" + reason);\n                });\n                resolve();\n                return;\n            }\n            Log_1.Log.warn('Unexpected message: ' + JSON.stringify(message));\n            reject(JSON.stringify(message));\n        });\n    };\n    /**\n     * When we receive messages from PyApp registration and from the WSS connection,\n     * we add them to a queue and drain it if conditions are right.\n     *\n     * @private\n     * @returns {void}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.drainMessageQueue = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        Log_1.Log.info('drainMessageQueue', this.started, this.hasRemoteSdp);\n                        // It's possible that we finish registering and receiving messages from WSS\n                        // before our peer connection is created or started. We need to wait for the\n                        // peer connection to be created and started before processing messages.\n                        //\n                        // Also, the order of messages is in general not the same as the POST order\n                        // from the other client because the POSTs are async and the server may handle\n                        // some requests faster than others. We need to process offer before\n                        // candidates so we wait for the offer to arrive first if we're answering.\n                        // Offers are added to the front of the queue.\n                        if (!this.peerConnection || !this.started || !this.hasRemoteSdp) {\n                            return [2 /*return*/];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        if (!(this.messageQueue.length > 0)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.processSignalingMessage(this.messageQueue.shift())];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 1];\n                    case 3:\n                        this.requireDataConsume = false;\n                        this.messageQueue = [];\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Sends an answer to a remote peer.\n     *\n     * @private\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.doAnswer = function () {\n        var _this = this;\n        this.peerConnection\n            .createAnswer()\n            .then(function (sessionDescription) {\n            _this.setLocalSdpAndNotify(sessionDescription).then(function () {\n                _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.CREATE_ANSWER_SUCCESS, _this.session);\n            });\n        })\n            .catch(function (reason) {\n            _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ERROR, \"ERROR:createAnswer => \" + reason);\n        });\n    };\n    /**\n     * Sets local session description protocol (SDP) and sends notification\n     * to the RTC server.\n     * SDP is used by WebRTC to negotiate the session’s parameters.\n     * https://webrtcglossary.com/sdp/\n     *\n     * @private\n     * @param {RTCSessionDescriptionInit} sessionDescriptionInit\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.setLocalSdpAndNotify = function (sessionDescriptionInit) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            sessionDescriptionInit.sdp = SDPUtils_1.SDPUtils.maybePreferAudioReceiveCodec(sessionDescriptionInit.sdp, _this.params);\n            sessionDescriptionInit.sdp = SDPUtils_1.SDPUtils.maybePreferVideoReceiveCodec(sessionDescriptionInit.sdp, _this.params);\n            sessionDescriptionInit.sdp = SDPUtils_1.SDPUtils.maybeSetAudioReceiveBitRate(sessionDescriptionInit.sdp, _this.params);\n            sessionDescriptionInit.sdp = SDPUtils_1.SDPUtils.maybeSetVideoReceiveBitRate(sessionDescriptionInit.sdp, _this.params);\n            sessionDescriptionInit.sdp = SDPUtils_1.SDPUtils.maybeRemoveVideoFec(sessionDescriptionInit.sdp, _this.params);\n            if (!SDPUtils_1.SDPUtils.isSendRecv(sessionDescriptionInit.sdp)) {\n                Log_1.Log.warn('No local stream is added to the peer connection.');\n            }\n            else {\n                _this.identity.localSessionId = SDPUtils_1.SDPUtils.getMsid(sessionDescriptionInit.sdp).replace(/\\{|\\}/g, '');\n            }\n            _this.peerConnection\n                .setLocalDescription(sessionDescriptionInit)\n                .then(function () {\n                Log_1.Log.log('PeerConnectionClient::setLocalSdpAndNotify Set session description success.');\n            })\n                .catch(function (reason) {\n                _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ERROR, \"ERROR::setLocalDescription => \" + reason);\n            });\n            // Chrome version of RTCSessionDescription can't be serialized directly\n            // because it JSON.stringify won't include attributes which are on the\n            // object's prototype chain. By creating the message to serialize\n            // explicitly we can avoid the issue.\n            _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.SIGNALING_MESSAGE, {\n                sdp: sessionDescriptionInit.sdp,\n                type: sessionDescriptionInit.type,\n                sessionId: _this.session.id,\n            });\n            resolve();\n        });\n    };\n    /**\n     * Records ICE candidate in applicaton controller.\n     *\n     * @private\n     * @param {string} location\n     * @param {RTCIceCandidate} candidate\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.recordIceCandidate = function (locationParameter, candidate) {\n        this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.NEW_ICE_CANDIDATE, {\n            candidate: candidate.candidate,\n            location: locationParameter,\n        });\n        if (locationParameter === 'Local') {\n            this.localIceCandidates.push(candidate);\n        }\n    };\n    /**\n     * Handles signaling state change.\n     *\n     * @private\n     * @returns {void}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.onSignalingStateChanged = function () {\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\n            return;\n        }\n        Log_1.Log.log('PeerConnectionClient::onSignalingStateChanged Signaling state changed to: ' +\n            this.peerConnection.signalingState);\n        this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.SIGNALING_STATE_CHANGE);\n    };\n    /**\n     * Handles ICE connection state change.\n     *\n     * @private\n     * @returns {void}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.onIceConnectionStateChanged = function () {\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\n            return;\n        }\n        Log_1.Log.log('PeerConnectionClient::onSignalingStateChanged ICE connection state changed to: ' +\n            this.peerConnection.iceConnectionState);\n        if (StringUtils_1.StringUtils.equals(this.peerConnection.iceConnectionState, 'completed')) {\n            Log_1.Log.log('ICE complete time: ' +\n                (window.performance.now() - this.startTime).toFixed(0) +\n                'ms.');\n        }\n        this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ICE_CONNECTION_STATE_CHANGE);\n    };\n    /**\n     * Handles ICE candicate offer.\n     *\n     * @private\n     * @param {RTCPeerConnectionIceEvent} event\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.onIceCandidate = function (event) {\n        if (event.candidate) {\n            // Drop undesired candidates.\n            if (this.filterIceCandidate(event.candidate)) {\n                var message = {\n                    type: 'candidate',\n                    label: event.candidate.sdpMLineIndex,\n                    id: event.candidate.sdpMid,\n                    candidate: event.candidate.candidate,\n                    sessionId: this.session.id,\n                };\n                Log_1.Log.breakpoint('Local ICE candidate');\n                this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.SIGNALING_MESSAGE, message);\n                this.recordIceCandidate('Local', event.candidate);\n            }\n        }\n        else {\n            Log_1.Log.log('End of candidates.');\n        }\n    };\n    /**\n     * Checks if candidate should be dropped.\n     *\n     * @private\n     * @param {RTCIceCandidate} candidate\n     * @returns {boolean}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.filterIceCandidate = function (candidate) {\n        var candidateStr = candidate.candidate;\n        // Always drop TCP candidates. Not needed in this context.\n        if (candidateStr.indexOf(Constants_1.Constants.TCP) !== -1) {\n            return false;\n        }\n        // If we're trying to drop non-relay candidates, do that.\n        if (StringUtils_1.StringUtils.equals(this.params.peerConnectionConfig.iceTransports, Constants_1.Constants.RELAY) &&\n            !StringUtils_1.StringUtils.equals(SDPUtils_1.SDPUtils.iceCandidateType(candidateStr), Constants_1.Constants.RELAY)) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Handles remote stream added.\n     *\n     * @private\n     * @param {RTCTrackEvent} event\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.onRemoteStreamAdded = function (event) {\n        Log_1.Log.log('onRemoteStreamAdded', event);\n        if (!event || event.type !== 'track') {\n            Log_1.Log.log('onRemoteStreamAdded return ');\n            return;\n        }\n        var mediaStream = event.streams[0];\n        Log_1.Log.log('onRemoteStreamAdded pass ', this.session.id, mediaStream);\n        this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.REMOTE_STREAM_ADDED, {\n            sessionId: this.session.id,\n            stream: mediaStream,\n        });\n    };\n    /**\n     * Returns newly generated stream with remote tracks attached.\n     *\n     * @private\n     * @returns {MediaStream[]}\n     * @memberof PeerConnectionClient\n     */\n    PeerConnectionClient.prototype.getRemoteStreams = function () {\n        var stream = new MediaStream();\n        this.peerConnection.getReceivers().forEach(function (receiver) {\n            stream.addTrack(receiver.track);\n        });\n        stream.onremovetrack = function () {\n            Log_1.Log.log('Track removed.');\n        };\n        return [stream];\n    };\n    PeerConnectionClient.DEFAULT_SDP_OFFER_OPTIONS = {\n        offerToReceiveAudio: 1,\n        offerToReceiveVideo: 1,\n        voiceActivityDetection: false,\n    };\n    return PeerConnectionClient;\n}(FormService_1.FormService));\nexports.PeerConnectionClient = PeerConnectionClient;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/PeerConnectionClient.ts?")},"./ts/com/quickhellou/PeerConnectionClientEvent.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.PeerConnectionClientEvent = void 0;\nvar PeerConnectionClientEvent = /** @class */ (function () {\n    function PeerConnectionClientEvent() {\n    }\n    PeerConnectionClientEvent.REMOTE_SDP_PROTOCOL_RECEIVED = "remote_sdp_protocol_received";\n    PeerConnectionClientEvent.PY_MESSAGE = "gae_message";\n    PeerConnectionClientEvent.SIGNALING_MESSAGE = "signaling_message";\n    PeerConnectionClientEvent.REMOTE_HANGUP = "remote_hangup";\n    PeerConnectionClientEvent.REMOTE_TEXT_CHAT_MESSAGE = "remote_text_chat_message";\n    PeerConnectionClientEvent.SIGNALING_STATE_CHANGE = "signaling_state_change";\n    PeerConnectionClientEvent.ICE_GATHERING_COMPLETE = "ice_gathering_complete";\n    PeerConnectionClientEvent.NEW_ICE_CANDIDATE = "new_ice_candidate";\n    PeerConnectionClientEvent.ICE_CONNECTION_STATE_CHANGE = "ice_connection_state_change";\n    PeerConnectionClientEvent.REMOTE_STREAM_ADDED = "remote_stream_added";\n    PeerConnectionClientEvent.REGISTERED = "registered";\n    PeerConnectionClientEvent.CREATE_OFFER_SUCCESS = "create_offer_success";\n    PeerConnectionClientEvent.CREATE_ANSWER_SUCCESS = "create_answer_success";\n    PeerConnectionClientEvent.REMOTE_CLIENT_REGISTERED = "remote_client_registered";\n    PeerConnectionClientEvent.ERROR = "error";\n    return PeerConnectionClientEvent;\n}());\nexports.PeerConnectionClientEvent = PeerConnectionClientEvent;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/PeerConnectionClientEvent.ts?')},"./ts/com/quickhellou/RoomSelection.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.RoomSelection = void 0;\nvar HTMLUtils_1 = __webpack_require__(/*! ../genb/base/utils/HTMLUtils */ "./ts/com/genb/base/utils/HTMLUtils.ts");\nvar EventDispatcherService_1 = __webpack_require__(/*! ../genb/base/services/EventDispatcherService */ "./ts/com/genb/base/services/EventDispatcherService.ts");\nvar RoomSelectionEvent_1 = __webpack_require__(/*! ./RoomSelectionEvent */ "./ts/com/quickhellou/RoomSelectionEvent.ts");\nvar Util_1 = __webpack_require__(/*! ./Util */ "./ts/com/quickhellou/Util.ts");\nvar RoomSelection = /** @class */ (function (_super) {\n    __extends(RoomSelection, _super);\n    /**\n     * Creates an instance of RoomSelection.\n     *\n     * @param {string} roomType\n     * @memberof RoomSelection\n     */\n    function RoomSelection(roomType) {\n        var _this = _super.call(this) || this;\n        _this.roomType = roomType;\n        _this.roomID = Util_1.Util.randomString(9);\n        _this.attachButtonEvents();\n        return _this;\n    }\n    RoomSelection.prototype.attachButtonEvents = function () {\n        this.attachJoinButtonsEvents();\n        this.attachSchedulerButtonsEvents();\n    };\n    RoomSelection.prototype.attachJoinButtonsEvents = function () {\n        var _this = this;\n        var joinButtons = HTMLUtils_1.HTMLUtils.array(\'.button--quick-talk\');\n        joinButtons.forEach(function (joinButton) {\n            joinButton.addEventListener(\'click\', function () {\n                _this.onJoinButton();\n            }, false);\n        });\n    };\n    RoomSelection.prototype.attachSchedulerButtonsEvents = function () {\n        var _this = this;\n        var schedulerButtons = HTMLUtils_1.HTMLUtils.array(\'.button--scheduler\');\n        schedulerButtons.forEach(function (schedulerButton) {\n            schedulerButton.addEventListener(\'click\', function () {\n                _this.onSchedulerButton();\n            }, false);\n        });\n    };\n    RoomSelection.matchRandomRoomPattern = function (roomID) {\n        return roomID.match(/^\\d{9}$/) !== null;\n    };\n    RoomSelection.prototype.removeEventListeners = function () { };\n    RoomSelection.prototype.onJoinButton = function () {\n        this.dispatchEvent(RoomSelectionEvent_1.RoomSelectionEvent.ROOM_SELECTED, {\n            roomID: this.roomID,\n        });\n    };\n    RoomSelection.prototype.onSchedulerButton = function () {\n        this.dispatchEvent(RoomSelectionEvent_1.RoomSelectionEvent.SCHEDULER_SELECTED, {\n            roomID: this.roomID,\n        });\n    };\n    return RoomSelection;\n}(EventDispatcherService_1.EventDispatcherService));\nexports.RoomSelection = RoomSelection;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/RoomSelection.ts?')},"./ts/com/quickhellou/RoomSelectionEvent.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.RoomSelectionEvent = void 0;\nvar RoomSelectionEvent = /** @class */ (function () {\n    function RoomSelectionEvent() {\n    }\n    RoomSelectionEvent.ROOM_SELECTED = "room_selected";\n    RoomSelectionEvent.SCHEDULER_SELECTED = "scheduler_selected";\n    return RoomSelectionEvent;\n}());\nexports.RoomSelectionEvent = RoomSelectionEvent;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/RoomSelectionEvent.ts?')},"./ts/com/quickhellou/RoomSelectionUIConstants.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.RoomSelectionUIConstants = void 0;\nvar RoomSelectionUIConstants = /** @class */ (function () {\n    function RoomSelectionUIConstants() {\n        this.div = ".room-selection";\n        this.joinButton = ".join-button";\n        this.joinCircle = ".button--quick-talk";\n    }\n    return RoomSelectionUIConstants;\n}());\nexports.RoomSelectionUIConstants = RoomSelectionUIConstants;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/RoomSelectionUIConstants.ts?')},"./ts/com/quickhellou/SDPUtils.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.SDPUtils = void 0;\nvar Log_1 = __webpack_require__(/*! ../genb/base/utils/Log */ "./ts/com/genb/base/utils/Log.ts");\nvar StringUtils_1 = __webpack_require__(/*! ../genb/base/utils/StringUtils */ "./ts/com/genb/base/utils/StringUtils.ts");\n/**\n * Session Description Protocol utils.\n *\n * @export\n * @class SDPUtils\n */\nvar SDPUtils = /** @class */ (function () {\n    function SDPUtils() {\n    }\n    /**\n     * Merges options contstraints.\n     *\n     * @static\n     * @param {*} cons1\n     * @param {*} cons2\n     * @returns\n     * @memberof SDPUtils\n     */\n    SDPUtils.mergeConstraints = function (cons1, cons2) {\n        if (!cons1 || !cons2) {\n            return cons1 || cons2;\n        }\n        var merged = cons1;\n        for (var _i = 0, _a = Object.keys(cons2); _i < _a.length; _i++) {\n            var key = _a[_i];\n            merged[key] = cons2[key];\n        }\n        return merged;\n    };\n    /**\n     * Gets ICE candidate string.\n     *\n     * @static\n     * @param {string} candidateStr\n     * @returns\n     * @memberof SDPUtils\n     */\n    SDPUtils.iceCandidateType = function (candidateStr) {\n        return candidateStr.split(" ")[7];\n    };\n    SDPUtils.maybeSetOpusOptions = function (sdp, params) {\n        // Set Opus in Stereo, if stereo is true, unset it, if stereo is false, and\n        // do nothing if otherwise.\n        if (params.opusStereo === "true") {\n            sdp = this.setCodecParam(sdp, "opus/48000", "stereo", "1");\n        }\n        else if (params.opusStereo === "false") {\n            sdp = this.removeCodecParam(sdp, "opus/48000", "stereo");\n        }\n        // Set Opus FEC, if opusfec is true, unset it, if opusfec is false, and\n        // do nothing if otherwise.\n        if (params.opusFec === "true") {\n            sdp = this.setCodecParam(sdp, "opus/48000", "useinbandfec", "1");\n        }\n        else if (params.opusFec === "false") {\n            sdp = this.removeCodecParam(sdp, "opus/48000", "useinbandfec");\n        }\n        // Set Opus DTX, if opusdtx is true, unset it, if opusdtx is false, and\n        // do nothing if otherwise.\n        if (params.opusDtx === "true") {\n            sdp = this.setCodecParam(sdp, "opus/48000", "usedtx", "1");\n        }\n        else if (params.opusDtx === "false") {\n            sdp = this.removeCodecParam(sdp, "opus/48000", "usedtx");\n        }\n        // Set Opus maxplaybackrate, if requested.\n        if (params.opusMaxPbr) {\n            sdp = this.setCodecParam(sdp, "opus/48000", "maxplaybackrate", params.opusMaxPbr);\n        }\n        return sdp;\n    };\n    SDPUtils.maybeSetAudioSendBitRate = function (sdp, params) {\n        if (!params.audioSendBitrate) {\n            return sdp;\n        }\n        Log_1.Log.log("Prefer audio send bitrate: " + params.audioSendBitrate);\n        return this.preferBitRate(sdp, params.audioSendBitrate, "audio");\n    };\n    SDPUtils.maybeSetAudioReceiveBitRate = function (sdp, params) {\n        if (!params.audioRecvBitrate) {\n            return sdp;\n        }\n        Log_1.Log.log("Prefer audio receive bitrate: " + params.audioRecvBitrate);\n        return this.preferBitRate(sdp, params.audioRecvBitrate, "audio");\n    };\n    SDPUtils.maybeSetVideoSendBitRate = function (sdp, params) {\n        if (!params.videoSendBitrate) {\n            return sdp;\n        }\n        Log_1.Log.log("Prefer video send bitrate: " + params.videoSendBitrate);\n        return this.preferBitRate(sdp, params.videoSendBitrate, "video");\n    };\n    SDPUtils.maybeSetVideoReceiveBitRate = function (sdp, params) {\n        if (!params.videoRecvBitrate) {\n            return sdp;\n        }\n        Log_1.Log.log("Prefer video receive bitrate: " + params.videoRecvBitrate);\n        return this.preferBitRate(sdp, params.videoRecvBitrate, "video");\n    };\n    // Add a b=AS:bitrate line to the m=mediaType section.\n    SDPUtils.preferBitRate = function (sdp, bitrate, mediaType) {\n        var sdpLines = sdp.split("\\r\\n");\n        // Find m line for the given mediaType.\n        var mLineIndex = this.findLine(sdpLines, "m=", mediaType);\n        if (mLineIndex === null) {\n            Log_1.Log.log("Failed to add bandwidth line to sdp, as no m-line found");\n            return sdp;\n        }\n        // Find next m-line if any.\n        var nextMLineIndex = this.findLineInRange(sdpLines, mLineIndex + 1, -1, "m=");\n        if (nextMLineIndex === null) {\n            nextMLineIndex = sdpLines.length;\n        }\n        // Find c-line corresponding to the m-line.\n        var cLineIndex = this.findLineInRange(sdpLines, mLineIndex + 1, nextMLineIndex, "c=");\n        if (cLineIndex === null) {\n            Log_1.Log.log("Failed to add bandwidth line to sdp, as no c-line found");\n            return sdp;\n        }\n        // Check if bandwidth line already exists between c-line and next m-line.\n        var bLineIndex = this.findLineInRange(sdpLines, cLineIndex + 1, nextMLineIndex, "b=AS");\n        if (bLineIndex) {\n            sdpLines.splice(bLineIndex, 1);\n        }\n        // Create the b (bandwidth) sdp line.\n        var bwLine = "b=AS:" + bitrate;\n        // As per RFC 4566, the b line should follow after c-line.\n        sdpLines.splice(cLineIndex + 1, 0, bwLine);\n        sdp = sdpLines.join("\\r\\n");\n        return sdp;\n    };\n    // Add an a=fmtp: x-google-min-bitrate=kbps line, if videoSendInitialBitrate\n    // is specified. We\'ll also add a x-google-min-bitrate value, since the max\n    // must be >= the min.\n    SDPUtils.maybeSetVideoSendInitialBitRate = function (sdp, params) {\n        var initialBitrate = Number(params.videoSendInitialBitrate);\n        if (!initialBitrate) {\n            return sdp;\n        }\n        // Validate the initial bitrate value.\n        var maxBitrate = initialBitrate;\n        var bitrate = Number(params.videoSendBitrate);\n        if (bitrate) {\n            if (initialBitrate > bitrate) {\n                Log_1.Log.log("Clamping initial bitrate to max bitrate of " + bitrate + " kbps.");\n                initialBitrate = bitrate;\n                params.videoSendInitialBitrate = initialBitrate;\n            }\n            maxBitrate = bitrate;\n        }\n        var sdpLines = sdp.split("\\r\\n");\n        // Search for m line.\n        var mLineIndex = this.findLine(sdpLines, "m=", "video");\n        if (mLineIndex === null) {\n            Log_1.Log.log("Failed to find video m-line");\n            return sdp;\n        }\n        // Figure out the first codec payload type on the m=video SDP line.\n        var videoMLine = sdpLines[mLineIndex];\n        var pattern = new RegExp("m=video\\\\s\\\\d+\\\\s[A-Z/]+\\\\s");\n        var sendPayloadType = videoMLine.split(pattern)[1].split(" ")[0];\n        var fmtpLine = sdpLines[this.findLine(sdpLines, "a=rtpmap", sendPayloadType)];\n        var codecName = fmtpLine\n            .split("a=rtpmap:" + sendPayloadType)[1]\n            .split("/")[0];\n        // Use codec from params if specified via URL param, otherwise use from SDP.\n        var codec = params.videoSendCodec || codecName;\n        sdp = this.setCodecParam(sdp, codec, "x-google-min-bitrate", params.videoSendInitialBitrate.toString());\n        sdp = this.setCodecParam(sdp, codec, "x-google-max-bitrate", maxBitrate.toString());\n        return sdp;\n    };\n    SDPUtils.removePayloadTypeFromMline = function (mLine, payloadType) {\n        mLine = mLine.split(" ");\n        for (var i = 0; i < mLine.length; ++i) {\n            if (mLine[i] === payloadType.toString()) {\n                mLine.splice(i, 1);\n            }\n        }\n        return mLine.join(" ");\n    };\n    SDPUtils.getMsid = function (sdp) {\n        var sdpLines = sdp.split("\\r\\n");\n        var index = this.findLine(sdpLines, "a=msid:");\n        if (index === null) {\n            return StringUtils_1.StringUtils.EMPTY;\n        }\n        var sdpLine = sdpLines[index];\n        return sdpLine\n            .match(new RegExp("a=msid:[a-z0-9A-Z{}-]+"))[0]\n            .replace(/a=msid:/, "");\n    };\n    /**\n     * Checks if protocol allows sending and receiving signal.\n     *\n     * @static\n     * @param {*} sdp\n     * @returns {boolean}\n     * @memberof SDPUtils\n     */\n    SDPUtils.isSendRecv = function (sdp) {\n        var sdpLines = sdp.split("\\r\\n");\n        var index = this.findLine(sdpLines, "a=sendrecv");\n        if (index === null) {\n            return false;\n        }\n        return true;\n    };\n    SDPUtils.removeCodecByName = function (sdpLines, codec) {\n        var index = this.findLine(sdpLines, "a=rtpmap", codec);\n        if (index === null) {\n            return sdpLines;\n        }\n        var payloadType = this.getCodecPayloadTypeFromLine(sdpLines[index]);\n        sdpLines.splice(index, 1);\n        // Search for the video m= line and remove the codec.\n        var mLineIndex = this.findLine(sdpLines, "m=", "video");\n        if (mLineIndex === null) {\n            return sdpLines;\n        }\n        sdpLines[mLineIndex] = this.removePayloadTypeFromMline(sdpLines[mLineIndex], payloadType);\n        return sdpLines;\n    };\n    SDPUtils.removeCodecByPayloadType = function (sdpLines, payloadType) {\n        var index = this.findLine(sdpLines, "a=rtpmap", payloadType.toString());\n        if (index === null) {\n            return sdpLines;\n        }\n        sdpLines.splice(index, 1);\n        // Search for the video m= line and remove the codec.\n        var mLineIndex = this.findLine(sdpLines, "m=", "video");\n        if (mLineIndex === null) {\n            return sdpLines;\n        }\n        sdpLines[mLineIndex] = this.removePayloadTypeFromMline(sdpLines[mLineIndex], payloadType);\n        return sdpLines;\n    };\n    SDPUtils.maybeRemoveVideoFec = function (sdp, params) {\n        if (params.videoFec !== "false") {\n            return sdp;\n        }\n        var sdpLines = sdp.split("\\r\\n");\n        var index = this.findLine(sdpLines, "a=rtpmap", "red");\n        if (index === null) {\n            return sdp;\n        }\n        var redPayloadType = this.getCodecPayloadTypeFromLine(sdpLines[index]);\n        sdpLines = this.removeCodecByPayloadType(sdpLines, redPayloadType);\n        sdpLines = this.removeCodecByName(sdpLines, "ulpfec");\n        // Remove fmtp lines associated with red codec.\n        index = this.findLine(sdpLines, "a=fmtp", redPayloadType.toString());\n        if (index === null) {\n            return sdp;\n        }\n        var fmtpLine = this.parseFmtpLine(sdpLines[index]);\n        var rtxPayloadType = fmtpLine.pt;\n        if (rtxPayloadType === null) {\n            return sdp;\n        }\n        sdpLines.splice(index, 1);\n        sdpLines = this.removeCodecByPayloadType(sdpLines, rtxPayloadType);\n        return sdpLines.join("\\r\\n");\n    };\n    // Promotes |audioSendCodec| to be the first in the m=audio line, if set.\n    SDPUtils.maybePreferAudioSendCodec = function (sdp, params) {\n        return this.maybePreferCodec(sdp, "audio", "send", params.audioSendCodec);\n    };\n    // Promotes |audioRecvCodec| to be the first in the m=audio line, if set.\n    SDPUtils.maybePreferAudioReceiveCodec = function (sdp, params) {\n        return this.maybePreferCodec(sdp, "audio", "receive", params.audioRecvCodec);\n    };\n    // Promotes |videoSendCodec| to be the first in the m=audio line, if set.\n    SDPUtils.maybePreferVideoSendCodec = function (sdp, params) {\n        return this.maybePreferCodec(sdp, "video", "send", params.videoSendCodec);\n    };\n    // Promotes |videoRecvCodec| to be the first in the m=audio line, if set.\n    SDPUtils.maybePreferVideoReceiveCodec = function (sdp, params) {\n        return this.maybePreferCodec(sdp, "video", "receive", params.videoRecvCodec);\n    };\n    // Sets |codec| as the default |type| codec if it\'s present.\n    // The format of |codec| is \'NAME/RATE\', e.g. \'opus/48000\'.\n    SDPUtils.maybePreferCodec = function (sdp, type, dir, codec) {\n        var str = type + " " + dir + " codec";\n        if (!codec) {\n            Log_1.Log.log("No preference on " + str + ".");\n            return sdp;\n        }\n        Log_1.Log.log("Prefer " + str + ": " + codec);\n        var sdpLines = sdp.split("\\r\\n");\n        // Search for m line.\n        var mLineIndex = this.findLine(sdpLines, "m=", type);\n        if (mLineIndex === null) {\n            return sdp;\n        }\n        // If the codec is available, set it as the default in m line.\n        var payload = this.getCodecPayloadType(sdpLines, codec);\n        if (payload) {\n            sdpLines[mLineIndex] = this.setDefaultCodec(sdpLines[mLineIndex], payload);\n        }\n        sdp = sdpLines.join("\\r\\n");\n        return sdp;\n    };\n    // Set fmtp param to specific codec in SDP. If param does not exists, add it.\n    SDPUtils.setCodecParam = function (sdp, codec, param, value) {\n        var sdpLines = sdp.split("\\r\\n");\n        var fmtpLineIndex = this.findFmtpLine(sdpLines, codec);\n        var fmtpObj = {};\n        if (fmtpLineIndex === null) {\n            var index = this.findLine(sdpLines, "a=rtpmap", codec);\n            if (index === null) {\n                return sdp;\n            }\n            var payload = this.getCodecPayloadTypeFromLine(sdpLines[index]);\n            fmtpObj.pt = payload.toString();\n            fmtpObj.params = {};\n            fmtpObj.params[param] = value;\n            sdpLines.splice(index + 1, 0, this.writeFmtpLine(fmtpObj));\n        }\n        else {\n            fmtpObj = this.parseFmtpLine(sdpLines[fmtpLineIndex]);\n            fmtpObj.params[param] = value;\n            sdpLines[fmtpLineIndex] = this.writeFmtpLine(fmtpObj);\n        }\n        sdp = sdpLines.join("\\r\\n");\n        return sdp;\n    };\n    // Remove fmtp param if it exists.\n    SDPUtils.removeCodecParam = function (sdp, codec, param) {\n        var sdpLines = sdp.split("\\r\\n");\n        var fmtpLineIndex = this.findFmtpLine(sdpLines, codec);\n        if (fmtpLineIndex === null) {\n            return sdp;\n        }\n        var map = this.parseFmtpLine(sdpLines[fmtpLineIndex]);\n        delete map.params[param];\n        var newLine = this.writeFmtpLine(map);\n        if (newLine === null) {\n            sdpLines.splice(fmtpLineIndex, 1);\n        }\n        else {\n            sdpLines[fmtpLineIndex] = newLine;\n        }\n        sdp = sdpLines.join("\\r\\n");\n        return sdp;\n    };\n    // Split an fmtp line into an object including \'pt\' and \'params\'.\n    SDPUtils.parseFmtpLine = function (fmtpLine) {\n        var fmtpObj = {};\n        var spacePos = fmtpLine.indexOf(" ");\n        var keyValues = fmtpLine.substring(spacePos + 1).split(";");\n        var pattern = new RegExp("a=fmtp:(\\\\d+)");\n        var result = fmtpLine.match(pattern);\n        if (result && result.length === 2) {\n            fmtpObj.pt = result[1];\n        }\n        else {\n            return null;\n        }\n        var params = {};\n        // for (let i = 0; i < keyValues.length; ++i) {\n        for (var _i = 0, _a = Object.keys(keyValues); _i < _a.length; _i++) {\n            var pair = _a[_i];\n            // const pair = keyValues[i].split("=");\n            if (pair.length === 2) {\n                params[pair[0]] = pair[1];\n            }\n        }\n        fmtpObj.params = params;\n        return fmtpObj;\n    };\n    // Generate an fmtp line from an object including \'pt\' and \'params\'.\n    SDPUtils.writeFmtpLine = function (fmtpObj) {\n        if (!fmtpObj.hasOwnProperty("pt") || !fmtpObj.hasOwnProperty("params")) {\n            return null;\n        }\n        var pt = fmtpObj.pt;\n        var params = fmtpObj.params;\n        var keyValues = [];\n        var i = 0;\n        for (var _i = 0, _a = Object.keys(params); _i < _a.length; _i++) {\n            var key = _a[_i];\n            keyValues[i] = key + "=" + params[key];\n            ++i;\n        }\n        if (i === 0) {\n            return null;\n        }\n        return "a=fmtp:" + pt.toString() + " " + keyValues.join(";");\n    };\n    // Find fmtp attribute for |codec| in |sdpLines|.\n    SDPUtils.findFmtpLine = function (sdpLines, codec) {\n        // Find payload of codec.\n        var payload = this.getCodecPayloadType(sdpLines, codec);\n        // Find the payload in fmtp line.\n        return payload\n            ? this.findLine(sdpLines, "a=fmtp:" + payload.toString())\n            : null;\n    };\n    // Find the line in sdpLines that starts with |prefix|, and, if specified,\n    // contains |substr| (case-insensitive search).\n    SDPUtils.findLine = function (sdpLines, prefix, substr) {\n        return this.findLineInRange(sdpLines, 0, -1, prefix, substr);\n    };\n    // Find the line in sdpLines[startLine...endLine - 1] that starts with |prefix|\n    // and, if specified, contains |substr| (case-insensitive search).\n    SDPUtils.findLineInRange = function (sdpLines, startLine, endLine, prefix, substr) {\n        var realEndLine = endLine !== -1 ? endLine : sdpLines.length;\n        for (var i = startLine; i < realEndLine; ++i) {\n            if (sdpLines[i].indexOf(prefix) === 0) {\n                if (!substr ||\n                    sdpLines[i].toLowerCase().indexOf(substr.toLowerCase()) !== -1) {\n                    return i;\n                }\n            }\n        }\n        return null;\n    };\n    // Gets the codec payload type from sdp lines.\n    SDPUtils.getCodecPayloadType = function (sdpLines, codec) {\n        var index = this.findLine(sdpLines, "a=rtpmap", codec);\n        return index ? this.getCodecPayloadTypeFromLine(sdpLines[index]) : null;\n    };\n    // Gets the codec payload type from an a=rtpmap:X line.\n    SDPUtils.getCodecPayloadTypeFromLine = function (sdpLine) {\n        var pattern = new RegExp("a=rtpmap:(\\\\d+) [a-zA-Z0-9-]+\\\\/\\\\d+");\n        var result = sdpLine.match(pattern);\n        return result && result.length === 2 ? result[1] : null;\n    };\n    // Returns a new m= line with the specified codec as the first one.\n    SDPUtils.setDefaultCodec = function (mLine, payload) {\n        var elements = mLine.split(" ");\n        // Just copy the first three parameters; codec order starts on fourth.\n        var newLine = elements.slice(0, 3);\n        // Put target payload first and copy in the rest.\n        newLine.push(payload);\n        for (var i = 3; i < elements.length; i++) {\n            if (elements[i] !== payload) {\n                newLine.push(elements[i]);\n            }\n        }\n        return newLine.join(" ");\n    };\n    return SDPUtils;\n}());\nexports.SDPUtils = SDPUtils;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/SDPUtils.ts?')},"./ts/com/quickhellou/TextChatUIConstants.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.TextChatUIConstants = void 0;\nvar TextChatUIConstants = /** @class */ (function () {\n    function TextChatUIConstants() {\n        this.chatWindow = ".text-chat-window";\n        this.closeButton = ".text-chat-window__close";\n        this.collapseButton = ".text-chat-window__collapse";\n        this.messageList = ".text-chat-window__messages";\n        this.input = ".text-chat-window__message-input";\n    }\n    return TextChatUIConstants;\n}());\nexports.TextChatUIConstants = TextChatUIConstants;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/TextChatUIConstants.ts?')},"./ts/com/quickhellou/UIConstants.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UIConstants = void 0;\nvar TextChatUIConstants_1 = __webpack_require__(/*! ./TextChatUIConstants */ "./ts/com/quickhellou/TextChatUIConstants.ts");\nvar RoomSelectionUIConstants_1 = __webpack_require__(/*! ./RoomSelectionUIConstants */ "./ts/com/quickhellou/RoomSelectionUIConstants.ts");\nvar UIConstants = /** @class */ (function () {\n    function UIConstants() {\n    }\n    UIConstants.confirmJoinButton = ".confirm-join-button";\n    UIConstants.confirmJoinDiv = ".confirm-join-div";\n    UIConstants.confirmJoinRoomSpan = ".confirm-join-room-span";\n    UIConstants.fullscreenSvg = ".fullscreen";\n    UIConstants.hangupSvg = ".button--hangup";\n    UIConstants.icons = ".icons";\n    UIConstants.infoDiv = ".info-div";\n    UIConstants.localVideo = ".local-video";\n    UIConstants.miniVideo = ".mini-video";\n    UIConstants.muteAudioSvg = ".mute-audio";\n    UIConstants.muteVideoSvg = ".mute-video";\n    UIConstants.newRoomButton = ".new-room-button";\n    UIConstants.remoteVideo = ".remote-video";\n    UIConstants.textChatButton = ".button--chat-window";\n    UIConstants.rejoinButton = ".rejoin-button";\n    UIConstants.rejoinDiv = ".rejoin-div";\n    UIConstants.roomLinkHref = ".room-link-href";\n    UIConstants.roomLinkHrefWaiting = ".room-link-href-waiting";\n    UIConstants.sharingDiv = ".sharing-div";\n    UIConstants.statusDiv = ".status-div";\n    UIConstants.videosDiv = ".view--videos";\n    UIConstants.hellouLogoFooterDiv = ".quickhellou-logo-footer";\n    UIConstants.overlayDiv = ".overlay";\n    UIConstants.overlayWaitingDiv = ".overlay-waiting";\n    UIConstants.closeOverlayButton = ".invite-waiting-button--thanks";\n    UIConstants.textChat = new TextChatUIConstants_1.TextChatUIConstants();\n    UIConstants.roomSelection = new RoomSelectionUIConstants_1.RoomSelectionUIConstants();\n    return UIConstants;\n}());\nexports.UIConstants = UIConstants;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/UIConstants.ts?')},"./ts/com/quickhellou/Util.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Util = void 0;\nvar StringUtils_1 = __webpack_require__(/*! ../genb/base/utils/StringUtils */ \"./ts/com/genb/base/utils/StringUtils.ts\");\nvar Log_1 = __webpack_require__(/*! ../genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\n/**\n * Utilities.\n *\n * @export\n * @class Util\n */\nvar Util = /** @class */ (function () {\n    function Util() {\n    }\n    Util.sendAsyncUrlRequest = function (method, url, body) {\n        return this.sendUrlRequest(method, url, true, body);\n    };\n    /**\n     * Sends XHR request.\n     *\n     * @static\n     * @param {string} method\n     * @param {string} url\n     * @param {boolean} async\n     * @param {string} [body]\n     * @returns\n     * @memberof Util\n     */\n    Util.sendUrlRequest = function (method, url, async, body) {\n        return new Promise(function (resolve, reject) {\n            if (!async) {\n                resolve(navigator.sendBeacon(url, body));\n                return;\n            }\n            var xhr;\n            var reportResults = function () {\n                if (xhr.status !== 200) {\n                    reject(Error('Status=' + xhr.status + ', response=' + xhr.responseText));\n                    return;\n                }\n                resolve(xhr.responseText);\n            };\n            xhr = new XMLHttpRequest();\n            if (async) {\n                xhr.onreadystatechange = function () {\n                    if (xhr.readyState !== 4) {\n                        return;\n                    }\n                    reportResults();\n                };\n            }\n            xhr.open(method, url, async);\n            xhr.send(body);\n            if (!async) {\n                reportResults();\n            }\n        });\n    };\n    /**\n     * Parses JSON object.\n     *\n     * @static\n     * @param {string} json\n     * @returns {object}\n     * @memberof Util\n     */\n    Util.parseJSON = function (json) {\n        try {\n            return JSON.parse(json);\n        }\n        catch (e) {\n            Log_1.Log.log('Error parsing json: ' + json);\n        }\n        return null;\n    };\n    Util.setCookie = function (name, value, days, path) {\n        if (days === void 0) { days = 7; }\n        if (path === void 0) { path = '/'; }\n        var expires = new Date(Date.now() + days * 864e5).toUTCString();\n        document.cookie =\n            name +\n                '=' +\n                encodeURIComponent(value) +\n                '; expires=' +\n                expires +\n                '; path=' +\n                path;\n    };\n    Util.getCookie = function (name) {\n        return document.cookie.split('; ').reduce(function (r, v) {\n            var parts = v.split('=');\n            return parts[0] === name ? decodeURIComponent(parts[1]) : r;\n        }, '');\n    };\n    Util.deleteCookie = function (name, path) {\n        this.setCookie(name, '', -1, path);\n    };\n    /**\n     * Checks if is mobile platform.\n     *\n     * @static\n     * @returns {boolean}\n     * @memberof Util\n     */\n    Util.isMobile = function () {\n        if (\n        // tslint:disable-next-line:max-line-length\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) ||\n            // tslint:disable-next-line:max-line-length\n            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0, 4))) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Checks if a browser is EdgeHTML.\n     *\n     * @static\n     * @returns {boolean}\n     * @memberof Util\n     */\n    Util.isEdgeHTML = function () {\n        return /Edge\\//g.test(navigator.userAgent);\n    };\n    Util.randomString = function (strLength) {\n        var result = [];\n        strLength = strLength || 5;\n        var charSet = '0123456789';\n        while (strLength--) {\n            result.push(charSet.charAt(Math.floor(Math.random() * charSet.length)));\n        }\n        return result.join('');\n    };\n    /**\n     * Returns the URL query key-value pairs as a dictionary object.\n     *\n     * @static\n     * @param {string} queryString\n     * @returns {*}\n     * @memberof Util\n     */\n    Util.queryStringToDictionary = function (queryString) {\n        var pairs = queryString.slice(1).split('&');\n        var result = {};\n        pairs.forEach(function (pair) {\n            if (pair) {\n                pair = pair.split('=');\n                if (pair[0]) {\n                    result[pair[0]] = decodeURIComponent(pair[1] || '');\n                }\n            }\n        });\n        return result;\n    };\n    /**\n     * Calculcates FPS for the provided video elements and calls on a callback which\n     * is used to update the necessary stats for either remote or local videos.\n     * Adapted from https://cs.chromium.org/chromium/src/chrome/test/data/media/html/media_stat_perf.html\n     *\n     * @static\n     * @param {*} videoElement\n     * @param {number} decodedFrames\n     * @param {number} startTime\n     * @param {string} remoteOrLocal\n     * @param {Function} callback\n     * @returns {number}\n     * @memberof Util\n     */\n    Util.calculateFps = function (videoElement, decodedFrames, startTime, remoteOrLocal, callback) {\n        var fps = 0;\n        if (videoElement &&\n            typeof videoElement.webkitDecodedFrameCount !== undefined) {\n            if (videoElement.readyState >= videoElement.HAVE_CURRENT_DATA) {\n                var currentTime = new Date().getTime();\n                var deltaTime = (currentTime - startTime) / 1000;\n                var startTimeToReturn = currentTime;\n                fps = (videoElement.webkitDecodedFrameCount - decodedFrames) / deltaTime;\n                callback(videoElement.webkitDecodedFrameCount, startTimeToReturn, remoteOrLocal);\n            }\n        }\n        // tslint:disable-next-line:radix\n        return parseInt(fps);\n    };\n    /**\n     * Returns a list of ICE servers after requesting it from the ICE server provider.\n     * ICE is a standard method of NAT traversal used in WebRTC.\n     * https://webrtcglossary.com/ice/\n     *\n     * @static\n     * @param {string} iceServerRequestUrl\n     * @param {string} iceTransports\n     * @returns {*}\n     * @memberof Util\n     */\n    Util.requestIceServers = function (iceServerRequestUrl, iceTransports) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.sendAsyncUrlRequest('POST', iceServerRequestUrl)\n                .then(function (response) {\n                var iceServerRequestResponse = _this.parseJSON(response);\n                if (!iceServerRequestResponse) {\n                    reject(Error('Error parsing response JSON: ' + response));\n                    return;\n                }\n                if (StringUtils_1.StringUtils.isNotEmpty(iceTransports)) {\n                    _this.filterIceServersUrls(iceServerRequestResponse, iceTransports);\n                }\n                Log_1.Log.log('Retrieved ICE server information.');\n                resolve(iceServerRequestResponse.iceServers);\n            })\n                .catch(function (error) {\n                reject(Error('ICE server request error: ' + error.message));\n                return;\n            });\n        });\n    };\n    Util.isFullScreen = function () {\n        // TODO: checkout\n        return !!document.fullscreenEnabled; // if any defined and true\n        // return !!(document.isFullScreen || document.fullscreenEnabled) // if any defined and true\n    };\n    /**\n     * Start shims for fullscreen\n     * (kmr) review reliability\n     * @static\n     * @memberof Util\n     */\n    Util.setUpFullScreen = function () {\n        document.cancelFullScreen =\n            document.mozCancelFullScreen || document.cancelFullScreen;\n        document.body.requestFullScreen =\n            document.body.mozRequestFullScreen || document.body.requestFullScreen;\n        document.onfullscreenchange = function (event) {\n            return document.onfullscreenchange;\n        };\n    };\n    Util.requestFullscreen = function () {\n        if (document.body.requestFullscreen) {\n            document.body.requestFullscreen();\n        }\n        else if (document.body.mozRequestFullScreen) {\n            document.body.mozRequestFullScreen();\n        }\n        else if (document.body.msRequestFullscreen) {\n            document.body.msRequestFullscreen();\n        }\n    };\n    Util.cancelFullScreen = function () {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        }\n        else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        }\n        else if (document.msExitFullscreen) {\n            document.msExitFullscreen();\n        }\n        else if (document.cancelFullScreen) {\n            document.cancelFullScreen();\n        }\n    };\n    /**\n     * Filter a peerConnection config to only contain ice servers with\n     * transport=|protocol|.\n     *\n     * @private\n     * @static\n     * @param {*} config\n     * @param {*} protocol\n     * @memberof Util\n     */\n    Util.filterIceServersUrls = function (config, protocol) {\n        var transport = 'transport=' + protocol;\n        var newIceServers = new Array();\n        // tslint:disable-next-line:prefer-for-of\n        for (var i = 0; i < config.iceServers.length; ++i) {\n            var iceServer = config.iceServers[i];\n            var newUrls = [];\n            // tslint:disable-next-line:prefer-for-of\n            for (var j = 0; j < iceServer.urls.length; ++j) {\n                var url = iceServer.urls[j];\n                if (url.indexOf(transport) !== -1) {\n                    newUrls.push(url);\n                }\n                else if (url.indexOf('?transport=') === -1) {\n                    newUrls.push(url + '?' + transport);\n                }\n            }\n            if (newUrls.length !== 0) {\n                iceServer.urls = newUrls;\n                newIceServers.push(iceServer);\n            }\n        }\n        config.iceServers = newIceServers;\n    };\n    return Util;\n}());\nexports.Util = Util;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/Util.ts?")},"./ts/com/quickhellou/application/RemoteVideo.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.RemoteVideo = void 0;\n/**\n * Remote video object.\n *\n * @export\n * @class RemoteVideo\n */\nvar RemoteVideo = /** @class */ (function () {\n    /**\n     * Creates an instance of RemoteVideo.\n     *\n     * @param {string} id\n     * @param {HTMLVideoElement} element\n     * @memberof RemoteVideo\n     */\n    function RemoteVideo(clientId, element) {\n        this.clientId = clientId;\n        this.element = element;\n    }\n    return RemoteVideo;\n}());\nexports.RemoteVideo = RemoteVideo;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/RemoteVideo.ts?')},"./ts/com/quickhellou/application/RemoteVideos.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RemoteVideos = void 0;\nvar HTMLUtils_1 = __webpack_require__(/*! ../../genb/base/utils/HTMLUtils */ \"./ts/com/genb/base/utils/HTMLUtils.ts\");\nvar RemoteVideo_1 = __webpack_require__(/*! ./RemoteVideo */ \"./ts/com/quickhellou/application/RemoteVideo.ts\");\nvar EventDispatcherService_1 = __webpack_require__(/*! ../../genb/base/services/EventDispatcherService */ \"./ts/com/genb/base/services/EventDispatcherService.ts\");\nvar BaseUtils_1 = __webpack_require__(/*! ../../genb/base/utils/BaseUtils */ \"./ts/com/genb/base/utils/BaseUtils.ts\");\nvar RemoteVideosEvent_1 = __webpack_require__(/*! ./model/RemoteVideosEvent */ \"./ts/com/quickhellou/application/model/RemoteVideosEvent.ts\");\nvar Log_1 = __webpack_require__(/*! ../../genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\n/**\n * Remote videos controller\n *\n * @export\n * @class RemoteVideos\n * @extends {EventDispatcherService}\n */\nvar RemoteVideos = /** @class */ (function (_super) {\n    __extends(RemoteVideos, _super);\n    /**\n     * Creates an instance of RemoteVideos.\n     *\n     * @memberof RemoteVideos\n     */\n    function RemoteVideos() {\n        var _this = _super.call(this) || this;\n        _this.isFullScreen = false;\n        _this.videos = new Map();\n        document.addEventListener('fullscreenchange', function () {\n            _this.onFullScreenChange();\n        }, false);\n        document.addEventListener('webkitfullscreenchange', function () {\n            _this.onFullScreenChange();\n        }, false);\n        document.addEventListener('mozfullscreenchange', function (event) {\n            _this.onFullScreenChange();\n        }, false);\n        return _this;\n    }\n    /**\n     * Gets static instance.\n     *\n     * @static\n     * @returns\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.getInstance = function () {\n        if (!RemoteVideos.instance) {\n            RemoteVideos.instance = new RemoteVideos();\n        }\n        return RemoteVideos.instance;\n    };\n    /**\n     * Removes a remote video object.\n     *\n     * @public\n     * @param {string} videoId\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.remove = function (videoId) {\n        this.videos.delete(videoId);\n    };\n    /**\n     * Gets remote video.\n     *\n     * @param {string} videoId\n     * @returns {RemoteVideo}\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.get = function (videoId) {\n        var video = this.videos.get(videoId);\n        return video;\n    };\n    /**\n     * Gets all remote videos.\n     *\n     * @returns {Map<string, RemoteVideo>}\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.getAll = function () {\n        return this.videos;\n    };\n    /**\n     * Checks if there are no remote videos.\n     *\n     * @returns {boolean}\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.isEmpty = function () {\n        return Array.from(this.videos).length === 0;\n    };\n    /**\n     * Gets remote video video element.\n     *\n     * @param {string} videoId\n     * @returns {HTMLVideoElement}\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.getElement = function (videoId) {\n        var remoteVideo = this.videos.get(videoId);\n        if (BaseUtils_1.BaseUtils.isObjectDefined(remoteVideo)) {\n            return remoteVideo.element;\n        }\n        else {\n            Log_1.Log.warn('RemoteVideos::getElement No remote video by given video ID.');\n        }\n        return null;\n    };\n    /**\n     * Awaits remote stream arrival.\n     *\n     * @public\n     * @param {string} streamId\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.waitForRemoteVideo = function (streamId) {\n        // Wait for the actual video to start arriving before moving to the active\n        // call state.\n        var _this = this;\n        var remoteVideo = this.videos.get(streamId);\n        var remoteVideoElement = remoteVideo.element;\n        if (remoteVideoElement.readyState >= 2) {\n            // i.e. can play\n            Log_1.Log.log('Remote video started; currentTime: ' + remoteVideoElement.currentTime);\n            this.dispatchEvent(RemoteVideosEvent_1.RemoteVideosEvent.ADD_STREAM_SUCCESS, remoteVideo.element);\n        }\n        else {\n            remoteVideoElement.oncanplay = function () {\n                _this.waitForRemoteVideo(streamId);\n            };\n        }\n    };\n    /**\n     * Removes remote video \"can play\" handlers.\n     *\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.removeCanPlayHandlers = function () {\n        this.videos.forEach(function (remoteVideo) {\n            remoteVideo.element.oncanplay = undefined;\n        });\n    };\n    /**\n     * Deactivates all remote video windows.\n     *\n     * @public\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.deactivateAll = function () {\n        this.videos.forEach(function (remoteVideo) {\n            remoteVideo.element.classList.remove('active');\n        });\n        this.removeAllRemoteVideo();\n    };\n    /**\n     * Creates remote video window with stream attached.\n     *\n     * @public\n     * @param {MediaStream} stream\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.addRemoteVideo = function (registerOptions) {\n        Log_1.Log.log('RemoteVideos::addRemoteVideo', registerOptions.clientId, registerOptions.sessionId);\n        this.add(registerOptions.clientId, registerOptions.sessionId);\n        this.updateVideoElementsLayout();\n        this.dispatchEvent(RemoteVideosEvent_1.RemoteVideosEvent.REMOTE_VIDEO_ADDED);\n    };\n    /**\n     * Adds stream to existing video element.\n     *\n     * @public\n     * @param {MediaStream} stream\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.addStream = function (sessionId, stream) {\n        var _this = this;\n        var remoteVideo = this.get(sessionId);\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(remoteVideo)) {\n            setTimeout(function () {\n                _this.addStream(sessionId, stream);\n            }, 2000);\n            return;\n        }\n        var remoteVideoElement = remoteVideo.element;\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(remoteVideoElement)) {\n            this.dispatchEvent(RemoteVideosEvent_1.RemoteVideosEvent.ADD_STREAM_FAILURE);\n            return;\n        }\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(remoteVideoElement.srcObject)) {\n            remoteVideoElement.srcObject = stream;\n        }\n        if (remoteVideoElement.readyState >= 2) {\n            this.dispatchEvent(RemoteVideosEvent_1.RemoteVideosEvent.ADD_STREAM_SUCCESS, remoteVideoElement);\n            return;\n        }\n        setTimeout(function () {\n            _this.addStream(sessionId, stream);\n        }, 2000);\n    };\n    /**\n     * Remove remote video.\n     *\n     * @param {string} videoId\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.removeRemoteVideo = function (sessionId) {\n        var remoteVideo = this.get(sessionId);\n        if (BaseUtils_1.BaseUtils.isObjectDefined(remoteVideo)) {\n            remoteVideo.element.srcObject = null;\n            remoteVideo.element.oncanplay = undefined;\n            this.remove(sessionId);\n            // document.querySelectorAll(this.getRemoteVideoClassName(sessionId)).forEach((e) => e.parentNode.removeChild(e));\n            var wrapVideo = remoteVideo.element.parentElement;\n            if (BaseUtils_1.BaseUtils.isObjectDefined(wrapVideo)) {\n                wrapVideo.remove();\n            }\n            this.dispatchEvent(RemoteVideosEvent_1.RemoteVideosEvent.REMOTE_VIDEO_REMOVED);\n        }\n        this.updateVideoElementsLayout();\n    };\n    /**\n     * Gets remote video class name.\n     *\n     * @param {string} sessionId\n     * @returns {string}\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.getRemoteVideoClassName = function (sessionId) {\n        return \"remote-video--\" + sessionId;\n    };\n    /**\n     * Updates video windows layout.\n     *\n     * @public\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.updateVideoElementsLayout = function () {\n        var activeVideoElementsSize = HTMLUtils_1.HTMLUtils.list('video.remote-video.active').length;\n        this.videos.forEach(function (video, sessionId) {\n            var videoElement = video.element.parentElement;\n            videoElement.classList.remove('size--single', 'size--double', 'size--multi');\n            var sizeClass = 'size--single';\n            if (activeVideoElementsSize === 2) {\n                sizeClass = 'size--double';\n            }\n            if (activeVideoElementsSize > 2 && activeVideoElementsSize <= 4) {\n                sizeClass = 'size--multi';\n            }\n            if (activeVideoElementsSize > 4) {\n                sizeClass = 'size--large';\n            }\n            videoElement.classList.add(sizeClass);\n        });\n    };\n    /**\n     * Adds a remote video object.\n     *\n     * @param {string} remoteClientId\n     * @param {string} sessionId\n     * @returns {RemoteVideo}\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.add = function (remoteClientId, sessionId) {\n        var _this = this;\n        var videoElementClassName = this.getRemoteVideoClassName(sessionId);\n        if (HTMLUtils_1.HTMLUtils.exists(videoElementClassName)) {\n            this.removeRemoteVideo(sessionId);\n        }\n        if (!HTMLUtils_1.HTMLUtils.exists(videoElementClassName)) {\n            var videoElementHtml = \"<div class=\\\"remote-video-wrap \" + videoElementClassName + \"--wrap\\\">\\n        <div class=\\\"remote-video-fullscreen \" + videoElementClassName + \"--fullscreen\\\">\\n        </div><div class=\\\"video-loader js-active\\\">\\n        </div><video class=\\\"remote-video \" + videoElementClassName + \"\\\" autoplay playsinline></video></div>\";\n            var videoElementContainerElement = HTMLUtils_1.HTMLUtils.get('.videos-wrap');\n            videoElementContainerElement.insertAdjacentHTML('afterbegin', videoElementHtml);\n            var fullscreenButton = HTMLUtils_1.HTMLUtils.get(\".\" + videoElementClassName + \"--fullscreen\");\n            fullscreenButton.addEventListener('click', function () {\n                _this.toggleFullScreen(\".\" + videoElementClassName + \"--wrap\");\n            }, false);\n        }\n        var videoElement = HTMLUtils_1.HTMLUtils.get(\".\" + videoElementClassName);\n        var remoteVideo = new RemoteVideo_1.RemoteVideo(remoteClientId, videoElement);\n        this.videos.set(sessionId, remoteVideo);\n        var videoLoader = HTMLUtils_1.HTMLUtils.get(\".\" + videoElementClassName + \"--wrap .video-loader\");\n        videoElement.oncanplay = function () {\n            videoLoader.classList.remove('js-active');\n            videoElement.oncanplay = undefined;\n        };\n        Log_1.Log.info('RemoteVideos::add Remote video added ', sessionId);\n        return remoteVideo;\n    };\n    /**\n     * Handles full screen change event.\n     *\n     * @memberof AppController\n     */\n    RemoteVideos.prototype.onFullScreenChange = function () {\n        if (this.isFullScreen) {\n            var footer = HTMLUtils_1.HTMLUtils.get('.footer');\n            var videosWrapList = HTMLUtils_1.HTMLUtils.list('.video-columns-wrap, .videos-wrap, .remote-video-wrap');\n            footer.classList.remove('hidden');\n            videosWrapList.forEach(function (elem) {\n                elem.classList.remove('js-fullscreen');\n            });\n            this.isFullScreen = false;\n        }\n    };\n    /**\n     * Toggles full screen.\n     *\n     * @private\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.toggleFullScreen = function (videoElementName) {\n        var footer = HTMLUtils_1.HTMLUtils.get('.footer');\n        var videosWrapList = HTMLUtils_1.HTMLUtils.list('.video-columns-wrap, .videos-wrap, ' + videoElementName);\n        if (!this.isFullScreen) {\n            Log_1.Log.log('Entering fullscreen.');\n            footer.classList.add('hidden');\n            videosWrapList.item(0).classList.add('js-fullscreen');\n            videosWrapList.item(1).classList.add('js-fullscreen');\n            videosWrapList.item(2).classList.add('js-fullscreen');\n            this.isFullScreen = true;\n        }\n        else {\n            Log_1.Log.log('Exiting fullscreen.');\n            footer.classList.remove('hidden');\n            videosWrapList.forEach(function (elem) {\n                elem.classList.remove('js-fullscreen');\n            });\n            this.isFullScreen = false;\n        }\n    };\n    /**\n     * Removes all remote videos.\n     *\n     * @private\n     * @memberof RemoteVideos\n     */\n    RemoteVideos.prototype.removeAllRemoteVideo = function () {\n        var _this = this;\n        this.videos.forEach(function (video, sessionId) {\n            _this.removeRemoteVideo(sessionId);\n        });\n    };\n    return RemoteVideos;\n}(EventDispatcherService_1.EventDispatcherService));\nexports.RemoteVideos = RemoteVideos;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/RemoteVideos.ts?")},"./ts/com/quickhellou/application/controller/MediaCommunication.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.MediaCommunication = void 0;\nvar EventDispatcherService_1 = __webpack_require__(/*! ../../../genb/base/services/EventDispatcherService */ "./ts/com/genb/base/services/EventDispatcherService.ts");\nvar Call_1 = __webpack_require__(/*! ../../Call */ "./ts/com/quickhellou/Call.ts");\nvar ColliderService_1 = __webpack_require__(/*! ../service/ColliderService */ "./ts/com/quickhellou/application/service/ColliderService.ts");\nvar CallEvent_1 = __webpack_require__(/*! ../../CallEvent */ "./ts/com/quickhellou/CallEvent.ts");\nvar Room_1 = __webpack_require__(/*! ../model/Room */ "./ts/com/quickhellou/application/model/Room.ts");\nvar Util_1 = __webpack_require__(/*! ../../Util */ "./ts/com/quickhellou/Util.ts");\nvar ColliderServiceEvent_1 = __webpack_require__(/*! ../model/ColliderServiceEvent */ "./ts/com/quickhellou/application/model/ColliderServiceEvent.ts");\nvar BaseUtils_1 = __webpack_require__(/*! ../../../genb/base/utils/BaseUtils */ "./ts/com/genb/base/utils/BaseUtils.ts");\nvar StringUtils_1 = __webpack_require__(/*! ../../../genb/base/utils/StringUtils */ "./ts/com/genb/base/utils/StringUtils.ts");\nvar Log_1 = __webpack_require__(/*! ../../../genb/base/utils/Log */ "./ts/com/genb/base/utils/Log.ts");\nvar PeerConnectionResponseType_1 = __webpack_require__(/*! ../model/PeerConnectionResponseType */ "./ts/com/quickhellou/application/model/PeerConnectionResponseType.ts");\nvar SessionInit_1 = __webpack_require__(/*! ../model/SessionInit */ "./ts/com/quickhellou/application/model/SessionInit.ts");\nvar RtcSession_1 = __webpack_require__(/*! ../model/RtcSession */ "./ts/com/quickhellou/application/model/RtcSession.ts");\nvar MediaEvent_1 = __webpack_require__(/*! ../model/MediaEvent */ "./ts/com/quickhellou/application/model/MediaEvent.ts");\nvar ShareScreenEvent_1 = __webpack_require__(/*! ../model/ShareScreenEvent */ "./ts/com/quickhellou/application/model/ShareScreenEvent.ts");\n/**\n * MediaCommunication and media facade.\n *\n * @export\n * @class MediaCommunication\n * @extends {EventDispatcherService}\n */\nvar MediaCommunication = /** @class */ (function (_super) {\n    __extends(MediaCommunication, _super);\n    /**\n     * Creates an instance of MediaCommunication.\n     *\n     * @param {LoadingParams} loadingParams\n     * @memberof MediaCommunication\n     */\n    function MediaCommunication(loadingParams) {\n        var _this = _super.call(this) || this;\n        _this.loadingParams = loadingParams;\n        _this.colliderService = ColliderService_1.ColliderService.setupInstance(_this.loadingParams.wssUrl, _this.loadingParams.wssPostUrl, true);\n        _this.setRoom(_this.loadingParams.roomID, _this.loadingParams.roomLink);\n        _this.colliderService = ColliderService_1.ColliderService.getInstance();\n        _this.colliderService.addEventListener(ColliderServiceEvent_1.ColliderServiceEvent.MESSAGE, _this.onReceiveColliderChannelMessage, _this);\n        _this.colliderService.addEventListener(ColliderServiceEvent_1.ColliderServiceEvent.CLOSE, _this.onColliderChannelClose, _this);\n        _this.colliderService.addEventListener(ColliderServiceEvent_1.ColliderServiceEvent.DESTROY, _this.onColliderChannelDestroy, _this);\n        _this.requestMediaAndIceServers();\n        return _this;\n    }\n    /**\n     * Sets room.\n     *\n     * @param {string} roomId\n     * @param {string} roomLink\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.setRoom = function (roomId, roomLink) {\n        this.room = new Room_1.Room(roomId, roomLink);\n        this.loadingParams.roomID = roomId;\n        this.loadingParams.roomLink = roomLink;\n        this.room.server = this.room.server = this.loadingParams.hostUrl || \'\';\n    };\n    /**\n     * Creates call instance.\n     *\n     * @returns {Call}\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.createCall = function () {\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.call)) {\n            this.call = new Call_1.Call(this.loadingParams);\n            this.setupCallEvents();\n        }\n        return this.call;\n    };\n    /**\n     * Connects to remote services.\n     *\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.connect = function () {\n        var _this = this;\n        // Asynchronously open a WebSocket connection to the Collider service.\n        var connectColliderPromise = this.colliderService\n            .open()\n            .catch(function (reason) {\n            _this.onError("WebSocket open error: " + reason.message);\n            return Promise.reject(reason);\n        });\n        // Asynchronously join the room.\n        var joinSignalingServerPromise = this.joinRoom().catch(function (reason) {\n            _this.onError("Room server join error: " + reason.message);\n            return Promise.reject(reason);\n        });\n        // We only register with WSS if the web socket connection is open and if we\'re\n        // already registered with PyApp.\n        Promise.all([connectColliderPromise, joinSignalingServerPromise])\n            .then(function (results) {\n            var roomPyParams = results[1];\n            _this.loadingParams.clientID = roomPyParams.client_id;\n            var sessions = roomPyParams.sessions;\n            var sessionInit = new SessionInit_1.SessionInit();\n            sessions.forEach(function (sessionObj) {\n                var sessionJson = JSON.parse(sessionObj);\n                sessionInit.addSession(new RtcSession_1.RtcSession(sessionJson.id, sessionJson.messages, sessionJson.other_client_id, StringUtils_1.StringUtils.equals(sessionJson.is_initiator, \'True\'), StringUtils_1.StringUtils.equals(sessionJson.is_forward, \'True\')));\n            });\n            _this.colliderService.register(_this.room.id, roomPyParams.client_id);\n            // We only start signaling after we have registered the signaling channel\n            // and have media and TURN. Since we send candidates as soon as the peer\n            // connection generates them we need to wait for the signaling channel to be\n            // ready.\n            Promise.all([_this.getIceServersPromise, _this.getMediaPromise])\n                .then(function () {\n                _this.startRtcSignaling(sessionInit);\n            })\n                .catch(function (reason) {\n                _this.onError("Failed to start signaling: " + reason.message);\n            });\n        })\n            .catch(function (reason) {\n            _this.onError("WebSocket register error: " + reason.message);\n        });\n    };\n    /**\n     * Sets display media as default video track.\n     *\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.displayMedia = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                ;\n                navigator.mediaDevices\n                    .getDisplayMedia({ video: true, audio: true })\n                    .then(function (stream) {\n                    _this.onUserDisplayMediaSuccess(stream);\n                })\n                    .catch(function (reason) {\n                    Log_1.Log.warn(reason);\n                    _this.dispatchEvent(ShareScreenEvent_1.ShareScreenEvent.NOT_ALLOWED);\n                });\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Stops sending the screen capture tracks\n     * and reattaches camera tracks.\n     *\n     * @public\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.stopSendingDisplayMedia = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.call.stopDisplayMedia();\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Restarts call.\n     *\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.restartCall = function () {\n        this.requestMediaAndIceServers();\n        this.connect();\n    };\n    /**\n     * Hangups call.\n     *\n     * @param {boolean} async\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.hangupCall = function (async) {\n        this.call.hangup(async);\n    };\n    /**\n     * Toggles audio unmuting.\n     *\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.toggleAudioUnMute = function () {\n        this.call.toggleAudioUnMute();\n    };\n    /**\n     * Toggles audio muting.\n     *\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.toggleAudioMute = function () {\n        this.call.toggleAudioMute();\n    };\n    /**\n     * Toggles video muting.\n     *\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.toggleVideoMute = function () {\n        this.call.toggleVideoMute();\n    };\n    /**\n     * Gets call start time.\n     *\n     * @returns\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.getCallStartTime = function () {\n        return this.call.getStartTime();\n    };\n    /**\n     * Sends local chat message.\n     *\n     * @public\n     * @param {string} message\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.sendLocalChatMessage = function (message) {\n        this.call.broadcast(PeerConnectionResponseType_1.PeerConnectionResponseType.TEXT_CHAT_MESSAGE, message);\n    };\n    /**\n     * Gets call instance.\n     *\n     * @returns {Call}\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.getCall = function () {\n        return this.call;\n    };\n    /**\n     * Adds display media to stream.\n     *\n     * @private\n     * @param {MediaStream} stream\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onUserDisplayMediaSuccess = function (displayStream) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (!BaseUtils_1.BaseUtils.isObjectDefined(this.call)) {\n                    Log_1.Log.error(\'Call instance is not defined.\');\n                    return [2 /*return*/];\n                }\n                if (displayStream.getTracks().length === 0) {\n                    Log_1.Log.error(\'Display screen has no tracks attached.\');\n                    return [2 /*return*/];\n                }\n                this.dispatchEvent(MediaEvent_1.MediaEvent.DISPLAY_MEDIA_DISPLAYED);\n                this.call.addDisplayMediaTracks(displayStream.getTracks()[0]);\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Requests local media and ICE servers.\n     *\n     * @private\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.requestMediaAndIceServers = function () {\n        this.getMediaPromise = this.maybeGetMedia();\n        this.getIceServersPromise = this.maybeGetIceServers();\n    };\n    /**\n     * Joins room in signaling service.\n     *\n     * @private\n     * @returns {Promise<any>}\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.joinRoom = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(_this.room.id)) {\n                reject(Error(\'Missing room ID.\'));\n            }\n            var path = _this.room.server + "/join/" + _this.room.id + window.location.search;\n            Util_1.Util.sendAsyncUrlRequest(\'POST\', path)\n                .then(function (response) {\n                var responseObj = Util_1.Util.parseJSON(response);\n                if (!responseObj) {\n                    reject(Error(\'Error parsing response JSON.\'));\n                    return;\n                }\n                if (!StringUtils_1.StringUtils.equals(responseObj.result, \'SUCCESS\')) {\n                    reject(Error("Registration error: " + responseObj.result));\n                    if (StringUtils_1.StringUtils.equals(responseObj.result, \'FULL\')) {\n                        var getPath = _this.room.server + "/r/" + _this.room.id + window.location.search;\n                        window.location.assign(getPath);\n                    }\n                    return;\n                }\n                Log_1.Log.log(\'Joined the room.\');\n                resolve(responseObj.params);\n            })\n                .catch(function (reason) {\n                reject(Error("Failed to join the room: " + reason.message));\n                return;\n            });\n        });\n    };\n    /**\n     * Asynchronously request local video and audio if needed.\n     *\n     * @private\n     * @returns {Promise<any>}\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.maybeGetMedia = function () {\n        var _this = this;\n        var needStream = this.loadingParams.mediaConstraints.audio !== false ||\n            this.loadingParams.mediaConstraints.video !== false;\n        var mediaPromise = null;\n        if (needStream) {\n            var mediaConstraints_1 = this.loadingParams.mediaConstraints;\n            mediaPromise = navigator.mediaDevices\n                .getUserMedia(mediaConstraints_1)\n                .catch(function (reason) {\n                if (reason.name !== \'NotFoundError\') {\n                    throw reason;\n                }\n                return navigator.mediaDevices\n                    .enumerateDevices()\n                    .then(function (devices) {\n                    var cam = devices.find(function (device) {\n                        return device.kind === \'videoinput\';\n                    });\n                    var mic = devices.find(function (device) {\n                        return device.kind === \'audioinput\';\n                    });\n                    var audioConstraint = {\n                        echoCancellation: true,\n                    };\n                    var constraints = {\n                        audio: audioConstraint,\n                        video: cam && mediaConstraints_1.video,\n                    };\n                    if (!!navigator.mediaDevices.getUserMedia) {\n                        return navigator.mediaDevices.getUserMedia(constraints);\n                    }\n                    else {\n                        Log_1.Log.warn(\'Feature not supported. Please update your browser to the newest release.\');\n                    }\n                });\n            })\n                .then(function (stream) {\n                _this.onUserMediaSuccess(stream);\n            })\n                .catch(function (reason) {\n                _this.onError("Error getting local media: " + reason.message);\n                _this.onUserMediaError(reason);\n            });\n        }\n        else {\n            mediaPromise = Promise.resolve();\n        }\n        return mediaPromise;\n    };\n    /**\n     * Handles local media initialize success.\n     *\n     * @private\n     * @param {MediaStream} stream\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onUserMediaSuccess = function (stream) {\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.call)) {\n            Log_1.Log.warn(\'Call instance is not defined.\');\n            return;\n        }\n        this.call.setLocalStream(stream);\n        this.dispatchEvent(CallEvent_1.CallEvent.LOCAL_STREAM_ADDED, stream);\n    };\n    /**\n     * Handles local media initialize error.\n     *\n     * @private\n     * @param {any} error\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onUserMediaError = function (reason) {\n        var errorMessage = "Failed to get access to local media. Error name was " + reason.name + "." +\n            \'Continuing without sending a stream.\';\n        this.onError("getUserMedia error: " + errorMessage);\n        alert(errorMessage);\n    };\n    /**\n     * Asynchronously request an ICE server if needed.\n     *\n     * @private\n     * @returns {Promise<any>}\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.maybeGetIceServers = function () {\n        var _this = this;\n        var shouldRequestIceServers = this.loadingParams.iceServerRequestUrl &&\n            this.loadingParams.iceServerRequestUrl.length > 0 &&\n            this.loadingParams.peerConnectionConfig.iceServers &&\n            this.loadingParams.peerConnectionConfig.iceServers.length === 0;\n        var iceServerPromise = null;\n        if (shouldRequestIceServers) {\n            var requestURL = this.loadingParams.iceServerRequestUrl;\n            iceServerPromise = Util_1.Util.requestIceServers(requestURL, this.loadingParams.iceServerTransports)\n                .then(function (iceServers) {\n                var servers = _this.loadingParams.peerConnectionConfig.iceServers;\n                _this.loadingParams.peerConnectionConfig.iceServers =\n                    servers.concat(iceServers);\n            })\n                .catch(function (reason) {\n                // Error retrieving ICE servers.\n                var message = \'No TURN server; unlikely that media will traverse networks.\';\n                _this.dispatchEvent(CallEvent_1.CallEvent.STATUS_MESSAGE, message);\n                Log_1.Log.warn(reason.message);\n            });\n        }\n        else {\n            iceServerPromise = Promise.resolve();\n        }\n        return iceServerPromise;\n    };\n    /**\n     * Sends request to create PeerConnection client and start RTC signaling.\n     *\n     * @private\n     * @param {SessionInit} sessionInit\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.startRtcSignaling = function (sessionInit) {\n        this.call.setRoom(this.room);\n        this.call.startRtcSignaling(sessionInit);\n    };\n    /**\n     * Resolves response signaling message.\n     *\n     * @private\n     * @param {string} message the message\n     *\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onReceiveColliderChannelMessage = function (message) {\n        var messageJson = Util_1.Util.parseJSON(message);\n        if (typeof messageJson === \'string\') {\n            messageJson = Util_1.Util.parseJSON(messageJson);\n        }\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(messageJson)) {\n            Log_1.Log.warn(\'MediaCommunication::onReceiveColliderChannelMessage No message defined.\');\n            return;\n        }\n        var type = messageJson.type;\n        if (PeerConnectionResponseType_1.PeerConnectionResponseType.isBye(type)) {\n            this.onRemoteHangup(messageJson.sessionId);\n            return;\n        }\n        if (PeerConnectionResponseType_1.PeerConnectionResponseType.isPing(type)) {\n            this.onPingRequest();\n            return;\n        }\n        if (PeerConnectionResponseType_1.PeerConnectionResponseType.isRemoteIceComplete(type)) {\n            this.onRemoteIceComplete(messageJson);\n            return;\n        }\n        if (PeerConnectionResponseType_1.PeerConnectionResponseType.isUnreachableClient(type)) {\n            this.onUnreachableClient(messageJson.body);\n            return;\n        }\n        if (PeerConnectionResponseType_1.PeerConnectionResponseType.isTextChatMessage(messageJson)) {\n            this.onRemoteTextChatMessage(Util_1.Util.parseJSON(messageJson.body));\n            return;\n        }\n        if (PeerConnectionResponseType_1.PeerConnectionResponseType.isResponse(type)) {\n            var body = messageJson.body;\n            if (typeof messageJson.body === \'string\') {\n                body = JSON.parse(messageJson.body);\n            }\n            if (BaseUtils_1.BaseUtils.isObjectDefined(body)) {\n                var name_1 = body.name;\n                this.resolveResponseSignalingMessage(name_1, body);\n                return;\n            }\n        }\n        // forward the message to the call instance\n        // to use it in RTC connection\n        this.call.receiveColliderChannelMessage(message);\n    };\n    /**\n     * Handles unexpected Collider channel close.\n     *\n     * @private\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onColliderChannelClose = function () {\n        this.dispatchEvent(CallEvent_1.CallEvent.WEBSOCKET_CLOSED);\n    };\n    /**\n     * Destroy application transmitter.\n     */\n    MediaCommunication.prototype.onColliderChannelDestroy = function () {\n        this.dispatchEvent(ColliderServiceEvent_1.ColliderServiceEvent.DESTROY);\n    };\n    /**\n     * Responds on ping request.\n     *\n     * @private\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onPingRequest = function () {\n        this.colliderService.respondOnPingRequest();\n    };\n    MediaCommunication.prototype.onRemoteIceComplete = function (data) {\n        this.call.onRemoteIceComplete(data);\n    };\n    /**\n     *\n     *\n     * @private\n     * @param {string} clientId\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onUnreachableClient = function (clientId) {\n        var sessionId = this.call.onRemoteHangupByClientId(clientId);\n        this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_HANGUP, sessionId);\n    };\n    /**\n     * Setups call events.\n     *\n     * @private\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.setupCallEvents = function () {\n        var _this = this;\n        this.call.addEventListener(CallEvent_1.CallEvent.REMOTE_SDP_PROTOCOL_RECEIVED, function (data) {\n            _this.onRemoteSdpProtocolReceived(data);\n        }, this);\n        this.call.addEventListener(CallEvent_1.CallEvent.REMOTE_STREAM_ADDED, function (data) {\n            _this.onRemoteStreamAdded(data);\n        }, this);\n        this.call.addEventListener(CallEvent_1.CallEvent.LOCAL_STREAM_ADDED, function (data) {\n            _this.onLocalStreamAdded(data.stream);\n        }, this);\n        this.call.addEventListener(CallEvent_1.CallEvent.SIGNALING_STATE_CHANGE, function () {\n            _this.dispatchEvent(CallEvent_1.CallEvent.SIGNALING_STATE_CHANGE);\n        }, this);\n        this.call.addEventListener(CallEvent_1.CallEvent.ICE_CONNECTION_STATE_CHANGE, function () {\n            _this.dispatchEvent(CallEvent_1.CallEvent.ICE_CONNECTION_STATE_CHANGE);\n        }, this);\n        this.call.addEventListener(CallEvent_1.CallEvent.NEW_ICE_CANDIDATE, function (data) {\n            _this.dispatchEvent(CallEvent_1.CallEvent.NEW_ICE_CANDIDATE, data);\n        }, this);\n        this.call.addEventListener(CallEvent_1.CallEvent.REMOTE_TEXT_CHAT_MESSAGE, function (data) {\n            _this.onRemoteTextChatMessage(data.message);\n        }, this);\n        this.call.addEventListener(CallEvent_1.CallEvent.STATUS_MESSAGE, function (message) {\n            _this.dispatchEvent(CallEvent_1.CallEvent.STATUS_MESSAGE, message);\n        }, this);\n        this.call.addEventListener(CallEvent_1.CallEvent.ERROR, function (message) {\n            _this.dispatchEvent(CallEvent_1.CallEvent.ERROR, message);\n        }, this);\n        this.call.addEventListener(CallEvent_1.CallEvent.CALLER_STARTED, function (room) {\n            _this.dispatchEvent(CallEvent_1.CallEvent.CALLER_STARTED, room);\n        }, this);\n        this.call.addEventListener(CallEvent_1.CallEvent.LOCAL_VIDEO_MEDIA_CHANGE, function (options) {\n            _this.dispatchEvent(CallEvent_1.CallEvent.LOCAL_VIDEO_MEDIA_CHANGE, options);\n        }, this);\n    };\n    /**\n     * Handles remote hangup signal.\n     *\n     * @private\n     * @param {string} sessionId\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onRemoteHangup = function (sessionId) {\n        this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_HANGUP, sessionId);\n        this.call.onRemoteHangup(sessionId);\n    };\n    /**\n     * Handles remote SPD protocol received.\n     *\n     * @private\n     * @param {*} data\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onRemoteSdpProtocolReceived = function (data) {\n        this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_SDP_PROTOCOL_RECEIVED, data);\n    };\n    /**\n     * Handles remote stream added.\n     *\n     * @private\n     * @param {*} data\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onRemoteStreamAdded = function (data) {\n        this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_STREAM_ADDED, data);\n    };\n    /**\n     * Handles local stream added.\n     *\n     * @private\n     * @param {MediaStream} stream\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onLocalStreamAdded = function (stream) {\n        this.dispatchEvent(CallEvent_1.CallEvent.LOCAL_STREAM_ADDED, stream);\n    };\n    /**\n     * Handles remote text chat message received.\n     *\n     * @private\n     * @param {string} message\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onRemoteTextChatMessage = function (message) {\n        this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_TEXT_CHAT_MESSAGE, message.data);\n    };\n    /**\n     * Handles session initialization from a remtoe peer.\n     *\n     * @private\n     * @param {SessionOptions} sessionOptions\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onRemoteSession = function (sessionOptions) {\n        var sessionInit = new SessionInit_1.SessionInit();\n        sessionInit.addSession(sessionOptions.session);\n        this.startRtcSignaling(sessionInit);\n    };\n    /**\n     * Handles remote peer registered.\n     *\n     * @private\n     * @param {RegisterOptions} registerOptions\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onRemoteClientRegistered = function (registerOptions) {\n        var _this = this;\n        this.call\n            .setSessionOtherClientId(registerOptions)\n            .then(function () {\n            _this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_CLIENT_REGISTERED, registerOptions);\n        })\n            .catch(function () {\n            Log_1.Log.warn(\'Remote client cannot be registered.\');\n        });\n    };\n    /**\n     * Handles error message.\n     *\n     * @private\n     * @param {any} message\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onError = function (message) {\n        this.dispatchEvent(CallEvent_1.CallEvent.ERROR, message);\n    };\n    /**\n     * Resolves response signaling message.\n     *\n     * @private\n     * @param {string} name\n     * @param {string} status\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.resolveResponseSignalingMessage = function (name, body) {\n        switch (name) {\n            case \'register\':\n                this.onRegister(body);\n                break;\n            case \'remoteSession\':\n                this.onRemoteSession(body);\n                break;\n            case \'remoteClientRegistered\':\n                this.onRemoteClientRegistered(body);\n                break;\n        }\n    };\n    /**\n     * Handles goapp register response.\n     *\n     * @private\n     * @param {*} body\n     * @memberof MediaCommunication\n     */\n    MediaCommunication.prototype.onRegister = function (body) {\n        if (StringUtils_1.StringUtils.equals(body.status, \'ok\')) {\n            Log_1.Log.log(\'Client has successfully registered in the Collider service.\');\n        }\n        // this.call.consumeRemoteMessages();\n    };\n    return MediaCommunication;\n}(EventDispatcherService_1.EventDispatcherService));\nexports.MediaCommunication = MediaCommunication;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/controller/MediaCommunication.ts?')},"./ts/com/quickhellou/application/controller/RetryConsumeManager.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.RetryConsumeManager = void 0;\nvar Log_1 = __webpack_require__(/*! ../../../genb/base/utils/Log */ "./ts/com/genb/base/utils/Log.ts");\nvar RetryJobEvent_1 = __webpack_require__(/*! ../events/RetryJobEvent */ "./ts/com/quickhellou/application/events/RetryJobEvent.ts");\nvar FormService_1 = __webpack_require__(/*! ../../../genb/base/services/FormService */ "./ts/com/genb/base/services/FormService.ts");\nvar BaseUtils_1 = __webpack_require__(/*! ../../../genb/base/utils/BaseUtils */ "./ts/com/genb/base/utils/BaseUtils.ts");\nvar RetryConsumeManager = /** @class */ (function (_super) {\n    __extends(RetryConsumeManager, _super);\n    /**\n     * Creates an instance of RetryConsumeManager.\n     *\n     * @param {ColliderService} colliderService\n     * @param {PeerConnectionClient} pcClient\n     * @memberof RetryConsumeManager\n     */\n    function RetryConsumeManager(colliderService, pcClient, roomId, clientId, hostUrl) {\n        var _this = _super.call(this) || this;\n        _this.status = \'__init__\';\n        _this.colliderService = colliderService;\n        _this.pcClient = pcClient;\n        _this.roomId = roomId;\n        _this.clientId = clientId;\n        _this.hostUrl = hostUrl;\n        return _this;\n    }\n    /**\n     * Starts jobs.\n     *\n     * @memberof RetryConsumeManager\n     */\n    RetryConsumeManager.prototype.start = function () {\n        this.status = \'touch\';\n        this.doJob();\n    };\n    /**\n     * Triggers next job.\n     *\n     * @memberof RetryConsumeManager\n     */\n    RetryConsumeManager.prototype.next = function () {\n        this.status = \'consume\';\n    };\n    /**\n     * Requests doing a job.\n     *\n     * @private\n     * @memberof RetryConsumeManager\n     */\n    RetryConsumeManager.prototype.doJob = function () {\n        var _this = this;\n        Log_1.Log.log(\'**** status\', this.status);\n        if (!this.pcClient.requireDataConsume) {\n            return;\n        }\n        if (this.status === \'touch\') {\n            this.touch();\n        }\n        else if (this.status === \'consume\') {\n            this.consume();\n        }\n        if (this.status !== \'complete\') {\n            setTimeout(function () {\n                _this.doJob();\n            }, 3000);\n        }\n    };\n    /**\n     * Request touch in go app.\n     *\n     * @private\n     * @memberof RetryConsumeManager\n     */\n    RetryConsumeManager.prototype.touch = function () {\n        this.colliderService.touch(this.roomId, this.clientId);\n    };\n    /**\n     * Requests consume in py app.\n     *\n     * @private\n     * @memberof RetryConsumeManager\n     */\n    RetryConsumeManager.prototype.consume = function () {\n        var _this = this;\n        this.post(this.hostUrl + "/consume/" + this.roomId + "/" + this.pcClient.getSessionId() + "/" + this.clientId).then(function (result) {\n            if (!result) {\n                return;\n            }\n            var resultJson = JSON.parse(result);\n            var messages = resultJson.messages;\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(messages)) {\n                return;\n            }\n            messages.forEach(function (message) {\n                _this.pcClient.receiveSignalingMessage(message);\n            });\n            if (messages.length > 0) {\n                _this.pcClient.requireDataConsume = false;\n                _this.status = \'complete\';\n                _this.dispatchEvent(RetryJobEvent_1.RetryJobEvent.COMPLETE);\n            }\n        });\n    };\n    return RetryConsumeManager;\n}(FormService_1.FormService));\nexports.RetryConsumeManager = RetryConsumeManager;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/controller/RetryConsumeManager.ts?')},"./ts/com/quickhellou/application/controller/ScreenShareButtonComponent.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ScreenShareButtonComponent = void 0;\nvar HtmlComponent_1 = __webpack_require__(/*! ../../../../com/genb/base/components/HtmlComponent */ "./ts/com/genb/base/components/HtmlComponent.ts");\nvar HTMLUtils_1 = __webpack_require__(/*! ../../../../com/genb/base/utils/HTMLUtils */ "./ts/com/genb/base/utils/HTMLUtils.ts");\nvar ShareScreenEvent_1 = __webpack_require__(/*! ../model/ShareScreenEvent */ "./ts/com/quickhellou/application/model/ShareScreenEvent.ts");\nvar ScreenShareButtonComponent = /** @class */ (function (_super) {\n    __extends(ScreenShareButtonComponent, _super);\n    function ScreenShareButtonComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.isSharingEnabled = false;\n        return _this;\n    }\n    /**\n     * Initializes the component.\n     *\n     * @memberof ScreenShareButtonComponent\n     */\n    ScreenShareButtonComponent.prototype.init = function () {\n        this.setupUIEvents();\n    };\n    /**\n     * Setups UI events.\n     *\n     * @private\n     * @memberof ScreenShareButtonComponent\n     */\n    ScreenShareButtonComponent.prototype.setupUIEvents = function () {\n        var _this = this;\n        this.element.addEventListener("click", function () {\n            _this.dispatchScreenSharingEvent();\n        });\n    };\n    /**\n     * Toggles screen sharing.\n     *\n     * @private\n     * @memberof ScreenShareButtonComponent\n     */\n    ScreenShareButtonComponent.prototype.dispatchScreenSharingEvent = function () {\n        if (this.isSharingEnabled) {\n            this.dispatchEvent(ShareScreenEvent_1.ShareScreenEvent.START_SHARING);\n            //this.lock();\n            this.setStopSharingLabel();\n        }\n        else {\n            this.dispatchEvent(ShareScreenEvent_1.ShareScreenEvent.STOP_SHARING);\n            this.setStartSharingLabel();\n        }\n    };\n    /**\n     *\n     * @public\n     * @param {boolean} isSharingEnabled\n     * @memberof ScreenShareButtonComponent\n     */\n    ScreenShareButtonComponent.prototype.toggleScreenSharingWithFlag = function (isSharingEnabled) {\n        if (this.isSharingEnabled) {\n            this.setStopSharingLabel();\n        }\n        else {\n            this.setStartSharingLabel();\n        }\n        this.isSharingEnabled = !isSharingEnabled;\n    };\n    /**\n     * Enables component.\n     *\n     * @public\n     * @memberof ScreenShareButtonComponent\n     */\n    ScreenShareButtonComponent.prototype.enableSharingState = function () {\n        this.isSharingEnabled = true;\n        _super.prototype.enable.call(this);\n        this.setStartSharingLabel();\n    };\n    /**\n     * Disables components.\n     *\n     * @public\n     * @memberof ScreenShareButtonComponent\n     */\n    ScreenShareButtonComponent.prototype.disableSharingState = function () {\n        this.isSharingEnabled = false;\n        _super.prototype.disable.call(this);\n        this.setStopSharingLabel();\n    };\n    /**\n     * Locks the button.\n     *\n     * @public\n     * @memberof ScreenShareButtonComponent\n     */\n    ScreenShareButtonComponent.prototype.lock = function () {\n        this.element.classList.add("js-locked");\n    };\n    /**\n     * Unlocks the button.\n     *\n     * @memberof ScreenShareButtonComponent\n     */\n    ScreenShareButtonComponent.prototype.unlock = function () {\n        this.element.classList.remove("js-locked");\n    };\n    /**\n     * Sets label as start sharing.\n     *\n     * @public\n     * @memberof ScreenShareButtonComponent\n     */\n    ScreenShareButtonComponent.prototype.setStartSharingLabel = function () {\n        var labelElement = HTMLUtils_1.HTMLUtils.get(".button--share-screen__label");\n        labelElement.innerHTML = "Share Screen";\n    };\n    /**\n     * Sets label as stop sharing.\n     *\n     * @private\n     * @memberof ScreenShareButtonComponent\n     */\n    ScreenShareButtonComponent.prototype.setStopSharingLabel = function () {\n        var labelElement = HTMLUtils_1.HTMLUtils.get(".button--share-screen__label");\n        labelElement.innerHTML = "Stop Sharing Screen";\n    };\n    return ScreenShareButtonComponent;\n}(HtmlComponent_1.HTMLComponent));\nexports.ScreenShareButtonComponent = ScreenShareButtonComponent;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/controller/ScreenShareButtonComponent.ts?')},"./ts/com/quickhellou/application/controller/StatsMonitor.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.StatsMonitor = void 0;\nvar EventDispatcherService_1 = __webpack_require__(/*! ../../../genb/base/services/EventDispatcherService */ "./ts/com/genb/base/services/EventDispatcherService.ts");\nvar Log_1 = __webpack_require__(/*! ../../../genb/base/utils/Log */ "./ts/com/genb/base/utils/Log.ts");\nvar MovingAverage_1 = __webpack_require__(/*! ../utils/MovingAverage */ "./ts/com/quickhellou/application/utils/MovingAverage.ts");\nvar BandwidthLevelUpdateEvent_1 = __webpack_require__(/*! ../events/BandwidthLevelUpdateEvent */ "./ts/com/quickhellou/application/events/BandwidthLevelUpdateEvent.ts");\nvar BandwidthLevel_1 = __webpack_require__(/*! ../model/BandwidthLevel */ "./ts/com/quickhellou/application/model/BandwidthLevel.ts");\n/**\n * Bandwidth monitor for a peer connection.\n *\n * @export\n * @class StatsMonitor\n * @extends {EventDispatcherService}\n */\nvar StatsMonitor = /** @class */ (function (_super) {\n    __extends(StatsMonitor, _super);\n    /**\n     * Creates an instance of StatsMonitor.\n     *\n     * @param {RTCPeerConnection} peerConnection\n     * @memberof StatsMonitor\n     */\n    function StatsMonitor(peerConnection) {\n        var _this = _super.call(this) || this;\n        _this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n        _this.getStatsResult = {\n            audio: {\n                send: {\n                    tracks: [],\n                    availableBandwidth: 0,\n                    streams: 0,\n                    framerateMean: 0,\n                    bitrateMean: 0,\n                },\n                recv: {\n                    tracks: [],\n                    availableBandwidth: 0,\n                    streams: 0,\n                    framerateMean: 0,\n                    bitrateMean: 0,\n                },\n                bytesSent: 0,\n                bytesReceived: 0,\n                packetsLost: 0,\n            },\n            video: {\n                send: {\n                    tracks: [],\n                    availableBandwidth: 0,\n                    availableBandwidthMA: 0,\n                    streams: 0,\n                    framerateMean: 0,\n                    bitrateMean: 0,\n                },\n                recv: {\n                    tracks: [],\n                    availableBandwidth: 0,\n                    availableBandwidthMA: 0,\n                    streams: 0,\n                    framerateMean: 0,\n                    bitrateMean: 0,\n                },\n                bytesSent: 0,\n                bytesReceived: 0,\n                packetsLost: 0,\n            },\n            bandwidth: {\n                availableOutgoingBitrate: 0,\n                availableIncomingBitrate: 0,\n                actualEncBitrate: 0,\n                helper: {\n                    audioBytesSent: 0,\n                    videoBytestSent: 0,\n                },\n                speed: 0,\n            },\n            results: {},\n            resolutions: {\n                send: {\n                    width: 0,\n                    height: 0,\n                },\n                recv: {\n                    width: 0,\n                    height: 0,\n                },\n            },\n            framesPerSecond: 0,\n            internal: {\n                audio: {\n                    send: {},\n                    recv: {},\n                },\n                video: {\n                    send: {\n                        prevBytesSent: 0,\n                        prevFramerateMean: 0,\n                        prevBitrateMean: 0,\n                        ema: 0,\n                    },\n                    recv: {\n                        prevBytesReceived: 0,\n                    },\n                },\n            },\n        };\n        _this.peerConnection = peerConnection;\n        _this.inboundBandwidthMA = new MovingAverage_1.MovingAverage(5);\n        _this.outboundBandwidthMA = new MovingAverage_1.MovingAverage(5);\n        _this.inboundBandwidthLevel = BandwidthLevel_1.BandwidthLevel.HIGH;\n        _this.outboundBandwidthLevel = BandwidthLevel_1.BandwidthLevel.HIGH;\n        return _this;\n    }\n    /**\n     * Runs the monitor.\n     *\n     * @memberof StatsMonitor\n     */\n    StatsMonitor.prototype.run = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.monitorInterval = window.setInterval(function () {\n                _this.monitorCycle();\n            }, 1000);\n        }, 10000);\n    };\n    /**\n     * Stops monitoring.\n     *\n     * @public\n     * @memberof StatsMonitor\n     */\n    StatsMonitor.prototype.stop = function () {\n        window.clearInterval(this.monitorInterval);\n    };\n    /**\n     * Handles monitor cycle.\n     *\n     * @private\n     * @returns {void}\n     * @memberof StatsMonitor\n     */\n    StatsMonitor.prototype.monitorCycle = function () {\n        var _this = this;\n        if (!this.peerConnection) {\n            Log_1.Log.log("No peer connection. Stopping monitor.");\n            this.stop();\n            return;\n        }\n        this.peerConnection.getStats().then(function (report) {\n            var reportResults = [];\n            report.forEach(function (reportResult) {\n                reportResults.push(reportResult);\n            });\n            _this.processReportResults(reportResults);\n        });\n        this.getBandwidth();\n        this.distributeBandwidthEvents(this.getStatsResult.video);\n    };\n    /**\n     * Distriutes bandwidth events.\n     *\n     * @private\n     * @param {*} videoResult\n     * @memberof StatsMonitor\n     */\n    StatsMonitor.prototype.distributeBandwidthEvents = function (videoResult) {\n        var outboundBandwidth = videoResult.send.availableBandwidthMA;\n        /*if (this.getStatsResult.video.send.framerateMean < 20) {\n          this.dispatchEvent(BandwidthLevelUpdateEvent.INBOUND_LEVEL_CHANGE, {\n            level: BandwidthLevel.LOW,\n          });\n          return;\n        }*/\n        if (BandwidthLevel_1.BandwidthLevel.isLow(outboundBandwidth) &&\n            this.outboundBandwidthLevel !== BandwidthLevel_1.BandwidthLevel.LOW) {\n            this.outboundBandwidthLevel = BandwidthLevel_1.BandwidthLevel.LOW;\n            this.dispatchEvent(BandwidthLevelUpdateEvent_1.BandwidthLevelUpdateEvent.OUTBOUND_LEVEL_CHANGE, {\n                level: BandwidthLevel_1.BandwidthLevel.LOW,\n            });\n        }\n        if (BandwidthLevel_1.BandwidthLevel.isMedium(outboundBandwidth) &&\n            this.outboundBandwidthLevel !== BandwidthLevel_1.BandwidthLevel.MEDIUM) {\n            this.outboundBandwidthLevel = BandwidthLevel_1.BandwidthLevel.MEDIUM;\n            this.dispatchEvent(BandwidthLevelUpdateEvent_1.BandwidthLevelUpdateEvent.OUTBOUND_LEVEL_CHANGE, {\n                level: BandwidthLevel_1.BandwidthLevel.MEDIUM,\n            });\n        }\n        if (BandwidthLevel_1.BandwidthLevel.isHigh(outboundBandwidth) &&\n            this.outboundBandwidthLevel !== BandwidthLevel_1.BandwidthLevel.HIGH) {\n            this.outboundBandwidthLevel = BandwidthLevel_1.BandwidthLevel.HIGH;\n            this.dispatchEvent(BandwidthLevelUpdateEvent_1.BandwidthLevelUpdateEvent.OUTBOUND_LEVEL_CHANGE, {\n                level: BandwidthLevel_1.BandwidthLevel.HIGH,\n            });\n        }\n    };\n    /**\n     * Handles report elements.\n     *\n     * @private\n     * @param {any[]} reportResults\n     * @returns\n     * @memberof StatsMonitor\n     */\n    StatsMonitor.prototype.processReportResults = function (reportResults) {\n        var _this = this;\n        if (!reportResults || !reportResults.forEach) {\n            return;\n        }\n        reportResults.forEach(function (result) {\n            _this.processReportResult(result);\n        });\n    };\n    /**\n     * Handles report element.\n     *\n     * @private\n     * @param {*} result\n     * @memberof StatsMonitor\n     */\n    StatsMonitor.prototype.processReportResult = function (result) {\n        this.checkAudio(result);\n        this.checkVideo(result);\n    };\n    /**\n     * Checks audio report data.\n     *\n     * @private\n     * @param {*} result\n     * @returns\n     * @memberof StatsMonitor\n     */\n    StatsMonitor.prototype.checkAudio = function (result) {\n        if ((!!result.mediaType && result.mediaType !== "audio") ||\n            (!!result.kind && result.kind !== "audio")) {\n            return;\n        }\n        var sendrecvType;\n        if (result.isRemote === true || result.bytesReceived !== undefined) {\n            sendrecvType = "recv";\n        }\n        if (result.isRemote === false || result.bytesSent !== undefined) {\n            sendrecvType = "send";\n        }\n        if (!sendrecvType) {\n            return;\n        }\n        if (!!result.bytesSent) {\n            var kilobytes = 0;\n            if (!this.getStatsResult.internal.audio[sendrecvType].prevBytesSent) {\n                this.getStatsResult.internal.audio[sendrecvType].prevBytesSent =\n                    result.bytesSent;\n            }\n            var bytes = result.bytesSent -\n                this.getStatsResult.internal.audio[sendrecvType].prevBytesSent;\n            this.getStatsResult.internal.audio[sendrecvType].prevBytesSent =\n                result.bytesSent;\n            kilobytes = bytes / 1024;\n            this.getStatsResult.audio[sendrecvType].availableBandwidth = kilobytes.toFixed(1);\n            this.getStatsResult.audio.bytesSent = kilobytes.toFixed(1);\n        }\n        if (!!result.bytesReceived) {\n            var kilobytes = 0;\n            if (!this.getStatsResult.internal.audio[sendrecvType].prevBytesReceived) {\n                this.getStatsResult.internal.audio[sendrecvType].prevBytesReceived =\n                    result.bytesReceived;\n            }\n            var bytes = result.bytesReceived -\n                this.getStatsResult.internal.audio[sendrecvType].prevBytesReceived;\n            this.getStatsResult.internal.audio[sendrecvType].prevBytesReceived =\n                result.bytesReceived;\n            kilobytes = bytes / 1024;\n            this.getStatsResult.audio.bytesReceived = kilobytes.toFixed(1);\n        }\n        // calculate packetsLost\n        if (!!result.packetsLost) {\n            if (!this.getStatsResult.internal.audio.prevPacketsLost) {\n                this.getStatsResult.internal.audio.prevPacketsLost = result.packetsLost;\n            }\n            var bytes = result.packetsLost - this.getStatsResult.internal.audio.prevPacketsLost;\n            this.getStatsResult.internal.audio.prevPacketsLost = result.packetsLost;\n            this.getStatsResult.audio.packetsLost = bytes.toFixed(1);\n            if (this.getStatsResult.audio.packetsLost < 0) {\n                this.getStatsResult.audio.packetsLost = 0;\n            }\n        }\n    };\n    /**\n     * Checks video report data.\n     *\n     * @private\n     * @param {*} result\n     * @returns\n     * @memberof StatsMonitor\n     */\n    StatsMonitor.prototype.checkVideo = function (result) {\n        if ((!!result.mediaType && result.mediaType !== "video") ||\n            (!!result.kind && result.kind !== "video")) {\n            return;\n        }\n        var sendrecvType = result.id.split("_").pop();\n        if (result.isRemote === true || result.bytesReceived !== undefined) {\n            sendrecvType = "recv";\n        }\n        if (result.isRemote === false || result.bytesSent !== undefined) {\n            sendrecvType = "send";\n        }\n        if (!sendrecvType) {\n            return;\n        }\n        this.getTrack(result);\n        this.getMediaSource(result);\n        this.getDataSentReceived(result);\n        this.getInboundRtp(result);\n        this.getOutboundRtp(result);\n    };\n    /**\n     * Statistics for the media produced by a MediaStreamTrack\n     * that is currently attached to an RTCRtpSender.\n     *\n     * @private\n     * @param {*} result\n     * @returns {void}\n     * @memberof StatsMonitor\n     */\n    StatsMonitor.prototype.getMediaSource = function (result) {\n        if (result.type !== "media-source") {\n            return;\n        }\n        this.getStatsResult.framesPerSecond = result.framesPerSecond;\n    };\n    /**\n     * Statistics related to a specific MediaStreamTrack\'s attachment to\n     * an RTCRtpSender and the corresponding media-level metrics.\n     *\n     * @private\n     * @param {*} result\n     * @returns {void}\n     * @memberof StatsMonitor\n     */\n    StatsMonitor.prototype.getTrack = function (result) {\n        if (result.type !== "track") {\n            return;\n        }\n        var sendrecvType = result.remoteSource === true ? "send" : "recv";\n        if (result.frameWidth && result.frameHeight) {\n            this.getStatsResult.resolutions[sendrecvType].width = result.frameWidth;\n            this.getStatsResult.resolutions[sendrecvType].height = result.frameHeight;\n        }\n    };\n    /**\n     * Statistics for an inbound RTP stream that is currently received with\n     * this RTCPeerConnection object.\n     *\n     * @private\n     * @param {*} result\n     * @returns\n     * @memberof StatsMonitor\n     */\n    StatsMonitor.prototype.getInboundRtp = function (result) {\n        if (result.type !== "inbound-rtp") {\n            return;\n        }\n        var mediaType = result.mediaType || "audio";\n        if (!!result.bytesReceived) {\n            var bytesReceived = result.bytesReceived;\n            var bytes = bytesReceived -\n                this.getStatsResult.internal[mediaType].recv.prevBytesReceived;\n            var kilobytes = bytes / 1024;\n            this.getStatsResult[mediaType].recv.availableBandwidth = kilobytes.toFixed(1);\n            this.getStatsResult[mediaType].recv.availableBandwidthMA = this.inboundBandwidthMA.update(kilobytes);\n            this.getStatsResult.internal[mediaType].recv.prevBytesReceived = bytesReceived;\n            this.getStatsResult[mediaType].bytesReceived = kilobytes.toFixed(1);\n        }\n    };\n    /**\n     * Statistics for an outbound RTP stream that is currently sent with\n     * this RTCPeerConnection object.\n     *\n     * @private\n     * @param {*} result\n     * @returns\n     * @memberof StatsMonitor\n     */\n    StatsMonitor.prototype.getOutboundRtp = function (result) {\n        if (result.type !== "outbound-rtp") {\n            return;\n        }\n        var mediaType = result.mediaType || "audio";\n        var sendrecvType = result.isRemote ? "recv" : "send";\n        if (!sendrecvType) {\n            return;\n        }\n        if (!!result.bytesSent) {\n            var bytesSent = result.bytesSent;\n            var bytes = bytesSent - this.getStatsResult.internal[mediaType].send.prevBytesSent;\n            var kilobytes = bytes / 1024;\n            this.getStatsResult[mediaType].send.availableBandwidth = kilobytes.toFixed(1);\n            this.getStatsResult[mediaType].send.availableBandwidthMA = this.outboundBandwidthMA.update(kilobytes);\n            this.getStatsResult.internal[mediaType].send.prevBytesSent = bytesSent;\n            this.getStatsResult[mediaType].bytesSent = kilobytes.toFixed(1);\n            if (!!result.retransmittedBytesSent) {\n                this.getStatsResult.bandwidth.actualEncBitrate =\n                    result.bytesSent - result.retransmittedBytesSent;\n            }\n        }\n        if (!!result.bytesReceived) {\n            var kilobytes = 0;\n            if (!this.getStatsResult.internal[mediaType][sendrecvType].prevBytesReceived) {\n                this.getStatsResult.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;\n            }\n            var bytes = result.bytesReceived -\n                this.getStatsResult.internal[mediaType][sendrecvType].prevBytesReceived;\n            this.getStatsResult.internal[mediaType][sendrecvType].prevBytesReceived =\n                result.bytesReceived;\n            kilobytes = bytes / 1024;\n            this.getStatsResult[mediaType].bytesReceived = kilobytes.toFixed(1);\n        }\n    };\n    StatsMonitor.prototype.getDataSentReceived = function (result) {\n        if (result.mediaType !== "video" && result.mediaType !== "audio") {\n            return;\n        }\n        if (!!result.bytesSent) {\n            this.getStatsResult[result.mediaType].bytesSent = Number(result.bytesSent);\n        }\n        if (!!result.bytesReceived) {\n            this.getStatsResult[result.mediaType].bytesReceived = Number(result.bytesReceived);\n        }\n    };\n    /**\n     * Calculates bandwidth.\n     *\n     * @private\n     * @memberof StatsMonitor\n     */\n    StatsMonitor.prototype.getBandwidth = function () {\n        if (this.getStatsResult.audio && this.getStatsResult.video) {\n            this.getStatsResult.bandwidth.speed =\n                this.getStatsResult.audio.bytesSent -\n                    this.getStatsResult.bandwidth.helper.audioBytesSent +\n                    (this.getStatsResult.video.bytesSent -\n                        this.getStatsResult.bandwidth.helper.videoBytesSent);\n            this.getStatsResult.bandwidth.helper.audioBytesSent = this.getStatsResult.audio.bytesSent;\n            this.getStatsResult.bandwidth.helper.videoBytesSent = this.getStatsResult.video.bytesSent;\n        }\n    };\n    return StatsMonitor;\n}(EventDispatcherService_1.EventDispatcherService));\nexports.StatsMonitor = StatsMonitor;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/controller/StatsMonitor.ts?')},"./ts/com/quickhellou/application/events/BandwidthLevelUpdateEvent.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.BandwidthLevelUpdateEvent = void 0;\n/**\n * Bandwidth event.\n *\n * @export\n * @class BandwidthLevelUpdateEvent\n */\nvar BandwidthLevelUpdateEvent = /** @class */ (function () {\n    function BandwidthLevelUpdateEvent() {\n    }\n    BandwidthLevelUpdateEvent.INBOUND_LEVEL_CHANGE = "inbound_level_change";\n    BandwidthLevelUpdateEvent.OUTBOUND_LEVEL_CHANGE = "outbound_level_change";\n    return BandwidthLevelUpdateEvent;\n}());\nexports.BandwidthLevelUpdateEvent = BandwidthLevelUpdateEvent;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/events/BandwidthLevelUpdateEvent.ts?')},"./ts/com/quickhellou/application/events/RetryJobEvent.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.RetryJobEvent = void 0;\nvar RetryJobEvent = /** @class */ (function () {\n    function RetryJobEvent() {\n    }\n    RetryJobEvent.COMPLETE = "complete";\n    return RetryJobEvent;\n}());\nexports.RetryJobEvent = RetryJobEvent;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/events/RetryJobEvent.ts?')},"./ts/com/quickhellou/application/model/BandwidthLevel.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.BandwidthLevel = void 0;\n/**\n * Bandwidth level.\n *\n * @export\n * @class BandwidthLevel\n */\nvar BandwidthLevel = /** @class */ (function () {\n    function BandwidthLevel() {\n    }\n    /**\n     * Checks if a bitrate is in the lower range.\n     *\n     * @static\n     * @param {number} bitrate\n     * @returns {boolean}\n     * @memberof BandwidthLevel\n     */\n    BandwidthLevel.isLow = function (bitrate) {\n        return bitrate > 0 && bitrate < BandwidthLevel.LOW_BITRATE;\n    };\n    /**\n     * Checks if a bitrate is in the medium range.\n     *\n     * @static\n     * @param {number} bitrate\n     * @returns {boolean}\n     * @memberof BandwidthLevel\n     */\n    BandwidthLevel.isMedium = function (bitrate) {\n        return (bitrate > BandwidthLevel.LOW_BITRATE &&\n            bitrate < BandwidthLevel.HIGH_BITRATE);\n    };\n    /**\n     * Checks if a bitrate is in the higher range.\n     *\n     * @static\n     * @param {number} bitrate\n     * @returns {boolean}\n     * @memberof BandwidthLevel\n     */\n    BandwidthLevel.isHigh = function (bitrate) {\n        return bitrate >= BandwidthLevel.HIGH_BITRATE;\n    };\n    /**\n     * Gets a bitrate to adjust stream.\n     *\n     * @static\n     * @param {string} level\n     * @returns {string}\n     * @memberof BandwidthLevel\n     */\n    BandwidthLevel.getBitrate = function (level) {\n        if (level === BandwidthLevel.LOW) {\n            return "30";\n        }\n        if (level === BandwidthLevel.MEDIUM) {\n            return "150";\n        }\n        if (level === BandwidthLevel.HIGH) {\n            return "unlimited";\n        }\n    };\n    BandwidthLevel.LOW = "low";\n    BandwidthLevel.MEDIUM = "medium";\n    BandwidthLevel.HIGH = "high";\n    BandwidthLevel.LOW_BITRATE = 50;\n    BandwidthLevel.HIGH_BITRATE = 150;\n    return BandwidthLevel;\n}());\nexports.BandwidthLevel = BandwidthLevel;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/BandwidthLevel.ts?')},"./ts/com/quickhellou/application/model/ColliderServiceEvent.ts":(__unused_webpack_module,exports)=>{"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ColliderServiceEvent = void 0;\nvar ColliderServiceEvent = /** @class */ (function () {\n    function ColliderServiceEvent() {\n    }\n    ColliderServiceEvent.CLOSE = 'close';\n    ColliderServiceEvent.DESTROY = 'destroy';\n    ColliderServiceEvent.MESSAGE = 'message';\n    return ColliderServiceEvent;\n}());\nexports.ColliderServiceEvent = ColliderServiceEvent;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/ColliderServiceEvent.ts?")},"./ts/com/quickhellou/application/model/MediaEvent.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.MediaEvent = void 0;\nvar MediaEvent = /** @class */ (function () {\n    function MediaEvent() {\n    }\n    MediaEvent.DISPLAY_MEDIA_DISPLAYED = "display_media_displayed";\n    MediaEvent.DISPLAY_MEDIA_CLOSED = "display_media_closed";\n    return MediaEvent;\n}());\nexports.MediaEvent = MediaEvent;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/MediaEvent.ts?')},"./ts/com/quickhellou/application/model/PeerConnectionIdentity.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.PeerConnectionIdentity = void 0;\n/**\n * Peer connection identity object.\n *\n * @export\n * @class PeerConnectionIdentity\n */\nvar PeerConnectionIdentity = /** @class */ (function () {\n    function PeerConnectionIdentity() {\n    }\n    return PeerConnectionIdentity;\n}());\nexports.PeerConnectionIdentity = PeerConnectionIdentity;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/PeerConnectionIdentity.ts?')},"./ts/com/quickhellou/application/model/PeerConnectionResponseType.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.PeerConnectionResponseType = void 0;\nvar StringUtils_1 = __webpack_require__(/*! ../../../genb/base/utils/StringUtils */ "./ts/com/genb/base/utils/StringUtils.ts");\nvar Util_1 = __webpack_require__(/*! ../../Util */ "./ts/com/quickhellou/Util.ts");\n/**\n * Peer connection response types.\n *\n * @export\n * @class PeerConnectionResponseType\n */\nvar PeerConnectionResponseType = /** @class */ (function () {\n    function PeerConnectionResponseType() {\n    }\n    PeerConnectionResponseType.isType = function (type, otherType) {\n        return StringUtils_1.StringUtils.equals(type, otherType);\n    };\n    PeerConnectionResponseType.isResponse = function (type) {\n        return this.isType(this.RESPONSE, type);\n    };\n    PeerConnectionResponseType.isAnswer = function (type) {\n        return this.isType(this.ANSWER, type);\n    };\n    PeerConnectionResponseType.isOffer = function (type) {\n        return this.isType(this.OFFER, type);\n    };\n    PeerConnectionResponseType.isCandidate = function (type) {\n        return this.isType(this.CANDIDATE, type);\n    };\n    PeerConnectionResponseType.isBye = function (type) {\n        return this.isType(this.BYE, type);\n    };\n    PeerConnectionResponseType.isTextChatMessage = function (messageJson) {\n        if (this.isType(this.BROADCAST, messageJson.type)) {\n            var bodyJson = Util_1.Util.parseJSON(messageJson.body);\n            return this.isType(this.TEXT_CHAT_MESSAGE, bodyJson.type);\n        }\n        return false;\n    };\n    PeerConnectionResponseType.isRemoteIceComplete = function (type) {\n        return this.isType(this.REMOTE_ICE_COMPLETE, type);\n    };\n    /**\n     * Checks if response is a ping type call.\n     *\n     * @static\n     * @param {string} type\n     * @returns {boolean}\n     * @memberof PeerConnectionResponseType\n     */\n    PeerConnectionResponseType.isPing = function (type) {\n        return this.isType(this.PING, type);\n    };\n    PeerConnectionResponseType.isUnreachableClient = function (type) {\n        return this.isType(this.UNREACHABLE_CLIENT, type);\n    };\n    PeerConnectionResponseType.RESPONSE = "response";\n    PeerConnectionResponseType.ANSWER = "answer";\n    PeerConnectionResponseType.OFFER = "offer";\n    PeerConnectionResponseType.CANDIDATE = "candidate";\n    PeerConnectionResponseType.BROADCAST = "broadcast";\n    PeerConnectionResponseType.TEXT_CHAT_MESSAGE = "text-chat-message";\n    PeerConnectionResponseType.BYE = "bye";\n    PeerConnectionResponseType.PING = "ping";\n    PeerConnectionResponseType.UNREACHABLE_CLIENT = "unreachable_client";\n    PeerConnectionResponseType.REMOTE_ICE_COMPLETE = "remote_ice_complete";\n    return PeerConnectionResponseType;\n}());\nexports.PeerConnectionResponseType = PeerConnectionResponseType;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/PeerConnectionResponseType.ts?')},"./ts/com/quickhellou/application/model/RegisterOptions.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.RegisterOptions = void 0;\n/**\n * Peer registration data.\n *\n * @export\n * @class RegisterOptions\n */\nvar RegisterOptions = /** @class */ (function () {\n    function RegisterOptions() {\n        this.name = "remoteClientRegistered";\n    }\n    return RegisterOptions;\n}());\nexports.RegisterOptions = RegisterOptions;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/RegisterOptions.ts?')},"./ts/com/quickhellou/application/model/RemoteVideosEvent.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.RemoteVideosEvent = void 0;\nvar RemoteVideosEvent = /** @class */ (function () {\n    function RemoteVideosEvent() {\n    }\n    RemoteVideosEvent.REMOTE_VIDEO_ADDED = "remote_video_added";\n    RemoteVideosEvent.REMOTE_VIDEO_REMOVED = "remote_video_removed";\n    RemoteVideosEvent.ADD_STREAM_SUCCESS = "add_stream_success";\n    RemoteVideosEvent.ADD_STREAM_FAILURE = "add_stream_failure";\n    return RemoteVideosEvent;\n}());\nexports.RemoteVideosEvent = RemoteVideosEvent;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/RemoteVideosEvent.ts?')},"./ts/com/quickhellou/application/model/Room.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Room = void 0;\n/**\n * Room data object.\n *\n * @export\n * @class Room\n */\nvar Room = /** @class */ (function () {\n    /**\n     * Creates an instance of Room.\n     *\n     * @param {string} id\n     * @param {string} link\n     * @memberof Room\n     */\n    function Room(id, link) {\n        if (id === void 0) { id = null; }\n        if (link === void 0) { link = null; }\n        this.id = id;\n        this.link = link;\n    }\n    return Room;\n}());\nexports.Room = Room;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/Room.ts?')},"./ts/com/quickhellou/application/model/RtcSession.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.RtcSession = void 0;\n/**\n * RTC connection session data.\n *\n * @export\n * @class RtcSession\n */\nvar RtcSession = /** @class */ (function () {\n    /**\n     * Creates an instance of RtcSession.\n     *\n     * @param {string} id\n     * @param {*} messages\n     * @param {string} otherClientId\n     * @param {boolean} isInitiator\n     * @param {boolean} isForward\n     * @memberof RtcSession\n     */\n    function RtcSession(id, messages, otherClientId, isInitiator, isForward) {\n        if (isInitiator === void 0) { isInitiator = false; }\n        if (isForward === void 0) { isForward = false; }\n        this.id = id;\n        this.messages = messages;\n        this.otherClientId = otherClientId;\n        this.isInitiator = isInitiator;\n        this.isForward = isForward;\n    }\n    return RtcSession;\n}());\nexports.RtcSession = RtcSession;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/RtcSession.ts?')},"./ts/com/quickhellou/application/model/SessionInit.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.SessionInit = void 0;\n/**\n * RTC connection sessions intitlization data.\n *\n * @export\n * @class SessionInit\n */\nvar SessionInit = /** @class */ (function () {\n    /**\n     * Creates an instance of SessionInit.\n     *\n     * @memberof SessionInit\n     */\n    function SessionInit() {\n        this.sessions = [];\n    }\n    /**\n     * Adds a session.\n     *\n     * @param {RtcSession} session\n     * @memberof SessionInit\n     */\n    SessionInit.prototype.addSession = function (session) {\n        this.sessions.push(session);\n    };\n    return SessionInit;\n}());\nexports.SessionInit = SessionInit;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/SessionInit.ts?')},"./ts/com/quickhellou/application/model/SessionOptions.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.SessionOptions = void 0;\nvar SessionOptions = /** @class */ (function () {\n    function SessionOptions() {\n        this.name = "remoteSession";\n    }\n    return SessionOptions;\n}());\nexports.SessionOptions = SessionOptions;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/SessionOptions.ts?')},"./ts/com/quickhellou/application/model/ShareScreenEvent.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ShareScreenEvent = void 0;\nvar ShareScreenEvent = /** @class */ (function () {\n    function ShareScreenEvent() {\n    }\n    ShareScreenEvent.START_SHARING = "start_sharing";\n    ShareScreenEvent.STOP_SHARING = "stop_sharing";\n    ShareScreenEvent.NOT_ALLOWED = "not_allowed";\n    return ShareScreenEvent;\n}());\nexports.ShareScreenEvent = ShareScreenEvent;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/ShareScreenEvent.ts?')},"./ts/com/quickhellou/application/model/VideoTrackEventOptions.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.VideoTrackEventOptions = void 0;\n/**\n * Data for video track update event.\n *\n * @export\n * @class VideoTrackEventOptions\n */\nvar VideoTrackEventOptions = /** @class */ (function () {\n    /**\n     * Creates an instance of VideoTrackEventOptions.\n     *\n     * @param {MediaStreamTrack} track\n     * @param {string} [type=LocalVideoTrackEventOptions.CAMERA]\n     * @memberof VideoTrackEventOptions\n     */\n    function VideoTrackEventOptions(track, type) {\n        if (type === void 0) { type = VideoTrackEventOptions.CAMERA; }\n        this.track = track;\n        this.type = type;\n    }\n    VideoTrackEventOptions.CAMERA = "camera";\n    VideoTrackEventOptions.SCREEN_CAPTURE = "screen_capture";\n    return VideoTrackEventOptions;\n}());\nexports.VideoTrackEventOptions = VideoTrackEventOptions;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/VideoTrackEventOptions.ts?')},"./ts/com/quickhellou/application/service/ColliderService.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ColliderService = void 0;\nvar Util_1 = __webpack_require__(/*! ../../Util */ \"./ts/com/quickhellou/Util.ts\");\nvar ColliderServiceEvent_1 = __webpack_require__(/*! ../model/ColliderServiceEvent */ \"./ts/com/quickhellou/application/model/ColliderServiceEvent.ts\");\nvar FormService_1 = __webpack_require__(/*! ../../../genb/base/services/FormService */ \"./ts/com/genb/base/services/FormService.ts\");\nvar Log_1 = __webpack_require__(/*! ../../../genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\nvar BaseUtils_1 = __webpack_require__(/*! ../../../genb/base/utils/BaseUtils */ \"./ts/com/genb/base/utils/BaseUtils.ts\");\nvar StringUtils_1 = __webpack_require__(/*! ../../../genb/base/utils/StringUtils */ \"./ts/com/genb/base/utils/StringUtils.ts\");\n/**\n * Signaling channel WebSocket facade.\n * Handles communication with the Collider service.\n *\n * @export\n * @class ColliderService\n * @extends {EventDispatcherService}\n */\nvar ColliderService = /** @class */ (function (_super) {\n    __extends(ColliderService, _super);\n    /**\n     * Creates an instance of ColliderService.\n     *\n     * @private\n     * @param {string} [wssUrl]\n     * @param {string} [wssPostUrl]\n     * @memberof ColliderService\n     */\n    function ColliderService(wssUrl, wssPostUrl) {\n        var _this = _super.call(this) || this;\n        _this.isSet = false;\n        _this.registered = false;\n        _this.ROOM_TYPE = 'room';\n        if (BaseUtils_1.BaseUtils.isObjectDefined(wssUrl)) {\n            _this.wssUrl = wssUrl;\n        }\n        if (BaseUtils_1.BaseUtils.isObjectDefined(wssPostUrl)) {\n            _this.wssPostUrl = wssPostUrl;\n        }\n        return _this;\n    }\n    /**\n     * Setups an instance.\n     *\n     * @static\n     * @param {string} wssUrl the WebSocket URL\n     * @param {string} wssPostUrl th WebSocket POST URL\n     * @param {boolean} force force instance setup\n     * @returns {ColliderService}\n     * @memberof ColliderService\n     */\n    ColliderService.setupInstance = function (wssUrl, wssPostUrl, force) {\n        if (!ColliderService.instance || force) {\n            ColliderService.instance = new ColliderService(wssUrl, wssPostUrl);\n            this.instance.isSet = true;\n        }\n        return ColliderService.instance;\n    };\n    /**\n     * Gets an instance.\n     *\n     * @static\n     * @returns\n     * @memberof ColliderService\n     */\n    ColliderService.getInstance = function () {\n        if (!!ColliderService.instance) {\n            if (BaseUtils_1.BaseUtils.isObjectDefined(this.instance.isSet)) {\n                return ColliderService.instance;\n            }\n        }\n        // Log.warn('ColliderService::getInstance Collider service is not set.')\n        return null;\n    };\n    /**\n     * Opens signaling channel.\n     *\n     * @public\n     * @returns {Promise<any>}\n     * @memberof ColliderService\n     */\n    ColliderService.prototype.open = function () {\n        var _this = this;\n        if (BaseUtils_1.BaseUtils.isObjectDefined(this.websocket)) {\n            Log_1.Log.log('ERROR: ColliderService has been already opened.');\n            return;\n        }\n        if (this.wssUrl === undefined) {\n            Log_1.Log.error('The WebSocket address is either invalid or unset. Breaking.');\n            return;\n        }\n        Log_1.Log.log(\"Opening signaling channel: \" + this.wssUrl);\n        return new Promise(function (resolve, reject) {\n            _this.websocket = new WebSocket(_this.wssUrl);\n            _this.websocket.onopen = function () {\n                Log_1.Log.log('Signaling channel opened.');\n                _this.websocket.onerror = function (event) {\n                    reject(\"Signaling channel error. \" + event);\n                };\n                _this.websocket.onclose = function (event) {\n                    Log_1.Log.log(\"Collider channel closed with code:\" + event.code);\n                    _this.websocket = null;\n                    _this.registered = false;\n                    _this.dispatchEvent(ColliderServiceEvent_1.ColliderServiceEvent.CLOSE, event.code);\n                };\n                if (BaseUtils_1.BaseUtils.isObjectDefined(_this.clientID) &&\n                    BaseUtils_1.BaseUtils.isObjectDefined(_this.roomId)) {\n                    _this.register(_this.roomId, _this.clientID);\n                }\n                resolve();\n            };\n            _this.websocket.onmessage = function (event) {\n                Log_1.Log.log('Collider -> Client: ', JSON.parse(event.data));\n                var message = Util_1.Util.parseJSON(event.data);\n                if (!BaseUtils_1.BaseUtils.isObjectDefined(message)) {\n                    Log_1.Log.log('Failed to parse WSS message: ' + event.data);\n                    return;\n                }\n                if (!StringUtils_1.StringUtils.isEmpty(message.error)) {\n                    Log_1.Log.log('Signaling server error message: ' + message.error);\n                    return;\n                }\n                _this.dispatchEvent(ColliderServiceEvent_1.ColliderServiceEvent.MESSAGE, message.msg);\n            };\n            _this.websocket.onerror = function (ev) {\n                reject(Error(\"WebSocket error. \" + ev));\n            };\n        });\n    };\n    /**\n     * Responds on ping request.\n     *\n     * @public\n     * @memberof ColliderService\n     */\n    ColliderService.prototype.respondOnPingRequest = function () {\n        var pingMessage = {\n            cmd: 'ping',\n            roomid: this.roomId,\n            roomtype: this.ROOM_TYPE,\n            clientid: this.clientID,\n        };\n        this.postMessage(pingMessage);\n    };\n    /**\n     * Calls update session logic to clear non-referenced message out.\n     *\n     * @public\n     * @param {string} sessionsList\n     * @memberof ColliderService\n     */\n    ColliderService.prototype.updateSession = function (sessionsList) {\n        var message = {\n            cmd: 'session-update',\n            roomid: this.roomId,\n            roomtype: this.ROOM_TYPE,\n            msg: sessionsList,\n        };\n        this.postMessage(message);\n    };\n    /**\n     * Register client into room.\n     *\n     * @public\n     * @param {string} roomId\n     * @param {string} clientID\n     * @returns {Promise<any>}\n     * @memberof ColliderService\n     */\n    ColliderService.prototype.register = function (roomId, clientID) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.roomId = roomId;\n            _this.clientID = clientID;\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(_this.roomId)) {\n                Log_1.Log.log('ERROR: Missing roomID. Stopping client registration.');\n                return reject({ code: 0, message: 'Missing roomID.' });\n            }\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(_this.clientID)) {\n                Log_1.Log.log('ERROR: Missing clientID. Stopping client registration.');\n                return reject({ code: 0, message: 'Missing clientID.' });\n            }\n            if (!_this.websocket || _this.websocket.readyState !== WebSocket.OPEN) {\n                return reject({ code: 0, message: 'WebSocket not open.' });\n            }\n            var registerMessage = {\n                cmd: 'register',\n                roomid: _this.roomId,\n                roomtype: _this.ROOM_TYPE,\n                clientid: _this.clientID,\n            };\n            _this.websocket.send(JSON.stringify(registerMessage));\n            _this.registered = true;\n            return resolve({ code: 1, message: 'Signaling channel registered.' });\n        });\n    };\n    /**\n     * Deregisters client form the websocket service.\n     *\n     * @param roomId the room ID\n     * @param clientId the client ID\n     * @returns the deregistration result\n     */\n    ColliderService.prototype.deregister = function (roomId, clientId) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(_this.roomId)) {\n                Log_1.Log.log('ERROR: Missing roomID. Stopping client registration.');\n                return reject({ code: 0, message: 'Missing roomID.' });\n            }\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(_this.clientID)) {\n                Log_1.Log.log('ERROR: Missing clientID. Stopping client registration.');\n                return reject({ code: 0, message: 'Missing clientID.' });\n            }\n            if (!_this.websocket || _this.websocket.readyState !== WebSocket.OPEN) {\n                return reject({ code: 0, message: 'WebSocket not open.' });\n            }\n            var registerMessage = {\n                cmd: 'deregister',\n                roomid: roomId,\n                roomtype: _this.ROOM_TYPE,\n                clientid: clientId,\n            };\n            _this.websocket.send(JSON.stringify(registerMessage));\n            _this.registered = false;\n            return resolve({ code: 1, message: 'Signaling channel deregistered.' });\n        });\n    };\n    /**\n     * Destroy application transmitter.\n     */\n    ColliderService.prototype.destroy = function () {\n        this.dispatchEvent(ColliderServiceEvent_1.ColliderServiceEvent.DESTROY);\n    };\n    ColliderService.prototype.touch = function (roomId, clientID) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.roomId = roomId;\n            _this.clientID = clientID;\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(_this.roomId)) {\n                Log_1.Log.log('ERROR: Missing roomID. Stopping client registration.');\n                return reject({ code: 0, message: 'Missing roomID.' });\n            }\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(_this.clientID)) {\n                Log_1.Log.log('ERROR: Missing clientID. Stopping client registration.');\n                return reject({ code: 0, message: 'Missing clientID.' });\n            }\n            if (!_this.websocket || _this.websocket.readyState !== WebSocket.OPEN) {\n                return reject({ code: 0, message: 'WebSocket not open.' });\n            }\n            var registerMessage = {\n                cmd: 'touch',\n                roomid: _this.roomId,\n                roomtype: _this.ROOM_TYPE,\n                clientid: _this.clientID,\n            };\n            _this.websocket.send(JSON.stringify(registerMessage));\n            return resolve({ code: 1, message: 'Touch sent.' });\n        });\n    };\n    /**\n     * Closes signaling channel.\n     *\n     * @public\n     * @param {boolean} async\n     * @returns\n     * @memberof ColliderService\n     */\n    ColliderService.prototype.close = function (async) {\n        return __awaiter(this, void 0, void 0, function () {\n            var path, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        Log_1.Log.log('Closing websocket.');\n                        if (!!this.websocket) {\n                            this.websocket.close();\n                            this.websocket = null;\n                        }\n                        if (!this.clientID || !this.roomId) {\n                            return [2 /*return*/];\n                        }\n                        path = this.getWssPostUrl();\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, Util_1.Util.sendUrlRequest('POST', path, async, 'DELETE')];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_1 = _a.sent();\n                        Log_1.Log.log('Error deleting web socket connection: ' + error_1.message);\n                        return [3 /*break*/, 4];\n                    case 4:\n                        this.clientID = null;\n                        this.roomId = null;\n                        this.registered = false;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Sends a websocket message.\n     *\n     * @public\n     * @param {*} message\n     * @param {boolean} [persistant=true]\n     * @returns\n     * @memberof ColliderService\n     */\n    ColliderService.prototype.send = function (message, persistant) {\n        if (persistant === void 0) { persistant = true; }\n        if (!this.roomId || !this.clientID) {\n            Log_1.Log.log('ERROR: ColliderService has not registered.');\n            return;\n        }\n        var wssMessage = {\n            cmd: 'send',\n            msg: message,\n            persistant: persistant.toString(),\n        };\n        this.postMessage(wssMessage);\n    };\n    /**\n     * Sends a message to other client.\n     *\n     * @param {string} roomId\n     * @param {string} clientId\n     * @param {string} otherClientId\n     * @param {*} message\n     * @returns\n     * @memberof ColliderService\n     */\n    ColliderService.prototype.sendToOther = function (roomId, clientId, otherClientId, message) {\n        if (!this.roomId || !this.clientID) {\n            Log_1.Log.log('ERROR: ColliderService has not registered.');\n            return;\n        }\n        var wssMessage = {\n            cmd: 'send-to-other',\n            roomid: roomId,\n            clientid: clientId,\n            otherid: otherClientId,\n            msg: message,\n        };\n        this.postMessage(wssMessage);\n    };\n    /**\n     * Broadcasts a message.\n     *\n     * @param {string} type\n     * @param {*} data\n     * @memberof ColliderService\n     */\n    ColliderService.prototype.broadcast = function (inputType, inputData) {\n        var wssMessage = {\n            cmd: 'broadcast',\n            msg: JSON.stringify({\n                type: inputType,\n                roomid: this.roomId,\n                clientid: this.clientID,\n                data: inputData,\n            }),\n        };\n        this.postMessage(wssMessage);\n    };\n    /**\n     * Gets WebSocket communication path.\n     *\n     * @public\n     * @returns {string}\n     * @memberof ColliderService\n     */\n    ColliderService.prototype.getWssPostUrl = function () {\n        return this.wssPostUrl + \"/\" + this.roomId + \"/\" + this.clientID;\n    };\n    /**\n     * If WebSocket connection is available then it sends a WebSocket message.\n     * Otherwise, it sends a POST message.\n     *\n     * @private\n     * @param {any} wssMessage\n     * @memberof ColliderService\n     */\n    ColliderService.prototype.postMessage = function (wssMessage) {\n        var msgString = JSON.stringify(wssMessage);\n        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\n            this.websocket.send(msgString);\n        }\n        else {\n            this.post(this.getWssPostUrl(), wssMessage.msg);\n        }\n    };\n    ColliderService.MESSAGE = 'message';\n    return ColliderService;\n}(FormService_1.FormService));\nexports.ColliderService = ColliderService;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/service/ColliderService.ts?")},"./ts/com/quickhellou/application/utils/MovingAverage.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.MovingAverage = void 0;\n/**\n * Expotential moving average utility.\n *\n * @export\n * @class MovingAverage\n */\nvar MovingAverage = /** @class */ (function () {\n    /**\n     * Creates an instance of MovingAverage.\n     *\n     * @param {any}\n     * @memberof MovingAverage\n     */\n    function MovingAverage(range) {\n        this.range = range;\n        this.values = Array(range * 2).fill(0);\n    }\n    MovingAverage.prototype.update = function (newValue) {\n        if (this.values.length > this.range * 2) {\n            this.values.shift();\n        }\n        this.values.push(newValue);\n        return this.calculate();\n    };\n    MovingAverage.prototype.calculate = function () {\n        var c = this.smooth(this.range);\n        var average = this.average(this.values.slice(0, this.range));\n        var acc = [this.toFixed(average)];\n        for (var i = this.range; i < this.values.length; i++) {\n            average = c * Number(this.values[i]) + (1 - c) * average;\n            acc.push(this.toFixed(average));\n        }\n        return acc.pop();\n    };\n    MovingAverage.prototype.average = function (arr) {\n        var len = arr.length;\n        var i = -1;\n        var num = 0;\n        while (++i < len) {\n            num += Number(arr[i]);\n        }\n        return num / len;\n    };\n    MovingAverage.prototype.smooth = function (n) {\n        return 2 / (n + 1);\n    };\n    MovingAverage.prototype.toFixed = function (n) {\n        return n.toFixed(2);\n    };\n    return MovingAverage;\n}());\nexports.MovingAverage = MovingAverage;\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/utils/MovingAverage.ts?')},"../../node_modules/ts-loader/index.js!./ts/comProxy.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.proxy = exports.ComProxy = void 0;\nvar EventDispatcherService_1 = __webpack_require__(/*! ./com/genb/base/services/EventDispatcherService */ "./ts/com/genb/base/services/EventDispatcherService.ts");\nvar BaseUtils_1 = __webpack_require__(/*! ./com/genb/base/utils/BaseUtils */ "./ts/com/genb/base/utils/BaseUtils.ts");\nvar Log_1 = __webpack_require__(/*! ./com/genb/base/utils/Log */ "./ts/com/genb/base/utils/Log.ts");\nvar ColliderServiceEvent_1 = __webpack_require__(/*! ./com/quickhellou/application/model/ColliderServiceEvent */ "./ts/com/quickhellou/application/model/ColliderServiceEvent.ts");\nvar PeerConnectionResponseType_1 = __webpack_require__(/*! ./com/quickhellou/application/model/PeerConnectionResponseType */ "./ts/com/quickhellou/application/model/PeerConnectionResponseType.ts");\nvar ColliderService_1 = __webpack_require__(/*! ./com/quickhellou/application/service/ColliderService */ "./ts/com/quickhellou/application/service/ColliderService.ts");\nvar CallEvent_1 = __webpack_require__(/*! ./com/quickhellou/CallEvent */ "./ts/com/quickhellou/CallEvent.ts");\nvar Util_1 = __webpack_require__(/*! ./com/quickhellou/Util */ "./ts/com/quickhellou/Util.ts");\n/**\n * The communication proxy.\n */\nvar ComProxy = /** @class */ (function (_super) {\n    __extends(ComProxy, _super);\n    /**\n     * The proxy constructor.\n     */\n    function ComProxy() {\n        var _this = _super.call(this) || this;\n        _this.retry();\n        return _this;\n    }\n    /**\n     * Retry manager function for acquiring initialized service.\n     * // TODO make it event driven\n     */\n    ComProxy.prototype.retry = function () {\n        var _this = this;\n        setTimeout(function () {\n            if (!!ColliderService_1.ColliderService.getInstance()) {\n                _this.init();\n            }\n            _this.retry();\n        }, 3000);\n    };\n    /**\n     * Initializes the proxy.\n     */\n    ComProxy.prototype.init = function () {\n        this.colliderService = ColliderService_1.ColliderService.getInstance();\n        this.colliderService.addEventListener(ColliderServiceEvent_1.ColliderServiceEvent.MESSAGE, this.onReceiveColliderChannelMessage, this);\n        this.colliderService.addEventListener(ColliderServiceEvent_1.ColliderServiceEvent.CLOSE, this.onColliderChannelClose, this);\n    };\n    /**\n     * Destroys the application and reinitializes and reactivates it after getting a new room ID.\n     *\n     * @memberof ComProxy\n     */\n    ComProxy.prototype.destroy = function () {\n        this.colliderService.destroy();\n    };\n    /**\n     * Resolves response signaling message.\n     *\n     * @param {string} message the message\n     *\n     * @memberof ComProxy\n     */\n    ComProxy.prototype.onReceiveColliderChannelMessage = function (message) {\n        var messageJson = Util_1.Util.parseJSON(message);\n        if (typeof messageJson === \'string\') {\n            messageJson = Util_1.Util.parseJSON(messageJson);\n        }\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(messageJson)) {\n            Log_1.Log.warn(\'MediaCommunication::onReceiveColliderChannelMessage No message defined.\');\n            return;\n        }\n        var type = messageJson.type;\n        if (PeerConnectionResponseType_1.PeerConnectionResponseType.isBye(type)) {\n            this.onRemoteHangup(messageJson.sessionId);\n            return;\n        }\n    };\n    /**\n     * Handles remote hangup signal.\n     *\n     * @private\n     * @param {string} sessionId\n     *\n     * @memberof ComProxy\n     */\n    ComProxy.prototype.onRemoteHangup = function (sessionId) {\n        this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_HANGUP, sessionId);\n    };\n    /**\n     * Handles unexpected Collider channel close.\n     *\n     * @memberof ComProxy\n     */\n    ComProxy.prototype.onColliderChannelClose = function () {\n        this.dispatchEvent(ColliderServiceEvent_1.ColliderServiceEvent.CLOSE);\n    };\n    return ComProxy;\n}(EventDispatcherService_1.EventDispatcherService));\nexports.ComProxy = ComProxy;\n/**\n * Proxy expose function.\n *\n * @returns the ComProxy instance.\n */\nfunction proxy() {\n    Log_1.Log.log(\'Videochat proxy initialized.\');\n    return new ComProxy();\n}\nexports.proxy = proxy;\n\n\n//# sourceURL=webpack:///./ts/comProxy.ts?../../node_modules/ts-loader/index.js')},"./ts/web_app.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar _this = this;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__webpack_require__(/*! ../scss/web_app.scss */ \"./scss/web_app.scss\");\nvar HTMLUtils_1 = __webpack_require__(/*! ./com/genb/base/utils/HTMLUtils */ \"./ts/com/genb/base/utils/HTMLUtils.ts\");\nvar Log_1 = __webpack_require__(/*! ./com/genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\nvar StringUtils_1 = __webpack_require__(/*! ./com/genb/base/utils/StringUtils */ \"./ts/com/genb/base/utils/StringUtils.ts\");\nvar AppController_1 = __webpack_require__(/*! ./com/quickhellou/AppController */ \"./ts/com/quickhellou/AppController.ts\");\nvar AppControllerEvent_1 = __webpack_require__(/*! ./com/quickhellou/AppControllerEvent */ \"./ts/com/quickhellou/AppControllerEvent.ts\");\n__webpack_require__(/*! expose-loader?exposes=videochat!./comProxy */ \"../../node_modules/expose-loader/dist/cjs.js?exposes=videochat!./ts/comProxy-exposed.ts\");\nvar appController;\n// TODO: checkout\n/*Log.setEnvironment(environment)\nLog.log(\n  `Quick Hellou v. ${version} ${environment} build (webrtc-adapter v. 8.1.0)`\n)*/\nwindow.addEventListener('load', function () {\n    preinit();\n});\nvar preinit = function () {\n    var roomIdElement = document.querySelector('meta[name=\"room_id\"]');\n    if (roomIdElement !== null) {\n        var roomId = roomIdElement.getAttribute('content');\n        if (StringUtils_1.StringUtils.isNotEmpty(roomId)) {\n            init(roomId, getInitType(), getVideoAppUrl());\n        }\n        else {\n            setTimeout(reinit, 1000);\n        }\n    }\n    else {\n        Log_1.Log.warn('No room parameter.');\n    }\n};\nvar init = function (roomId, initType, videoAppUrl) {\n    appController = new AppController_1.AppController(roomId, initType, videoAppUrl);\n    Log_1.Log.log('init', roomId, initType, videoAppUrl);\n    appController.addEventListener(AppControllerEvent_1.AppControllerEvent.INITIALIZED, function () {\n        var main = HTMLUtils_1.HTMLUtils.get('div.main');\n        main.classList.add('js-visible');\n        // remove loader after when the main element is visible\n        setTimeout(function () {\n            if (HTMLUtils_1.HTMLUtils.exists('div.loader')) {\n                var loader = HTMLUtils_1.HTMLUtils.get('div.loader');\n                loader.remove();\n            }\n        }, 1000);\n        // service workers facade\n        // new ServiceWorkers()\n    }, _this);\n    appController.addEventListener(AppControllerEvent_1.AppControllerEvent.DESTROY, function () {\n        appController = null;\n        preinit();\n    }, _this);\n    appController.init();\n};\nvar reinit = function () {\n    var roomId = document\n        .querySelector('meta[name=\"room_id\"]')\n        .getAttribute('content');\n    if (StringUtils_1.StringUtils.isNotEmpty(roomId)) {\n        init(roomId, getInitType(), getVideoAppUrl());\n    }\n    else {\n        setTimeout(function () { return reinit(); }, 2000);\n    }\n};\nvar getInitType = function () {\n    var metaInitType = document.querySelector('meta[name=\"init\"]');\n    var urlParams = new URLSearchParams(window.location.search);\n    var initType = urlParams.get('init');\n    if (initType !== null) {\n        return initType;\n    }\n    if (metaInitType !== null) {\n        return metaInitType.getAttribute('content');\n    }\n    return '';\n};\nvar getVideoAppUrl = function () {\n    var metaVideoAppUrl = document.querySelector('meta[name=\"video_app_url\"]');\n    if (metaVideoAppUrl !== null) {\n        return metaVideoAppUrl.getAttribute('content');\n    }\n    return '';\n};\n\n\n//# sourceURL=webpack:///./ts/web_app.ts?")}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(t.exports,t,t.exports,__webpack_require__),t.exports}__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./ts/web_app.ts")})();