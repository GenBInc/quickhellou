/*! For license information please see quickhellou.js.LICENSE.txt */
!function(e){var n={};function r(t){if(n[t])return n[t].exports;var i=n[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=n,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)r.d(t,i,function(n){return e[n]}.bind(null,i));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="",r(r.s=0)}({"../node_modules/expose-loader/dist/cjs.js?exposes=videochat!./ts/ComProxy-exposed.ts":function(module,exports,__webpack_require__){eval('var ___EXPOSE_LOADER_IMPORT___ = __webpack_require__(/*! -!../../node_modules/ts-loader!./ComProxy.ts */ "../node_modules/ts-loader/index.js!./ts/ComProxy.ts");\nvar ___EXPOSE_LOADER_GET_GLOBAL_THIS___ = __webpack_require__(/*! ../../node_modules/expose-loader/dist/runtime/getGlobalThis.js */ "../node_modules/expose-loader/dist/runtime/getGlobalThis.js");\nvar ___EXPOSE_LOADER_GLOBAL_THIS___ = ___EXPOSE_LOADER_GET_GLOBAL_THIS___;\nif (typeof ___EXPOSE_LOADER_GLOBAL_THIS___["videochat"] === \'undefined\') ___EXPOSE_LOADER_GLOBAL_THIS___["videochat"] = ___EXPOSE_LOADER_IMPORT___;\nelse throw new Error(\'[exposes-loader] The "videochat" value exists in the global scope, it may not be safe to overwrite it, use the "override" option\')\nmodule.exports = ___EXPOSE_LOADER_IMPORT___;\n\n\n//# sourceURL=webpack:///./ts/ComProxy-exposed.ts?../node_modules/expose-loader/dist/cjs.js?exposes=videochat')},"../node_modules/expose-loader/dist/runtime/getGlobalThis.js":function(module,exports,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(global) {\n\n// eslint-disable-next-line func-names\nmodule.exports = function () {\n  if (typeof globalThis === "object") {\n    return globalThis;\n  }\n\n  var g;\n\n  try {\n    // This works if eval is allowed (see CSP)\n    // eslint-disable-next-line no-new-func\n    g = this || new Function("return this")();\n  } catch (e) {\n    // This works if the window reference is available\n    if (typeof window === "object") {\n      return window;\n    } // This works if the self reference is available\n\n\n    if (typeof self === "object") {\n      return self;\n    } // This works if the global reference is available\n\n\n    if (typeof global !== "undefined") {\n      return global;\n    }\n  }\n\n  return g;\n}();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "../node_modules/webpack/buildin/global.js")))\n\n//# sourceURL=webpack:///../node_modules/expose-loader/dist/runtime/getGlobalThis.js?')},"../node_modules/ts-loader/index.js!./ts/ComProxy.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.proxy = exports.ComProxy = void 0;\r\nvar EventDispatcherService_1 = __webpack_require__(/*! ./com/genb/base/services/EventDispatcherService */ "./ts/com/genb/base/services/EventDispatcherService.ts");\r\nvar BaseUtils_1 = __webpack_require__(/*! ./com/genb/base/utils/BaseUtils */ "./ts/com/genb/base/utils/BaseUtils.ts");\r\nvar Log_1 = __webpack_require__(/*! ./com/genb/base/utils/Log */ "./ts/com/genb/base/utils/Log.ts");\r\nvar ColliderServiceEvent_1 = __webpack_require__(/*! ./com/quickhellou/application/model/ColliderServiceEvent */ "./ts/com/quickhellou/application/model/ColliderServiceEvent.ts");\r\nvar PeerConnectionResponseType_1 = __webpack_require__(/*! ./com/quickhellou/application/model/PeerConnectionResponseType */ "./ts/com/quickhellou/application/model/PeerConnectionResponseType.ts");\r\nvar ColliderService_1 = __webpack_require__(/*! ./com/quickhellou/application/service/ColliderService */ "./ts/com/quickhellou/application/service/ColliderService.ts");\r\nvar CallEvent_1 = __webpack_require__(/*! ./com/quickhellou/CallEvent */ "./ts/com/quickhellou/CallEvent.ts");\r\nvar Util_1 = __webpack_require__(/*! ./com/quickhellou/Util */ "./ts/com/quickhellou/Util.ts");\r\n/**\r\n * The communication proxy.\r\n */\r\nvar ComProxy = /** @class */ (function (_super) {\r\n    __extends(ComProxy, _super);\r\n    /**\r\n     * The proxy constructor.\r\n     */\r\n    function ComProxy() {\r\n        var _this = _super.call(this) || this;\r\n        _this.retry();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Retry manager function for acquiring initialized service.\r\n     * // TODO make it event driven\r\n     */\r\n    ComProxy.prototype.retry = function () {\r\n        var _this = this;\r\n        setTimeout(function () {\r\n            if (!!ColliderService_1.ColliderService.getInstance()) {\r\n                _this.init();\r\n            }\r\n            _this.retry();\r\n        }, 3000);\r\n    };\r\n    /**\r\n     * Initializes the proxy.\r\n     */\r\n    ComProxy.prototype.init = function () {\r\n        this.colliderService = ColliderService_1.ColliderService.getInstance();\r\n        this.colliderService.addEventListener(ColliderServiceEvent_1.ColliderServiceEvent.MESSAGE, this.onReceiveColliderChannelMessage, this);\r\n        this.colliderService.addEventListener(ColliderServiceEvent_1.ColliderServiceEvent.CLOSE, this.onColliderChannelClose, this);\r\n    };\r\n    /**\r\n     * Destroys the application and reinitializes and reactivates it after getting a new room ID.\r\n     *\r\n     * @memberof ComProxy\r\n     */\r\n    ComProxy.prototype.destroy = function () {\r\n        this.colliderService.destroy();\r\n    };\r\n    /**\r\n     * Resolves response signaling message.\r\n     *\r\n     * @param {string} message the message\r\n     *\r\n     * @memberof ComProxy\r\n     */\r\n    ComProxy.prototype.onReceiveColliderChannelMessage = function (message) {\r\n        var messageJson = Util_1.Util.parseJSON(message);\r\n        if (typeof messageJson === \'string\') {\r\n            messageJson = Util_1.Util.parseJSON(messageJson);\r\n        }\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(messageJson)) {\r\n            Log_1.Log.warn(\'MediaCommunication::onReceiveColliderChannelMessage No message defined.\');\r\n            return;\r\n        }\r\n        var type = messageJson.type;\r\n        if (PeerConnectionResponseType_1.PeerConnectionResponseType.isBye(type)) {\r\n            this.onRemoteHangup(messageJson.sessionId);\r\n            return;\r\n        }\r\n    };\r\n    /**\r\n     * Handles remote hangup signal.\r\n     *\r\n     * @private\r\n     * @param {string} sessionId\r\n     *\r\n     * @memberof ComProxy\r\n     */\r\n    ComProxy.prototype.onRemoteHangup = function (sessionId) {\r\n        this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_HANGUP, sessionId);\r\n    };\r\n    /**\r\n     * Handles unexpected Collider channel close.\r\n     *\r\n     * @memberof ComProxy\r\n     */\r\n    ComProxy.prototype.onColliderChannelClose = function () {\r\n        this.dispatchEvent(ColliderServiceEvent_1.ColliderServiceEvent.CLOSE);\r\n    };\r\n    return ComProxy;\r\n}(EventDispatcherService_1.EventDispatcherService));\r\nexports.ComProxy = ComProxy;\r\n/**\r\n * Proxy expose function.\r\n *\r\n * @returns the ComProxy instance.\r\n */\r\nfunction proxy() {\r\n    Log_1.Log.log(\'Videochat proxy initialized.\');\r\n    return new ComProxy();\r\n}\r\nexports.proxy = proxy;\r\n\n\n//# sourceURL=webpack:///./ts/ComProxy.ts?../node_modules/ts-loader')},"../node_modules/webpack/buildin/global.js":function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///../node_modules/webpack/buildin/global.js?')},"./scss/web_app.scss":function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./scss/web_app.scss?")},"./ts/com/genb/base/components/Component.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Component = void 0;\r\nvar EventDispatcherService_1 = __webpack_require__(/*! ../services/EventDispatcherService */ "./ts/com/genb/base/services/EventDispatcherService.ts");\r\n/**\r\n * Generic component.\r\n *\r\n * @export\r\n * @class Component\r\n */\r\nvar Component = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of Component.\r\n     * @memberof Component\r\n     */\r\n    function Component() {\r\n        this.service = new EventDispatcherService_1.EventDispatcherService();\r\n    }\r\n    /**\r\n     * Adds a listener.\r\n     *\r\n     * @public\r\n     * @param {string} eventName\r\n     * @param {Function} handler\r\n     * @param {*} scope\r\n     * @memberof Component\r\n     */\r\n    Component.prototype.addEventListener = function (eventName, handler, scope) {\r\n        this.service.addEventListener(eventName, handler, scope);\r\n    };\r\n    /**\r\n     * Removes a listener.\r\n     *\r\n     * @public\r\n     * @param {string} eventType\r\n     * @memberof Component\r\n     */\r\n    Component.prototype.removeEventListener = function (eventType) {\r\n        this.service.removeEventListener(eventType);\r\n    };\r\n    /**\r\n     * Dispatches an event.\r\n     *\r\n     * @public\r\n     * @param {string} eventName\r\n     * @param {*} [data]\r\n     * @memberof Component\r\n     */\r\n    Component.prototype.dispatchEvent = function (eventName, data) {\r\n        this.service.dispatchEvent(eventName, data);\r\n    };\r\n    /**\r\n     * Destroys a component.\r\n     *\r\n     * @public\r\n     * @memberof Component\r\n     */\r\n    Component.prototype.destroy = function () {\r\n        this.service.removeAllEventListeners();\r\n    };\r\n    /**\r\n     * Gets an identifier.\r\n     *\r\n     * @public\r\n     * @returns {string}\r\n     * @memberof Component\r\n     */\r\n    Component.prototype.getId = function () {\r\n        return this.id;\r\n    };\r\n    /**\r\n     * Sets an identifier.\r\n     *\r\n     * @public\r\n     * @param {string} id\r\n     * @memberof Component\r\n     */\r\n    Component.prototype.setId = function (id) {\r\n        this.id = id;\r\n    };\r\n    /**\r\n     * Gets an unique identifier.\r\n     *\r\n     * @public\r\n     * @returns {string}\r\n     * @memberof Component\r\n     */\r\n    Component.prototype.getUid = function () {\r\n        return this.uid;\r\n    };\r\n    /**\r\n     * Sets an unique identifier\r\n     *\r\n     * @public\r\n     * @param {string} uid\r\n     * @memberof Component\r\n     */\r\n    Component.prototype.setUid = function (uid) {\r\n        this.uid = uid;\r\n    };\r\n    return Component;\r\n}());\r\nexports.Component = Component;\r\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/components/Component.ts?')},"./ts/com/genb/base/components/HtmlComponent.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.HTMLComponent = void 0;\r\nvar BaseUtils_1 = __webpack_require__(/*! ../../base/utils/BaseUtils */ "./ts/com/genb/base/utils/BaseUtils.ts");\r\nvar ToggleableComponent_1 = __webpack_require__(/*! ./ToggleableComponent */ "./ts/com/genb/base/components/ToggleableComponent.ts");\r\nvar Log_1 = __webpack_require__(/*! ../utils/Log */ "./ts/com/genb/base/utils/Log.ts");\r\n/**\r\n * HTMLElement based Component\r\n *\r\n * @export\r\n * @class HtmlComponent\r\n * @extends {Component}\r\n */\r\nvar HTMLComponent = /** @class */ (function (_super) {\r\n    __extends(HTMLComponent, _super);\r\n    /**\r\n     * Creates an instance of RawUIComponent.\r\n     * @param {JQuery} element\r\n     * @memberof UIComponent\r\n     */\r\n    function HTMLComponent(element) {\r\n        var _this = _super.call(this) || this;\r\n        _this.setElement(element);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Destroys an instance of UIComponent\r\n     *\r\n     * @memberof UIComponent\r\n     */\r\n    HTMLComponent.prototype.destroy = function () {\r\n        _super.prototype.destroy.call(this);\r\n        this.element.remove();\r\n    };\r\n    /**\r\n     * Sets the element.\r\n     *\r\n     * @param {HTMLElement} element\r\n     * @memberof UIComponent\r\n     */\r\n    HTMLComponent.prototype.setElement = function (element) {\r\n        this.element = element;\r\n    };\r\n    /**\r\n     * Gets the element.\r\n     *\r\n     * @param {HTMLElement} element\r\n     * @memberof UIComponent\r\n     */\r\n    HTMLComponent.prototype.getElement = function () {\r\n        try {\r\n            return this.element;\r\n        }\r\n        catch (exception) {\r\n            Log_1.Log.error("No element for ", this.getId(), " component");\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * Gets data value by identifier from a JQuery element.\r\n     *\r\n     * @param {string} id\r\n     * @returns {any}\r\n     * @memberof UIComponent\r\n     */\r\n    HTMLComponent.prototype.getData = function (id) {\r\n        if (BaseUtils_1.BaseUtils.isObjectDefined(this.getElement())) {\r\n            return this.getElement().dataset[id];\r\n        }\r\n        return BaseUtils_1.BaseUtils.UNDEFINED;\r\n    };\r\n    /**\r\n     * Finds child elements within root element.\r\n     *\r\n     * @public\r\n     * @param {string} elementQuery\r\n     * @returns {NodeListOf<Element>}\r\n     * @memberof HtmlComponent\r\n     */\r\n    HTMLComponent.prototype.findElements = function (elementQuery) {\r\n        if (BaseUtils_1.BaseUtils.isObjectDefined(this.getElement())) {\r\n            return this.getElement().querySelectorAll(elementQuery);\r\n        }\r\n        return BaseUtils_1.BaseUtils.UNDEFINED;\r\n    };\r\n    /**\r\n     * Finds an child element within root element.\r\n     *\r\n     * @public\r\n     * @param {string} elementQuery\r\n     * @returns {HTMLElement}\r\n     * @memberof HtmlComponent\r\n     */\r\n    HTMLComponent.prototype.findElement = function (elementQuery) {\r\n        if (BaseUtils_1.BaseUtils.isObjectDefined(this.getElement())) {\r\n            var results = this.findElements(elementQuery);\r\n            if (results.length > 0) {\r\n                return results[0];\r\n            }\r\n        }\r\n        return BaseUtils_1.BaseUtils.UNDEFINED;\r\n    };\r\n    /**\r\n     * Finds a form element within root element.\r\n     *\r\n     * @public\r\n     * @returns {HTMLFormElement}\r\n     * @memberof HtmlComponent\r\n     */\r\n    HTMLComponent.prototype.findFormElement = function () {\r\n        return this.findElement("form");\r\n    };\r\n    /**\r\n     * Finds an input element within root element.\r\n     *\r\n     * @public\r\n     * @returns {Element}\r\n     * @memberof HtmlComponent\r\n     */\r\n    HTMLComponent.prototype.findInputElement = function () {\r\n        return this.findElement("input");\r\n    };\r\n    /**\r\n     * Adds a class to the component element.\r\n     *\r\n     * @public\r\n     * @param {string} className\r\n     * @memberof UIComponent\r\n     */\r\n    HTMLComponent.prototype.addClass = function (className) {\r\n        if (BaseUtils_1.BaseUtils.isObjectDefined(this.getElement())) {\r\n            this.getElement().classList.add(className);\r\n        }\r\n    };\r\n    /**\r\n     * Removes a class from the component element.\r\n     *\r\n     * @param {string} className\r\n     * @memberof UIComponent\r\n     */\r\n    HTMLComponent.prototype.removeClass = function (className) {\r\n        if (BaseUtils_1.BaseUtils.isObjectDefined(this.getElement())) {\r\n            this.getElement().classList.remove(className);\r\n        }\r\n    };\r\n    /**\r\n     * Adds an event listener handler for the component.\r\n     *\r\n     * @param {string} eventName\r\n     * @param {Function} handler\r\n     * @memberof HtmlComponent\r\n     */\r\n    HTMLComponent.prototype.addHTMLEventListener = function (eventName, handler) {\r\n        var _this = this;\r\n        this.getElement().addEventListener(eventName, function () {\r\n            handler.call(_this);\r\n        });\r\n    };\r\n    /**\r\n     * Enables component.\r\n     *\r\n     * @memberof UIComponent\r\n     */\r\n    HTMLComponent.prototype.enable = function () {\r\n        _super.prototype.enable.call(this);\r\n        this.getElement().classList.remove("js-disabled");\r\n    };\r\n    /**\r\n     * Disables component.\r\n     *\r\n     * @memberof UIComponent\r\n     */\r\n    HTMLComponent.prototype.disable = function () {\r\n        _super.prototype.disable.call(this);\r\n        this.getElement().classList.add("js-disabled");\r\n    };\r\n    /**\r\n     * Sets component enable state.\r\n     *\r\n     * @param {boolean} isEnabled\r\n     * @memberof UIComponent\r\n     */\r\n    HTMLComponent.prototype.setIsEnabled = function (isEnabled) {\r\n        _super.prototype.setIsEnabled.call(this, isEnabled);\r\n        this.getElement().classList.toggle("js-disabled", !isEnabled);\r\n    };\r\n    return HTMLComponent;\r\n}(ToggleableComponent_1.ToggleableComponent));\r\nexports.HTMLComponent = HTMLComponent;\r\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/components/HtmlComponent.ts?')},"./ts/com/genb/base/components/ToggleableComponent.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.ToggleableComponent = void 0;\r\nvar Component_1 = __webpack_require__(/*! ./Component */ "./ts/com/genb/base/components/Component.ts");\r\n/**\r\n * Toggleable component\r\n *\r\n * @export\r\n * @class ToggleableComponent\r\n * @extends {Component}\r\n */\r\nvar ToggleableComponent = /** @class */ (function (_super) {\r\n    __extends(ToggleableComponent, _super);\r\n    function ToggleableComponent() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * Component state\r\n         *\r\n         * @private\r\n         * @type {boolean}\r\n         * @memberof ToggleableComponent\r\n         */\r\n        _this.isEnabled = true;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Toggle component.\r\n     *\r\n     * @memberof ToggleableComponent\r\n     */\r\n    ToggleableComponent.prototype.toggle = function () {\r\n        this.setIsEnabled(!this.getIsEnabled);\r\n    };\r\n    /**\r\n     * Enable component.\r\n     *\r\n     * @memberof ToggleableComponent\r\n     */\r\n    ToggleableComponent.prototype.enable = function () {\r\n        this.setIsEnabled(true);\r\n    };\r\n    /**\r\n     * Disable component.\r\n     *\r\n     * @memberof ToggleableComponent\r\n     */\r\n    ToggleableComponent.prototype.disable = function () {\r\n        this.setIsEnabled(false);\r\n    };\r\n    /**\r\n     * Sets component state.\r\n     *\r\n     * @param {boolean} isEnabled\r\n     * @memberof ToggleableComponent\r\n     */\r\n    ToggleableComponent.prototype.setIsEnabled = function (isEnabled) {\r\n        this.isEnabled = isEnabled;\r\n    };\r\n    /**\r\n     * Gets component state.\r\n     *\r\n     * @returns {boolean}\r\n     * @memberof ToggleableComponent\r\n     */\r\n    ToggleableComponent.prototype.getIsEnabled = function () {\r\n        return this.isEnabled;\r\n    };\r\n    return ToggleableComponent;\r\n}(Component_1.Component));\r\nexports.ToggleableComponent = ToggleableComponent;\r\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/components/ToggleableComponent.ts?')},"./ts/com/genb/base/models/Enviroment.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Enviroment = void 0;\r\nvar Enviroment = /** @class */ (function () {\r\n    function Enviroment() {\r\n    }\r\n    Enviroment.LOCAL = "local";\r\n    Enviroment.SANDBOX = "sandbox";\r\n    Enviroment.PRODUCTION = "production";\r\n    Enviroment.LOCAL_HOSTNAME = "Computer";\r\n    Enviroment.SANDBOX_HOSTNAME = "elara.genesi.pl" || false;\r\n    Enviroment.PRODUCTION_HOSTNAME = "deposit.venturevisa.com";\r\n    return Enviroment;\r\n}());\r\nexports.Enviroment = Enviroment;\r\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/models/Enviroment.ts?')},"./ts/com/genb/base/models/EventListener.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.EventListener = void 0;\r\nvar EventObject_1 = __webpack_require__(/*! ../models/EventObject */ "./ts/com/genb/base/models/EventObject.ts");\r\n/**\r\n * Event dispatching component.\r\n *\r\n * @export\r\n * @class EventListener\r\n */\r\nvar EventListener = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of EventListener.\r\n     *\r\n     * @param {string} type\r\n     * @param {Function} handler\r\n     * @param {*} scope\r\n     * @memberof EventListener\r\n     */\r\n    function EventListener(type, handler, scope) {\r\n        this.event = new EventObject_1.EventObject(type);\r\n        this.handler = handler;\r\n        this.scope = scope;\r\n    }\r\n    /**\r\n     * Gets a handler.\r\n     *\r\n     * @returns {Function}\r\n     * @memberof EventListener\r\n     */\r\n    EventListener.prototype.getHandler = function () {\r\n        return this.handler;\r\n    };\r\n    /**\r\n     * Gets and event object.\r\n     *\r\n     * @returns {EventObject}\r\n     * @memberof EventListener\r\n     */\r\n    EventListener.prototype.getEventObject = function () {\r\n        return this.event;\r\n    };\r\n    /**\r\n     * Gets a scope.\r\n     *\r\n     * @returns {*}\r\n     * @memberof EventListener\r\n     */\r\n    EventListener.prototype.getScope = function () {\r\n        return this.scope;\r\n    };\r\n    return EventListener;\r\n}());\r\nexports.EventListener = EventListener;\r\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/models/EventListener.ts?')},"./ts/com/genb/base/models/EventListeners.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.EventListeners = void 0;\r\n/**\r\n * Event listeners aggregator\r\n *\r\n * @export\r\n * @class EventListeners\r\n */\r\nvar EventListeners = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of EventListeners.\r\n     * @memberof EventListeners\r\n     */\r\n    function EventListeners() {\r\n        this.setListeners(new Array());\r\n    }\r\n    EventListeners.prototype.addEventListener = function (type, eventListener) {\r\n        var eventListeners = this.getEventListenersListByType(type);\r\n        eventListeners.push(eventListener);\r\n        this.listeners[type] = eventListeners;\r\n    };\r\n    EventListeners.prototype.removeEventListener = function (type) {\r\n        delete this.listeners[type];\r\n    };\r\n    EventListeners.prototype.getEventListenersListByType = function (type) {\r\n        var eventListenersList = this.listeners[type];\r\n        return eventListenersList ? eventListenersList : [];\r\n    };\r\n    EventListeners.prototype.empty = function () {\r\n        this.listeners = [];\r\n    };\r\n    EventListeners.prototype.getListeners = function () {\r\n        return this.listeners;\r\n    };\r\n    EventListeners.prototype.setListeners = function (listeners) {\r\n        this.listeners = listeners;\r\n    };\r\n    return EventListeners;\r\n}());\r\nexports.EventListeners = EventListeners;\r\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/models/EventListeners.ts?')},"./ts/com/genb/base/models/EventObject.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.EventObject = void 0;\r\nvar StringUtils_1 = __webpack_require__(/*! ../utils/StringUtils */ "./ts/com/genb/base/utils/StringUtils.ts");\r\n/**\r\n * Event object\r\n *\r\n * @export\r\n * @class EventObject\r\n */\r\nvar EventObject = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of EventObject.\r\n     *\r\n     * @param {string} type\r\n     * @param {*} [data]\r\n     * @memberof EventObject\r\n     */\r\n    function EventObject(type, data) {\r\n        this.type = type;\r\n        if (StringUtils_1.StringUtils.isDefined(data))\r\n            this.setData(data);\r\n    }\r\n    /**\r\n     * Gets an event type.\r\n     *\r\n     * @returns {string}\r\n     * @memberof EventObject\r\n     */\r\n    EventObject.prototype.getType = function () {\r\n        return this.type;\r\n    };\r\n    /**\r\n     * Sets an event type.\r\n     *\r\n     * @param {string} type\r\n     * @memberof EventObject\r\n     */\r\n    EventObject.prototype.setType = function (type) {\r\n        this.type = type;\r\n    };\r\n    /**\r\n     * Gets a data.\r\n     *\r\n     * @returns {*}\r\n     * @memberof EventObject\r\n     */\r\n    EventObject.prototype.getData = function () {\r\n        return this.data;\r\n    };\r\n    /**\r\n     * Sets a data.\r\n     *\r\n     * @param {*} data\r\n     * @memberof EventObject\r\n     */\r\n    EventObject.prototype.setData = function (data) {\r\n        this.data = data;\r\n    };\r\n    EventObject.COMPLETE = "complete";\r\n    return EventObject;\r\n}());\r\nexports.EventObject = EventObject;\r\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/models/EventObject.ts?')},"./ts/com/genb/base/services/EventDispatcherService.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.EventDispatcherService = void 0;\r\nvar EventListener_1 = __webpack_require__(/*! ../models/EventListener */ "./ts/com/genb/base/models/EventListener.ts");\r\nvar EventListeners_1 = __webpack_require__(/*! ../models/EventListeners */ "./ts/com/genb/base/models/EventListeners.ts");\r\nvar EventDispatcherService = /** @class */ (function () {\r\n    function EventDispatcherService() {\r\n        this.listeners = new EventListeners_1.EventListeners();\r\n    }\r\n    /**\r\n     *\r\n     * service.addEventListener(Event.COMPLETE, handler);\r\n     *\r\n     */\r\n    EventDispatcherService.prototype.addEventListener = function (type, handler, scope) {\r\n        var eventListener = new EventListener_1.EventListener(type, handler, scope);\r\n        this.listeners.addEventListener(type, eventListener);\r\n    };\r\n    EventDispatcherService.prototype.removeEventListener = function (type) {\r\n        this.listeners.removeEventListener(type);\r\n    };\r\n    EventDispatcherService.prototype.removeAllEventListeners = function () {\r\n        this.listeners.empty();\r\n    };\r\n    EventDispatcherService.prototype.dispatchEvent = function (type, data) {\r\n        var eventListeners = this.listeners.getEventListenersListByType(type);\r\n        eventListeners.forEach(function (eventListener) {\r\n            eventListener.getHandler().call(eventListener.getScope(), data);\r\n        });\r\n    };\r\n    return EventDispatcherService;\r\n}());\r\nexports.EventDispatcherService = EventDispatcherService;\r\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/services/EventDispatcherService.ts?')},"./ts/com/genb/base/services/FormService.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.FormService = void 0;\r\nvar EventDispatcherService_1 = __webpack_require__(/*! ./EventDispatcherService */ "./ts/com/genb/base/services/EventDispatcherService.ts");\r\nvar BaseUtils_1 = __webpack_require__(/*! ../utils/BaseUtils */ "./ts/com/genb/base/utils/BaseUtils.ts");\r\nvar Log_1 = __webpack_require__(/*! ../utils/Log */ "./ts/com/genb/base/utils/Log.ts");\r\n/**\r\n * Form services facade\r\n *\r\n * @export\r\n * @class FormService\r\n * @extends {EventDispatcherService}\r\n */\r\nvar FormService = /** @class */ (function (_super) {\r\n    __extends(FormService, _super);\r\n    function FormService() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Makes a POST request.\r\n     *\r\n     * @param {string} url\r\n     * @param {(string | FormData)} postData\r\n     * @returns {Promise<any>}\r\n     * @memberof FormService\r\n     */\r\n    FormService.prototype.post = function (url, postData) {\r\n        return new Promise(function (resolve, reject) {\r\n            var request = new XMLHttpRequest();\r\n            request.open(FormService.POST, url, true);\r\n            request.addEventListener("load", function (event) {\r\n                if (request.status === FormService.STATUS_FORBIDDEN) {\r\n                    alert("You\'ve been logged out. Please try again.");\r\n                }\r\n                else if (request.status === FormService.STATUS_INTERNAL_SERVER_ERROR) {\r\n                    Log_1.Log.warn("There was an error while processing your request.", request.statusText, request.responseText);\r\n                    reject(request.responseText);\r\n                }\r\n                else if (request.statusText === FormService.OK &&\r\n                    BaseUtils_1.BaseUtils.isObjectDefined(resolve)) {\r\n                    resolve(request.responseText);\r\n                }\r\n            });\r\n            if (!!postData) {\r\n                request.send(postData);\r\n            }\r\n            else {\r\n                request.send();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Makes a GET request.\r\n     *\r\n     * @public\r\n     * @param {string} url\r\n     * @param {Function} [resolve]\r\n     * @memberof FormService\r\n     */\r\n    FormService.prototype.get = function (url, resolve) {\r\n        var request = new XMLHttpRequest();\r\n        request.open(FormService.GET, url);\r\n        request.addEventListener("load", function (event) {\r\n            if (request.status === FormService.STATUS_FORBIDDEN) {\r\n                alert("You\'ve been logged out. Please try again.");\r\n            }\r\n            else if (request.status === FormService.STATUS_INTERNAL_SERVER_ERROR) {\r\n                alert("There was an error while processing your request.");\r\n            }\r\n            else if (request.status === FormService.STATUS_OK &&\r\n                BaseUtils_1.BaseUtils.isObjectDefined(resolve)) {\r\n                resolve(request.responseText);\r\n            }\r\n        });\r\n        request.send();\r\n    };\r\n    FormService.LOAD = "load";\r\n    FormService.OK = "OK";\r\n    FormService.STATUS_OK = 200;\r\n    FormService.STATUS_FORBIDDEN = 403;\r\n    FormService.STATUS_INTERNAL_SERVER_ERROR = 500;\r\n    FormService.GET = "GET";\r\n    FormService.POST = "POST";\r\n    return FormService;\r\n}(EventDispatcherService_1.EventDispatcherService));\r\nexports.FormService = FormService;\r\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/services/FormService.ts?')},"./ts/com/genb/base/utils/BaseUtils.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.BaseUtils = void 0;\r\nvar StringUtils_1 = __webpack_require__(/*! ./StringUtils */ "./ts/com/genb/base/utils/StringUtils.ts");\r\nvar Enviroment_1 = __webpack_require__(/*! ../models/Enviroment */ "./ts/com/genb/base/models/Enviroment.ts");\r\n/**\r\n * Base utilities.\r\n *\r\n * @export\r\n * @class BaseUtils\r\n */\r\nvar BaseUtils = /** @class */ (function () {\r\n    function BaseUtils() {\r\n    }\r\n    /**\r\n     * Checks if an object is defined.\r\n     *\r\n     * @public\r\n     * @static\r\n     * @param {*} s\r\n     * @returns {boolean}\r\n     * @memberof BaseUtils\r\n     */\r\n    BaseUtils.isObjectDefined = function (s) {\r\n        try {\r\n            return typeof s !== \'undefined\' && s !== null;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Checks if object is not empty.\r\n     *\r\n     * @public\r\n     * @static\r\n     * @param {*} object\r\n     * @returns {boolean}\r\n     * @memberof BaseUtils\r\n     */\r\n    BaseUtils.isObjectNotEmpty = function (object) {\r\n        return (this.isObjectDefined(object) &&\r\n            Object.getOwnPropertyNames(object).length !== 0);\r\n    };\r\n    /**\r\n     * Navigates to an URL address.\r\n     *\r\n     * @param {string} url\r\n     * @memberof BaseUtils\r\n     */\r\n    BaseUtils.navigateToUrl = function (url) {\r\n        window.location.href = url;\r\n    };\r\n    BaseUtils.isLocalEnviroment = function () {\r\n        return StringUtils_1.StringUtils.equals(this.getEnviroment(), Enviroment_1.Enviroment.LOCAL);\r\n    };\r\n    BaseUtils.isSandboxEnviroment = function () {\r\n        return StringUtils_1.StringUtils.equals(this.getEnviroment(), Enviroment_1.Enviroment.SANDBOX);\r\n    };\r\n    BaseUtils.isProductionEnviroment = function () {\r\n        return StringUtils_1.StringUtils.equals(this.getEnviroment(), Enviroment_1.Enviroment.PRODUCTION);\r\n    };\r\n    Object.defineProperty(BaseUtils, "hostname", {\r\n        get: function () {\r\n            return window.location.hostname;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    BaseUtils.getEnviroment = function () {\r\n        var element = document.querySelector(\'meta[property="vis:env"]\');\r\n        var enviroment = Enviroment_1.Enviroment.LOCAL;\r\n        if (BaseUtils.isObjectDefined(element)) {\r\n            enviroment =\r\n                BaseUtils.isObjectDefined(element) && element.getAttribute(\'content\');\r\n        }\r\n        else {\r\n            var hostname = window.location.hostname;\r\n            enviroment = StringUtils_1.StringUtils.equals(hostname, Enviroment_1.Enviroment.PRODUCTION_HOSTNAME)\r\n                ? Enviroment_1.Enviroment.PRODUCTION\r\n                : Enviroment_1.Enviroment.SANDBOX;\r\n        }\r\n        return enviroment;\r\n    };\r\n    BaseUtils.UNDEFINED = undefined;\r\n    BaseUtils.NULL = null;\r\n    return BaseUtils;\r\n}());\r\nexports.BaseUtils = BaseUtils;\r\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/utils/BaseUtils.ts?')},"./ts/com/genb/base/utils/HTMLUtils.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.HTMLUtils = void 0;\r\nvar BaseUtils_1 = __webpack_require__(/*! ./BaseUtils */ "./ts/com/genb/base/utils/BaseUtils.ts");\r\nvar Log_1 = __webpack_require__(/*! ./Log */ "./ts/com/genb/base/utils/Log.ts");\r\nvar HTMLUtils = /** @class */ (function () {\r\n    function HTMLUtils() {\r\n    }\r\n    HTMLUtils.get = function (selector) {\r\n        var element = document.querySelector(selector);\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(element)) {\r\n            Log_1.Log.warn("Element \\"" + selector + "\\" is not defined.");\r\n        }\r\n        return element;\r\n    };\r\n    HTMLUtils.input = function (selector) {\r\n        return HTMLUtils.get(selector);\r\n    };\r\n    HTMLUtils.list = function (selector) {\r\n        var elementList = document.querySelectorAll(selector);\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(elementList)) {\r\n            Log_1.Log.warn("Elements \\"" + selector + "\\" are not defined.");\r\n        }\r\n        return elementList;\r\n    };\r\n    HTMLUtils.array = function (selector) {\r\n        return Array.from(HTMLUtils.list(selector));\r\n    };\r\n    HTMLUtils.firstToHTMLElement = function (elements) {\r\n        if (elements.length > 0) {\r\n            return elements[0];\r\n        }\r\n    };\r\n    /**\r\n     * Checks if DOM element selected by given CSS selector exists.\r\n     *\r\n     * @public\r\n     * @static\r\n     * @param {string} selector\r\n     * @returns\r\n     * @memberof HTMLUtils\r\n     */\r\n    HTMLUtils.exists = function (cssSelector) {\r\n        var element = document.querySelector(cssSelector);\r\n        return BaseUtils_1.BaseUtils.isObjectDefined(element);\r\n    };\r\n    HTMLUtils.getCookie = function (name) {\r\n        var cookieValue = null;\r\n        if (document.cookie && document.cookie !== \'\') {\r\n            var cookies = document.cookie.split(\';\');\r\n            for (var i = 0; i < cookies.length; i++) {\r\n                var cookie = cookies[i].trim();\r\n                // Does this cookie string begin with the name we want?\r\n                if (cookie.substring(0, name.length + 1) === name + \'=\') {\r\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cookieValue;\r\n    };\r\n    return HTMLUtils;\r\n}());\r\nexports.HTMLUtils = HTMLUtils;\r\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/utils/HTMLUtils.ts?')},"./ts/com/genb/base/utils/Log.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Log = void 0;\r\nvar StringUtils_1 = __webpack_require__(/*! ./StringUtils */ "./ts/com/genb/base/utils/StringUtils.ts");\r\nvar Log = /** @class */ (function () {\r\n    function Log() {\r\n    }\r\n    /**\r\n     * Sets enviroment variable.\r\n     *\r\n     * @static\r\n     * @param {string} environment\r\n     * @memberof Log\r\n     */\r\n    Log.setEnvironment = function (environment) {\r\n        this.isDevelopment = StringUtils_1.StringUtils.equals(environment, "development");\r\n    };\r\n    /**\r\n     * Displays log objects.\r\n     *\r\n     * @static\r\n     * @param {*} [message]\r\n     * @param {...any[]} optionalParams\r\n     * @memberof Log\r\n     */\r\n    Log.log = function (message) {\r\n        var optionalParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            optionalParams[_i - 1] = arguments[_i];\r\n        }\r\n        if (!this.isDevelopment) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        console.log.apply(console, __spreadArrays(["%c" + this.getNow(), "color: #008000",\r\n            message], optionalParams));\r\n    };\r\n    /**\r\n     * Displays warn objects.\r\n     *\r\n     * @static\r\n     * @param {*} [message]\r\n     * @param {...any[]} optionalParams\r\n     * @memberof Log\r\n     */\r\n    Log.warn = function (message) {\r\n        var optionalParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            optionalParams[_i - 1] = arguments[_i];\r\n        }\r\n        if (!this.isDevelopment) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        console.warn.apply(console, __spreadArrays(["%c" + this.getNow(), "color: #FF7F00",\r\n            message], optionalParams));\r\n    };\r\n    /**\r\n     * Displays error objects.\r\n     *\r\n     * @static\r\n     * @param {*} [message]\r\n     * @param {...any[]} optionalParams\r\n     * @memberof Log\r\n     */\r\n    Log.error = function (message) {\r\n        var optionalParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            optionalParams[_i - 1] = arguments[_i];\r\n        }\r\n        if (!this.isDevelopment) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        console.error.apply(console, __spreadArrays(["" + this.getNow(), message], optionalParams));\r\n    };\r\n    /**\r\n     * Asserts log objects if condition is met.\r\n     *\r\n     * @static\r\n     * @param {boolean} [condition]\r\n     * @param {string} [message]\r\n     * @param {...any[]} data\r\n     * @memberof Log\r\n     */\r\n    Log.assert = function (condition, message) {\r\n        var data = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            data[_i - 2] = arguments[_i];\r\n        }\r\n        if (!this.isDevelopment) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        console.assert.apply(console, __spreadArrays([condition, "%c" + this.getNow(), "color: #008000",\r\n            message], data));\r\n    };\r\n    /**\r\n     * Displays breakpoint label and log objects.\r\n     *\r\n     * @static\r\n     * @param {string} [label]\r\n     * @param {...any[]} optionalParams\r\n     * @memberof Log\r\n     */\r\n    Log.breakpoint = function (label) {\r\n        var optionalParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            optionalParams[_i - 1] = arguments[_i];\r\n        }\r\n        if (!this.isDevelopment) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        console.log.apply(console, __spreadArrays(["%c" + this.getNow() + " " + label, "background-color: #144E8B; color:#fff"], optionalParams));\r\n    };\r\n    /**\r\n     * Displays breakpoint fatal error label and log objects.\r\n     *\r\n     * @static\r\n     * @param {string} [label]\r\n     * @param {...any[]} optionalParams\r\n     * @memberof Log\r\n     */\r\n    Log.fatal = function (label) {\r\n        var optionalParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            optionalParams[_i - 1] = arguments[_i];\r\n        }\r\n        if (!this.isDevelopment) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        console.log.apply(console, __spreadArrays(["%c" + this.getNow() + " " + label, "background-color: #c90000; color:#fff"], optionalParams));\r\n    };\r\n    /**\r\n     * Displays breakpoint success label and log objects.\r\n     *\r\n     * @static\r\n     * @param {string} [label]\r\n     * @param {...any[]} optionalParams\r\n     * @memberof Log\r\n     */\r\n    Log.success = function (label) {\r\n        var optionalParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            optionalParams[_i - 1] = arguments[_i];\r\n        }\r\n        if (!this.isDevelopment) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        console.log.apply(console, __spreadArrays(["%c" + this.getNow() + " " + label, "background-color: #008000; color:#fff"], optionalParams));\r\n    };\r\n    Log.info = function (label) {\r\n        var optionalParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            optionalParams[_i - 1] = arguments[_i];\r\n        }\r\n        if (!this.isDevelopment) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        console.log.apply(console, __spreadArrays(["%c" + this.getNow() + " " + label, "background-color: #4AAEFB; color:#fff"], optionalParams));\r\n    };\r\n    /**\r\n     * Gets window perfomance now value.\r\n     *\r\n     * @private\r\n     * @static\r\n     * @returns {string}\r\n     * @memberof Log\r\n     */\r\n    Log.getNow = function () {\r\n        return (window.performance.now() / 1000).toFixed(3);\r\n    };\r\n    Log.isDevelopment = true;\r\n    return Log;\r\n}());\r\nexports.Log = Log;\r\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/utils/Log.ts?')},"./ts/com/genb/base/utils/StringUtils.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.StringUtils = void 0;\r\n/**\r\n * String utilities\r\n *\r\n * @export\r\n * @class StringUtils\r\n */\r\nvar StringUtils = /** @class */ (function () {\r\n    function StringUtils() {\r\n    }\r\n    /**\r\n     * Checks if a string is defined.\r\n     *\r\n     * @static\r\n     * @param {string} s\r\n     * @returns {boolean}\r\n     * @memberof StringUtils\r\n     */\r\n    StringUtils.isDefined = function (s) {\r\n        return typeof s === "string";\r\n    };\r\n    /**\r\n     * Checks if a string is empty.\r\n     *\r\n     * @static\r\n     * @param {string} s\r\n     * @returns\r\n     * @memberof StringUtils\r\n     */\r\n    StringUtils.isEmpty = function (s) {\r\n        return typeof s === "string" && s.length === 0;\r\n    };\r\n    /**\r\n     * Checks if a string is not empty.\r\n     *\r\n     * @static\r\n     * @param {string} s\r\n     * @returns {boolean}\r\n     * @memberof StringUtils\r\n     */\r\n    StringUtils.isNotEmpty = function (s) {\r\n        return !this.isEmpty(s);\r\n    };\r\n    /**\r\n     * Checks if two strings are equal.\r\n     *\r\n     * @static\r\n     * @param {string} string1\r\n     * @param {string} string2\r\n     * @returns {boolean}\r\n     * @memberof StringUtils\r\n     */\r\n    StringUtils.equals = function (string1, string2) {\r\n        return string1 === string2;\r\n    };\r\n    /**\r\n     * Gets an unique identifier.\r\n     *\r\n     * @static\r\n     * @returns {string}\r\n     * @memberof StringUtils\r\n     */\r\n    StringUtils.getUID = function () {\r\n        var timestamp = new Date().getTime();\r\n        return timestamp.toString();\r\n    };\r\n    StringUtils.uuidv4 = function () {\r\n        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {\r\n            var r = (Math.random() * 16) | 0;\r\n            var v = c === "x" ? r : (r & 0x3) | 0x8;\r\n            return v.toString(16);\r\n        });\r\n    };\r\n    /**\r\n     * Checks if e-mail string is valid.\r\n     *\r\n     * @static\r\n     * @param {string} email\r\n     * @returns {boolean}\r\n     * @memberof StringUtils\r\n     */\r\n    StringUtils.isEmailValid = function (email) {\r\n        return /^[a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(email);\r\n    };\r\n    /**\r\n     * Checks if URL string is valid.\r\n     *\r\n     * @static\r\n     * @param {string} url\r\n     * @returns {boolean}\r\n     * @memberof StringUtils\r\n     */\r\n    StringUtils.isUrlValid = function (url) {\r\n        return /((http|ftp|https):\\/\\/)?[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:\\/~+#-]*[\\w@?^=%&amp;\\/~+#-])?/.test(url);\r\n    };\r\n    /**\r\n     * Checks if a string is a number.\r\n     *\r\n     * @static\r\n     * @param {string} s\r\n     * @returns {boolean}\r\n     * @memberof StringUtils\r\n     */\r\n    StringUtils.isNumber = function (s) {\r\n        return /^-?\\d*[\\.]?\\d+$/.test(s);\r\n    };\r\n    /**\r\n     * Checks if a string is in a currency format.\r\n     *\r\n     * @static\r\n     * @param {string} s\r\n     * @returns {boolean}\r\n     * @memberof StringUtils\r\n     */\r\n    StringUtils.isCurrency = function (s) {\r\n        return /(?=.)^\\$?(([1-9][0-9]{0,2}(,[0-9]{3})*)|[0-9]+)?(\\.[0-9]{1,2})?$/.test(s);\r\n    };\r\n    /**\r\n     * Extracts Form Builder field type string.\r\n     *\r\n     * @static\r\n     * @param {string} className\r\n     * @returns {string}\r\n     * @memberof StringUtils\r\n     */\r\n    StringUtils.extractFormBuilderFormFieldType = function (className) {\r\n        return className.split(" ")[0].split("-")[1];\r\n    };\r\n    /**\r\n     * Extracts file name from path.\r\n     *\r\n     * @static\r\n     * @param {string} path\r\n     * @returns {string}\r\n     * @memberof StringUtils\r\n     */\r\n    StringUtils.extractFileNameFromPath = function (path) {\r\n        return path.replace(/^.*[\\\\\\/]/, "");\r\n    };\r\n    /**\r\n     * Converts string to boolean.\r\n     *\r\n     * @static\r\n     * @param {string} s\r\n     * @returns {boolean}\r\n     * @memberof StringUtils\r\n     */\r\n    StringUtils.toBoolean = function (s) {\r\n        return /(true|True|1)/g.test(s);\r\n    };\r\n    StringUtils.toString = function (b) {\r\n        return b ? "true" : "false";\r\n    };\r\n    StringUtils.stripFromQuotes = function (expression) {\r\n        var matches = /([\'"]?)(.*)\\1/.exec(expression);\r\n        if (matches.length > 2) {\r\n            return matches[2];\r\n        }\r\n        return StringUtils.EMPTY;\r\n    };\r\n    StringUtils.hashCode = function (s) {\r\n        return s\r\n            .split("")\r\n            .reduce(function (prevHash, currVal) {\r\n            return (prevHash << 5) - prevHash + currVal.charCodeAt(0);\r\n        }, 0);\r\n    };\r\n    StringUtils.EMPTY = "";\r\n    StringUtils.TRUE = "true";\r\n    StringUtils.FALSE = "false";\r\n    StringUtils.URL_TARGET_BLANK = "_blank";\r\n    StringUtils.URL_TARGET_SELF = "_self";\r\n    return StringUtils;\r\n}());\r\nexports.StringUtils = StringUtils;\r\n\n\n//# sourceURL=webpack:///./ts/com/genb/base/utils/StringUtils.ts?')},"./ts/com/quickhellou/AppController.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AppController = void 0;\r\nvar BaseUtils_1 = __webpack_require__(/*! ../genb/base/utils/BaseUtils */ \"./ts/com/genb/base/utils/BaseUtils.ts\");\r\nvar HTMLUtils_1 = __webpack_require__(/*! ../genb/base/utils/HTMLUtils */ \"./ts/com/genb/base/utils/HTMLUtils.ts\");\r\nvar AppControllerEvent_1 = __webpack_require__(/*! ./AppControllerEvent */ \"./ts/com/quickhellou/AppControllerEvent.ts\");\r\nvar CallEvent_1 = __webpack_require__(/*! ./CallEvent */ \"./ts/com/quickhellou/CallEvent.ts\");\r\nvar LoadingParams_1 = __webpack_require__(/*! ./LoadingParams */ \"./ts/com/quickhellou/LoadingParams.ts\");\r\nvar Util_1 = __webpack_require__(/*! ./Util */ \"./ts/com/quickhellou/Util.ts\");\r\nvar IconSet_1 = __webpack_require__(/*! ./IconSet */ \"./ts/com/quickhellou/IconSet.ts\");\r\nvar HTMLTemplates_1 = __webpack_require__(/*! ./HTMLTemplates */ \"./ts/com/quickhellou/HTMLTemplates.ts\");\r\nvar StringUtils_1 = __webpack_require__(/*! ../genb/base/utils/StringUtils */ \"./ts/com/genb/base/utils/StringUtils.ts\");\r\nvar EventDispatcherService_1 = __webpack_require__(/*! ../genb/base/services/EventDispatcherService */ \"./ts/com/genb/base/services/EventDispatcherService.ts\");\r\nvar InvitationView_1 = __webpack_require__(/*! ./InvitationView */ \"./ts/com/quickhellou/InvitationView.ts\");\r\nvar RemoteVideos_1 = __webpack_require__(/*! ./application/RemoteVideos */ \"./ts/com/quickhellou/application/RemoteVideos.ts\");\r\nvar Room_1 = __webpack_require__(/*! ./application/model/Room */ \"./ts/com/quickhellou/application/model/Room.ts\");\r\nvar RemoteVideosEvent_1 = __webpack_require__(/*! ./application/model/RemoteVideosEvent */ \"./ts/com/quickhellou/application/model/RemoteVideosEvent.ts\");\r\nvar MediaCommunication_1 = __webpack_require__(/*! ./application/controller/MediaCommunication */ \"./ts/com/quickhellou/application/controller/MediaCommunication.ts\");\r\nvar MediaEvent_1 = __webpack_require__(/*! ./application/model/MediaEvent */ \"./ts/com/quickhellou/application/model/MediaEvent.ts\");\r\nvar Log_1 = __webpack_require__(/*! ../genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\r\nvar ScreenShareButtonComponent_1 = __webpack_require__(/*! ./application/controller/ScreenShareButtonComponent */ \"./ts/com/quickhellou/application/controller/ScreenShareButtonComponent.ts\");\r\nvar ShareScreenEvent_1 = __webpack_require__(/*! ./application/model/ShareScreenEvent */ \"./ts/com/quickhellou/application/model/ShareScreenEvent.ts\");\r\nvar VideoTrackEventOptions_1 = __webpack_require__(/*! ./application/model/VideoTrackEventOptions */ \"./ts/com/quickhellou/application/model/VideoTrackEventOptions.ts\");\r\nvar RoomSelection_1 = __webpack_require__(/*! ./RoomSelection */ \"./ts/com/quickhellou/RoomSelection.ts\");\r\nvar UIConstants_1 = __webpack_require__(/*! ./UIConstants */ \"./ts/com/quickhellou/UIConstants.ts\");\r\nvar FormService_1 = __webpack_require__(/*! ../../com/genb/base/services/FormService */ \"./ts/com/genb/base/services/FormService.ts\");\r\nvar ColliderServiceEvent_1 = __webpack_require__(/*! ./application/model/ColliderServiceEvent */ \"./ts/com/quickhellou/application/model/ColliderServiceEvent.ts\");\r\n/**\r\n * Quick Hellou controller.\r\n *\r\n * @export\r\n * @class AppController\r\n */\r\nvar AppController = /** @class */ (function (_super) {\r\n    __extends(AppController, _super);\r\n    /**\r\n     * Creates an instance of AppController.\r\n     *\r\n     * @param roomId the room ID\r\n     * @param initType the init type\r\n     * @param videoAppUrl the video app URL\r\n     *\r\n     * @memberof AppController\r\n     */\r\n    function AppController(roomId, initType, videoAppUrl) {\r\n        var _this = _super.call(this) || this;\r\n        _this.hide = function (element) {\r\n            element.classList.add('hidden');\r\n        };\r\n        _this.show = function (element) {\r\n            element.classList.remove('hidden');\r\n        };\r\n        _this.deactivate = function (element) {\r\n            element.classList.remove('active');\r\n        };\r\n        _this.loadingParams = new LoadingParams_1.LoadingParams(roomId);\r\n        _this.initType = initType;\r\n        _this.videoAppUrl = videoAppUrl;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Intializes the controller.\r\n     *\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.init = function () {\r\n        var _this = this;\r\n        var formService = new FormService_1.FormService();\r\n        formService\r\n            .post(this.videoAppUrl + \"/api/video-settings/\" + this.loadingParams.roomID)\r\n            .then(function (data) {\r\n            _this.loadingParams.load(JSON.parse(data));\r\n            _this.onParamsLoaded();\r\n        });\r\n    };\r\n    /**\r\n     * Destroy application transmitter.\r\n     */\r\n    AppController.prototype.destroy = function () {\r\n        this.dispatchEvent(AppControllerEvent_1.AppControllerEvent.DESTROY);\r\n    };\r\n    AppController.prototype.onParamsLoaded = function () {\r\n        var _this = this;\r\n        this.createCommunication();\r\n        Log_1.Log.log('Initializing; Room ID ' +\r\n            (BaseUtils_1.BaseUtils.isObjectDefined(this.loadingParams.roomID)\r\n                ? \"= \" + this.loadingParams.roomID\r\n                : 'not defined') +\r\n            '.');\r\n        this.hangupSvg = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.hangupSvg);\r\n        this.icons = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.icons);\r\n        this.localVideo = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.localVideo);\r\n        this.miniVideo = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.miniVideo);\r\n        this.sharingDiv = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.sharingDiv);\r\n        this.initRemoteVideos();\r\n        this.videosDiv = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.videosDiv);\r\n        this.roomLinkHref = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.roomLinkHref);\r\n        this.roomLinkHrefWaiting = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.roomLinkHrefWaiting);\r\n        this.rejoinDiv = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.rejoinDiv);\r\n        this.textChatButton = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.textChatButton);\r\n        this.rejoinButton = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.rejoinButton);\r\n        this.newRoomButton = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.newRoomButton);\r\n        this.fullscreenIcon = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.fullscreenSvg);\r\n        this.hellouLogoFooterDiv = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.hellouLogoFooterDiv);\r\n        this.overlayDiv = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.overlayDiv);\r\n        this.overlayWaitingDiv = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.overlayWaitingDiv);\r\n        this.closeOverlayButton = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.closeOverlayButton);\r\n        this.textChatWindow = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.textChat.chatWindow);\r\n        this.textChatCloseButton = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.textChat.closeButton);\r\n        this.textChatCollapseButton = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.textChat.collapseButton);\r\n        this.textChatMessageList = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.textChat.messageList);\r\n        this.textChatInput = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.textChat.input);\r\n        this.newRoomButton.addEventListener('click', function () {\r\n            _this.onNewRoomClick();\r\n        }, false);\r\n        this.rejoinButton.addEventListener('click', function () {\r\n            _this.onRejoinClick();\r\n        }, false);\r\n        this.closeOverlayButton.addEventListener('click', function () {\r\n            _this.onCloseOverlayClick();\r\n        }, false);\r\n        this.textChatButton.addEventListener('click', function () {\r\n            _this.onTextChatButtonClick();\r\n        }, false);\r\n        this.textChatCloseButton.addEventListener('click', function () {\r\n            _this.onTextChatCloseButtonClick();\r\n        }, false);\r\n        this.textChatCollapseButton.addEventListener('click', function (event) {\r\n            _this.onTextChatCollapseButtonClick();\r\n        }, false);\r\n        this.textChatInput.addEventListener('keyup', function (event) {\r\n            _this.onTextChatInputKeyUp(event);\r\n        }, false);\r\n        var sendTextChatMessageButton = HTMLUtils_1.HTMLUtils.get('.text-chat-window__send-message-button');\r\n        sendTextChatMessageButton.addEventListener('click', function () {\r\n            _this.sendTextChatMessageButtonClickHandler();\r\n        });\r\n        var overlayButtonsList = HTMLUtils_1.HTMLUtils.array('.button--send-invitation');\r\n        var sendInvitationCloserButtonList = HTMLUtils_1.HTMLUtils.array('.overlay__closer-button');\r\n        sendInvitationCloserButtonList.forEach(function (sendInvitationCloserButton) {\r\n            sendInvitationCloserButton.addEventListener('click', function (event) {\r\n                _this.closeOverlay(HTMLUtils_1.HTMLUtils.get(\".\" + sendInvitationCloserButton.dataset.screen), HTMLUtils_1.HTMLUtils.array(\".button--overlay[data-screen='\" + sendInvitationCloserButton.dataset.screen + \"']\"));\r\n            });\r\n        });\r\n        overlayButtonsList.forEach(function (overlayButton) {\r\n            var screen = overlayButton.dataset.screen;\r\n            var overlaySelector = \".\" + screen;\r\n            var selectedOverlayButtonsList = HTMLUtils_1.HTMLUtils.array(\".button--overlay[data-screen='\" + screen + \"']\");\r\n            overlayButton.onclick = function () {\r\n                _this.closeAllOverlays();\r\n                var sendInvitationOverlay = HTMLUtils_1.HTMLUtils.get(overlaySelector);\r\n                sendInvitationOverlay.classList.remove('hidden');\r\n                var sendInvitationResult = HTMLUtils_1.HTMLUtils.get(\".overlay--\" + screen + \"__result\");\r\n                sendInvitationResult.classList.add('hidden');\r\n                var sendInvitationResultMessage = HTMLUtils_1.HTMLUtils.get(\".overlay--\" + screen + \"__result-message\");\r\n                sendInvitationResultMessage.innerHTML = '';\r\n                var sendInvitationBody = HTMLUtils_1.HTMLUtils.get(\".overlay--\" + screen + \"__body\");\r\n                sendInvitationBody.classList.remove('hidden');\r\n                selectedOverlayButtonsList.forEach(function (inviteButton) {\r\n                    inviteButton.classList.add('js-active');\r\n                });\r\n            };\r\n        });\r\n        var schedulerButton = HTMLUtils_1.HTMLUtils.get('.button--setup-future-talk');\r\n        schedulerButton.addEventListener('click', function (event) {\r\n            var setupFutureTalkOverlay = HTMLUtils_1.HTMLUtils.get('.overlay--setup-future-talk');\r\n            if (BaseUtils_1.BaseUtils.isObjectDefined(setupFutureTalkOverlay)) {\r\n                setupFutureTalkOverlay.classList.remove('hidden');\r\n            }\r\n        });\r\n        this.shareScreenButton = new ScreenShareButtonComponent_1.ScreenShareButtonComponent(HTMLUtils_1.HTMLUtils.get('.button--share-screen'));\r\n        if (!Util_1.Util.isMobile() && !Util_1.Util.isEdgeHTML()) {\r\n            this.shareScreenButton.init();\r\n            this.shareScreenButton.addEventListener(ShareScreenEvent_1.ShareScreenEvent.START_SHARING, function () {\r\n                _this.mediaCommunication.displayMedia();\r\n            }, this);\r\n            this.shareScreenButton.addEventListener(ShareScreenEvent_1.ShareScreenEvent.STOP_SHARING, function () {\r\n                _this.mediaCommunication.stopSendingDisplayMedia();\r\n            }, this);\r\n        }\r\n        else {\r\n            this.shareScreenButton.disableSharingState();\r\n        }\r\n        // send invitation view\r\n        // tslint:disable-next-line:no-unused-expression\r\n        new InvitationView_1.InvitationView(HTMLUtils_1.HTMLUtils.get('.send-invitation'));\r\n        // chat window handlers\r\n        var chatWindowInput = HTMLUtils_1.HTMLUtils.get('.text-chat-window__message-input');\r\n        chatWindowInput.addEventListener('focusin', function (event) {\r\n            if (chatWindowInput.value === 'Type your message here') {\r\n                chatWindowInput.value = '';\r\n            }\r\n        });\r\n        chatWindowInput.addEventListener('focusout', function () {\r\n            if (StringUtils_1.StringUtils.isEmpty(chatWindowInput.value)) {\r\n                chatWindowInput.value = 'Type your message here';\r\n            }\r\n        });\r\n        this.muteAudioIconSet = new IconSet_1.IconSet(UIConstants_1.UIConstants.muteAudioSvg);\r\n        this.muteVideoIconSet = new IconSet_1.IconSet(UIConstants_1.UIConstants.muteVideoSvg);\r\n        this.fullscreenIconSet = new IconSet_1.IconSet(UIConstants_1.UIConstants.fullscreenSvg);\r\n        this.roomLink = StringUtils_1.StringUtils.EMPTY;\r\n        this.localStream = null;\r\n        this.createCall();\r\n        // If the params has a roomID specified, we should connect to that room\r\n        // immediately. If not, show the room selection UI.\r\n        if (this.loadingParams.roomID) {\r\n            this.updateInvitationLinks(this.loadingParams.roomID);\r\n            if (StringUtils_1.StringUtils.equals(this.loadingParams.additionalParam, 'setup')) {\r\n                this.roomSelectedHander(this.loadingParams.roomID);\r\n            }\r\n            else {\r\n                // Ask the user to confirm.\r\n                if (!RoomSelection_1.RoomSelection.matchRandomRoomPattern(this.loadingParams.roomID)) {\r\n                    // Show the room name only if it does not match the random room pattern.\r\n                    var confirmJoinRoomSpanElement = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.confirmJoinRoomSpan);\r\n                    confirmJoinRoomSpanElement.textContent = \" \\\"\" + this.loadingParams.roomID + \"\\\"\";\r\n                }\r\n                var confirmJoinDiv_1 = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.confirmJoinDiv);\r\n                this.show(confirmJoinDiv_1);\r\n                var confirmJoinButtonElement = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.confirmJoinButton);\r\n                confirmJoinButtonElement.addEventListener('click', function () {\r\n                    _this.confirmJoin(confirmJoinDiv_1);\r\n                });\r\n                if (this.loadingParams.bypassJoinConfirmation) {\r\n                    this.hide(confirmJoinDiv_1);\r\n                    this.setupCall();\r\n                }\r\n                if (this.initType === 'instant') {\r\n                    this.confirmJoin(confirmJoinDiv_1);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            Log_1.Log.warn('Missing RoomID.');\r\n        }\r\n        window.addEventListener('online', function (event) {\r\n            _this.updateOnlineStatus(event);\r\n        });\r\n        window.addEventListener('offline', function (event) {\r\n            _this.updateOnlineStatus(event);\r\n        });\r\n        if (StringUtils_1.StringUtils.isNotEmpty(this.loadingParams.additionalParam) &&\r\n            StringUtils_1.StringUtils.equals(this.loadingParams.additionalParam, 'invite')) {\r\n            this.openSendInvitationOverlay();\r\n        }\r\n        this.dispatchEvent(AppControllerEvent_1.AppControllerEvent.INITIALIZED);\r\n    };\r\n    /**\r\n     * Creates media communication instance.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.createCommunication = function () {\r\n        this.mediaCommunication = new MediaCommunication_1.MediaCommunication(this.loadingParams);\r\n    };\r\n    /**\r\n     * Opens \"Send Invitation\" overlay.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.openSendInvitationOverlay = function () {\r\n        var _this = this;\r\n        var overlayButtonsList = HTMLUtils_1.HTMLUtils.array('.button--overlay');\r\n        overlayButtonsList.forEach(function () {\r\n            var screen = 'send-invitation';\r\n            var overlaySelector = \".\" + screen;\r\n            var selectedOverlayButtonsList = HTMLUtils_1.HTMLUtils.array(\".button--overlay[data-screen='\" + screen + \"']\");\r\n            _this.closeAllOverlays();\r\n            var sendInvitationOverlay = HTMLUtils_1.HTMLUtils.get(overlaySelector);\r\n            sendInvitationOverlay.classList.remove('hidden');\r\n            var sendInvitationResult = HTMLUtils_1.HTMLUtils.get(\".overlay--\" + screen + \"__result\");\r\n            sendInvitationResult.classList.add('hidden');\r\n            var sendInvitationResultMessage = HTMLUtils_1.HTMLUtils.get(\".overlay--\" + screen + \"__result-message\");\r\n            sendInvitationResultMessage.innerHTML = '';\r\n            var sendInvitationBody = HTMLUtils_1.HTMLUtils.get(\".overlay--\" + screen + \"__body\");\r\n            sendInvitationBody.classList.remove('hidden');\r\n            selectedOverlayButtonsList.forEach(function (inviteButton) {\r\n                inviteButton.classList.add('js-active');\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Closes all overlays.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.closeAllOverlays = function () {\r\n        this.closeOverlay(HTMLUtils_1.HTMLUtils.get(\".send-invitation\"), HTMLUtils_1.HTMLUtils.array(\".button--overlay[data-screen='send-invitation']\"));\r\n    };\r\n    /**\r\n     * Closes an overlay.\r\n     *\r\n     * @private\r\n     * @param {HTMLElement} overlay\r\n     * @param {HTMLElement[]} buttons\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.closeOverlay = function (overlay, buttons) {\r\n        overlay.classList.add('hidden');\r\n        buttons.forEach(function (inviteButton) {\r\n            inviteButton.classList.remove('js-active');\r\n        });\r\n    };\r\n    AppController.prototype.updateOnlineStatus = function (event) {\r\n        var status = navigator.onLine ? 'online' : 'offline';\r\n    };\r\n    /**\r\n     * Handles room selection.\r\n     *\r\n     * @private\r\n     * @param {string} roomId\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.roomSelectedHander = function (roomId) {\r\n        var roomSelectionDiv = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.roomSelection.div);\r\n        // patch to set room url before local stream initialization\r\n        var roomLink = this.loadingParams.hostUrl + \"/r/\" + roomId;\r\n        this.mediaCommunication.setRoom(roomId, roomLink);\r\n        this.pushCallNavigation(new Room_1.Room(roomId, roomLink));\r\n        if (this.localStream) {\r\n            this.attachLocalStream();\r\n        }\r\n        this.hide(roomSelectionDiv);\r\n        this.createCall();\r\n        this.setupCall();\r\n        var schedulerLinkElement = HTMLUtils_1.HTMLUtils.get('footer .button--setup-future-talk');\r\n        schedulerLinkElement.href = \"/scheduler/\" + roomId;\r\n    };\r\n    /**\r\n     * Loads URL parameters into LoadingParams object.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.loadUrlParams = function () {\r\n        var DEFAULT_VIDEO_CODEC = 'VP9';\r\n        var urlParams = Util_1.Util.queryStringToDictionary(window.location.search);\r\n        this.loadingParams.audioSendBitrate = urlParams.asbr;\r\n        this.loadingParams.audioSendCodec = urlParams.asc;\r\n        this.loadingParams.audioRecvBitrate = urlParams.arbr;\r\n        this.loadingParams.audioRecvCodec = urlParams.arc;\r\n        this.loadingParams.opusMaxPbr = urlParams.opusmaxpbr;\r\n        this.loadingParams.opusFec = urlParams.opusfec;\r\n        this.loadingParams.opusDtx = urlParams.opusdtx;\r\n        this.loadingParams.opusStereo = urlParams.stereo;\r\n        this.loadingParams.videoSendBitrate = urlParams.vsbr;\r\n        this.loadingParams.videoSendInitialBitrate = urlParams.vsibr;\r\n        this.loadingParams.videoSendCodec = urlParams.vsc;\r\n        this.loadingParams.videoRecvBitrate = urlParams.vrbr;\r\n        this.loadingParams.videoRecvCodec = urlParams.vrc || DEFAULT_VIDEO_CODEC;\r\n        this.loadingParams.videoFec = urlParams.videofec;\r\n    };\r\n    /**\r\n     * Creates a call.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.createCall = function () {\r\n        var _this = this;\r\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.WEBSOCKET_CLOSED, this.hangup, this);\r\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.REMOTE_HANGUP, function (sessionId) {\r\n            _this.onRemoteHangup(sessionId);\r\n        }, this);\r\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.REMOTE_SDP_PROTOCOL_RECEIVED, function (data) {\r\n            _this.onRemoteSdpProtocolReceived(data.sessionId, data.isRemoteVideoPlaybackAvailable, data.isRemoteDisplayMediaAvailable);\r\n        }, this);\r\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.REMOTE_STREAM_ADDED, function (data) {\r\n            _this.onRemoteStreamAdded(data.sessionId, data.stream);\r\n        }, this);\r\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.LOCAL_STREAM_ADDED, function (stream) {\r\n            _this.onLocalStreamAdded(stream);\r\n        }, this);\r\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.SIGNALING_STATE_CHANGE, function () {\r\n            // no code\r\n        }, this);\r\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.ICE_CONNECTION_STATE_CHANGE, function () {\r\n            // no code\r\n        }, this);\r\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.NEW_ICE_CANDIDATE, function (data) {\r\n            // no code\r\n        }, this);\r\n        this.mediaCommunication.addEventListener(MediaEvent_1.MediaEvent.DISPLAY_MEDIA_DISPLAYED, function () {\r\n            _this.shareScreenButton.unlock();\r\n        }, this);\r\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.REMOTE_TEXT_CHAT_MESSAGE, function (message) {\r\n            _this.onRemoteTextChatMessage(message);\r\n        }, this);\r\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.STATUS_MESSAGE, function (message) {\r\n            Log_1.Log.log(message);\r\n        }, this);\r\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.ERROR, function (message) {\r\n            _this.displayError(message);\r\n        }, this);\r\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.CALLER_STARTED, this.displaySharingInfo, this);\r\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.REMOTE_CLIENT_REGISTERED, function (registerOptions) {\r\n            _this.onRemoteClientRegistered(registerOptions);\r\n        }, this);\r\n        this.mediaCommunication.addEventListener(CallEvent_1.CallEvent.LOCAL_VIDEO_MEDIA_CHANGE, function (options) {\r\n            _this.toggleVideoTrack(options);\r\n        }, this);\r\n        this.mediaCommunication.addEventListener(ColliderServiceEvent_1.ColliderServiceEvent.DESTROY, function () {\r\n            _this.destroy();\r\n        }, this);\r\n        this.mediaCommunication.addEventListener(ShareScreenEvent_1.ShareScreenEvent.NOT_ALLOWED, function () {\r\n            _this.shareScreenButton.enableSharingState();\r\n        }, this);\r\n        this.mediaCommunication.createCall();\r\n        this.show(this.hellouLogoFooterDiv);\r\n        this.show(this.videosDiv);\r\n        this.show(this.overlayDiv);\r\n    };\r\n    /**\r\n     * Handles media track toggling.\r\n     *\r\n     * @private\r\n     * @param {VideoTrackEventOptions} options\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.toggleVideoTrack = function (options) {\r\n        var enabledTrack = options.track;\r\n        this.localStream.getTracks().forEach(function (track) {\r\n            track.enabled = track.id === enabledTrack.id;\r\n        });\r\n        var isCaptureScreenTrack = StringUtils_1.StringUtils.equals(options.type, VideoTrackEventOptions_1.VideoTrackEventOptions.SCREEN_CAPTURE);\r\n        this.shareScreenButton.toggleScreenSharingWithFlag(isCaptureScreenTrack);\r\n        var tracks = __spreadArrays(this.localStream.getAudioTracks(), [\r\n            enabledTrack,\r\n        ]);\r\n        var stream = new MediaStream(tracks);\r\n        try {\r\n            this.miniVideo.srcObject = stream;\r\n        }\r\n        catch (e) {\r\n            Log_1.Log.warn('Unable to attach stream to video element.');\r\n        }\r\n        this.toggleAudioUnMute();\r\n    };\r\n    /**\r\n     * Initializes call setup.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.setupCall = function () {\r\n        var _this = this;\r\n        this.mediaCommunication.connect();\r\n        this.setupUI();\r\n        // Call hangup with async = false. Required to complete multiple\r\n        // clean up steps before page is closed.\r\n        window.onbeforeunload = function () {\r\n            _this.mediaCommunication.hangupCall(false);\r\n        };\r\n        window.onpopstate = function (event) {\r\n            if (!event.state) {\r\n                Log_1.Log.log('Reloading main page.');\r\n                location.href = location.origin;\r\n            }\r\n            else {\r\n                // This could be a forward request to open a room again.\r\n                if (event.state.roomLink) {\r\n                    location.href = event.state.roomLink;\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Attaches local stream.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.attachLocalStream = function () {\r\n        try {\r\n            this.localVideo.srcObject = this.localStream;\r\n            if (!Util_1.Util.isMobile() && !Util_1.Util.isEdgeHTML()) {\r\n                this.shareScreenButton.enableSharingState();\r\n            }\r\n        }\r\n        catch (e) {\r\n            Log_1.Log.log('Unable to attach stream to video element.');\r\n        }\r\n        this.activate(this.localVideo);\r\n        this.show(this.icons);\r\n        this.show(this.fullscreenIcon);\r\n        if (this.localStream.getVideoTracks().length === 0) {\r\n            var muteVideoSVGElement = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.muteVideoSvg);\r\n            this.hide(muteVideoSVGElement);\r\n        }\r\n        if (this.localStream.getAudioTracks().length === 0) {\r\n            var muteAudioSVGElement = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.muteAudioSvg);\r\n            this.hide(muteAudioSVGElement);\r\n        }\r\n    };\r\n    /**\r\n     * Hangs up connection.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.hangup = function () {\r\n        Log_1.Log.log('AppController::hangup (true, from WS)');\r\n        this.hide(this.icons);\r\n        this.transitionToDone();\r\n        // Call hangup with async = true.\r\n        this.mediaCommunication.hangupCall(true);\r\n        // Reset key and mouse event handlers.\r\n        document.onkeypress = null;\r\n        window.onmousemove = null;\r\n    };\r\n    AppController.prototype.sendTextChatMessageButtonClickHandler = function () {\r\n        var message = this.textChatInput.value\r\n            .trim()\r\n            .replace(/(\\r\\n|\\n|\\r)/gm, '');\r\n        if (StringUtils_1.StringUtils.isNotEmpty(message)) {\r\n            this.addLocalMessageHTML(message);\r\n            this.mediaCommunication.sendLocalChatMessage(message);\r\n            this.textChatInput.value = '';\r\n            this.textChatInput.focus();\r\n        }\r\n    };\r\n    /**\r\n     * Handles new room request event.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.onNewRoomClick = function () {\r\n        location.href = location.origin;\r\n    };\r\n    /**\r\n     * Handles rejoin event.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.onRejoinClick = function () {\r\n        this.deactivate(this.rejoinDiv);\r\n        this.hide(this.rejoinDiv);\r\n        this.mediaCommunication.restartCall();\r\n    };\r\n    /**\r\n     * Setups UI.\r\n     *\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.setupUI = function () {\r\n        var _this = this;\r\n        this.iconEventSetup();\r\n        window.addEventListener('mousemove', function () {\r\n            _this.showIcons();\r\n        });\r\n        this.overlayDiv.addEventListener('mousemove', function () {\r\n            _this.showIcons();\r\n        });\r\n        this.overlayDiv.addEventListener('click', function () {\r\n            _this.showIcons();\r\n        });\r\n        document.addEventListener('touchstart', function () {\r\n            _this.showIcons();\r\n        });\r\n        document.addEventListener('click', function () {\r\n            _this.showIcons();\r\n        });\r\n        var muteAudioSVGElement = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.muteAudioSvg);\r\n        muteAudioSVGElement.addEventListener('click', function () {\r\n            _this.toggleAudioMute();\r\n        });\r\n        var muteVideoSVGElement = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.muteVideoSvg);\r\n        muteVideoSVGElement.addEventListener('click', function () {\r\n            _this.toggleVideoMute();\r\n        });\r\n        /*\r\n        const fullscreenSVGElement: HTMLElement = HTMLUtils.get(\r\n          UIConstants.fullscreenSvg\r\n        );\r\n        fullscreenSVGElement.addEventListener(\"click\", (): void => {\r\n          this.toggleFullScreen();\r\n        });\r\n    */\r\n        var hangupSVGElement = HTMLUtils_1.HTMLUtils.get(UIConstants_1.UIConstants.hangupSvg);\r\n        hangupSVGElement.addEventListener('click', function () {\r\n            Log_1.Log.log('hangup click');\r\n            _this.hangup();\r\n            _this.shareScreenButton.disableSharingState();\r\n            _this.closeFullScreen();\r\n        });\r\n        /*\r\n        document.addEventListener(\r\n          \"fullscreenchange\",\r\n          (): void => {\r\n            this.onFullScreenChange();\r\n          },\r\n          false\r\n        );\r\n        document.addEventListener(\r\n          \"webkitfullscreenchange\",\r\n          (): void => {\r\n            this.onFullScreenChange();\r\n          },\r\n          false\r\n        );\r\n        document.addEventListener(\r\n          \"mozfullscreenchange\",\r\n          (event: MouseEvent): void => {\r\n            this.onFullScreenChange();\r\n          },\r\n          false\r\n        );\r\n    */\r\n        Util_1.Util.setUpFullScreen();\r\n    };\r\n    /**\r\n     * Joins the video call.\r\n     *\r\n     * @param confirmJoinDiv\r\n     */\r\n    AppController.prototype.confirmJoin = function (confirmJoinDiv) {\r\n        Log_1.Log.log('confirmJoin');\r\n        this.hide(confirmJoinDiv);\r\n        this.setupCall();\r\n    };\r\n    /**\r\n     * Toggles audio unmuting.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.toggleAudioUnMute = function () {\r\n        this.mediaCommunication.toggleAudioUnMute();\r\n        this.muteAudioIconSet.enable();\r\n    };\r\n    /**\r\n     * Toggles audio muting.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.toggleAudioMute = function () {\r\n        this.mediaCommunication.toggleAudioMute();\r\n        this.muteAudioIconSet.toggle();\r\n    };\r\n    /**\r\n     * Toggles video muting.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.toggleVideoMute = function () {\r\n        this.mediaCommunication.toggleVideoMute();\r\n        this.muteVideoIconSet.toggle();\r\n    };\r\n    /**\r\n     * Handles full screen change event.\r\n     *\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.closeFullScreen = function () {\r\n        var footer = HTMLUtils_1.HTMLUtils.get('.footer');\r\n        var videosWrapList = HTMLUtils_1.HTMLUtils.list('.video-columns-wrap, .videos-wrap, .remote-video-wrap');\r\n        footer.classList.remove('hidden');\r\n        videosWrapList.forEach(function (elem) {\r\n            elem.classList.remove('js-fullscreen');\r\n        });\r\n    };\r\n    /**\r\n     * Toggles full screen.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    /*\r\n    private toggleFullScreen(): void {\r\n      const footer: HTMLElement = HTMLUtils.get(\".footer\");\r\n      const videosWrapList: NodeListOf<HTMLElement> = HTMLUtils.list(\r\n        \".video-columns-wrap, .videos-wrap\"\r\n      );\r\n      if (Util.isFullScreen()) {\r\n        Log.log(\"Exiting fullscreen.\");\r\n        footer.classList.remove(\"hidden\");\r\n        videosWrapList.item(0).classList.remove(\"js-fullscreen\");\r\n        videosWrapList.item(1).classList.remove(\"js-fullscreen\");\r\n        Util.cancelFullScreen();\r\n      } else {\r\n        Log.log(\"Entering fullscreen.\");\r\n        footer.classList.add(\"hidden\");\r\n        videosWrapList.item(0).classList.add(\"js-fullscreen\");\r\n        videosWrapList.item(1).classList.add(\"js-fullscreen\");\r\n        Util.requestFullscreen();\r\n      }\r\n      if (this.fullscreenIconSet) {\r\n        this.fullscreenIconSet.toggle();\r\n      }\r\n    }\r\n  */\r\n    AppController.prototype.iconEventSetup = function () {\r\n        var _this = this;\r\n        this.icons.addEventListener('onmouseenter', function () {\r\n            window.clearTimeout(_this.hideIconsAfterTimeout);\r\n        });\r\n        this.icons.addEventListener('mouseleave', function () {\r\n            _this.setIconTimeout();\r\n        });\r\n    };\r\n    AppController.prototype.setIconTimeout = function () {\r\n        var _this = this;\r\n        if (this.hideIconsAfterTimeout) {\r\n            window.clearTimeout.bind(this, this.hideIconsAfterTimeout);\r\n        }\r\n        this.hideIconsAfterTimeout = window.setTimeout(function () {\r\n            _this.hideIcons();\r\n        }, 5000);\r\n    };\r\n    /**\r\n     * Hides waiting overlay.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.onCloseOverlayClick = function () {\r\n        this.hide(this.overlayWaitingDiv);\r\n    };\r\n    /**\r\n     * Opens chat window.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.onTextChatButtonClick = function () {\r\n        this.show(this.textChatWindow);\r\n    };\r\n    /**\r\n     * Closes text chat window.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.onTextChatCloseButtonClick = function () {\r\n        this.hide(this.textChatWindow);\r\n    };\r\n    /**\r\n     * Collapses text chat window.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.onTextChatCollapseButtonClick = function () {\r\n        this.hide(this.textChatWindow);\r\n    };\r\n    /**\r\n     * Handles key up event in the chat window.\r\n     *\r\n     * @private\r\n     * @param {KeyboardEvent} event\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.onTextChatInputKeyUp = function (event) {\r\n        var message = this.textChatInput.value\r\n            .trim()\r\n            .replace(/(\\r\\n|\\n|\\r)/gm, '');\r\n        if (event.keyCode === 13 && message.length > 0) {\r\n            this.addLocalMessageHTML(message);\r\n            this.mediaCommunication.sendLocalChatMessage(message);\r\n            this.textChatInput.value = '';\r\n        }\r\n    };\r\n    /**\r\n     * Adds a remote video element.\r\n     *\r\n     * @private\r\n     * @param {RegisterOptions} registerOptions\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.onRemoteClientRegistered = function (registerOptions) {\r\n        this.remoteVideos.addRemoteVideo(registerOptions);\r\n    };\r\n    AppController.prototype.onRemoteTextChatMessage = function (message) {\r\n        this.show(this.textChatWindow);\r\n        this.addRemoteMessageHTML(message);\r\n    };\r\n    AppController.prototype.addRemoteMessageHTML = function (message) {\r\n        var messageHTML = HTMLTemplates_1.HTMLTemplates.getRemoteMessageHTML(message);\r\n        this.textChatMessageList.insertAdjacentHTML('beforeend', messageHTML);\r\n        this.textChatMessageList.scrollTop =\r\n            this.textChatMessageList.scrollHeight -\r\n                this.textChatMessageList.clientHeight;\r\n    };\r\n    AppController.prototype.addLocalMessageHTML = function (message) {\r\n        var messageHTML = HTMLTemplates_1.HTMLTemplates.getLocalMessageHTML(message);\r\n        this.textChatMessageList.insertAdjacentHTML('beforeend', messageHTML);\r\n        this.textChatMessageList.scrollTop =\r\n            this.textChatMessageList.scrollHeight -\r\n                this.textChatMessageList.clientHeight;\r\n    };\r\n    /**\r\n     * Stops waiting for remote video.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.transitionToDone = function () {\r\n        this.remoteVideos.removeCanPlayHandlers();\r\n        this.deactivate(this.localVideo);\r\n        this.remoteVideos.deactivateAll();\r\n        this.deactivate(this.miniVideo);\r\n        this.hide(this.hangupSvg);\r\n        this.hide(this.textChatButton);\r\n        this.hide(this.textChatWindow);\r\n        this.activate(this.rejoinDiv);\r\n        this.show(this.rejoinDiv);\r\n    };\r\n    AppController.prototype.displayError = function (error) {\r\n        Log_1.Log.warn(error);\r\n    };\r\n    /**\r\n     * Enables sharing info overlay (the \"Invite someone to join you!\" one).\r\n     *\r\n     * @private\r\n     * @param {*} data\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.displaySharingInfo = function (room) {\r\n        var roomId = room.id;\r\n        var roomLink = room.link;\r\n        this.roomLink =\r\n            roomLink = window.location.protocol + \"//\" + window.location.host + \"/r/\" + roomId;\r\n        this.pushCallNavigation(new Room_1.Room(roomId, roomLink));\r\n        var isRoomAThirdPartyAccesedRoom = /[a-zA-Z0-9]+\\-\\d+/g.test(roomId);\r\n        this.activate(this.sharingDiv);\r\n        if (!isRoomAThirdPartyAccesedRoom) {\r\n            this.activate(this.overlayWaitingDiv);\r\n        }\r\n    };\r\n    /**\r\n     * Pushes call view to navigation history.\r\n     *\r\n     * @protected\r\n     * @param {string} roomID\r\n     * @param {string} roomLink\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.pushCallNavigation = function (room) {\r\n        this.updateInvitationLinks(room.id);\r\n        /*window.history.pushState(\r\n          { roomId: room.id, roomLink: room.link },\r\n          room.id,\r\n          room.link\r\n        )*/\r\n    };\r\n    AppController.prototype.updateInvitationLinks = function (roomID) {\r\n        var tmpRoomLink = \"https://www.quickhellou.com/r/\" + roomID;\r\n        var invitationLink = HTMLUtils_1.HTMLUtils.get(\".overlay--send-invitation__message-editable a\");\r\n        this.roomLinkHref.href = invitationLink.href = tmpRoomLink;\r\n        this.roomLinkHref.textContent = invitationLink.innerHTML = tmpRoomLink;\r\n        this.roomLinkHrefWaiting.textContent = tmpRoomLink;\r\n        this.roomLinkHrefWaiting.href = tmpRoomLink;\r\n        var inviteBySMSButtonElement = HTMLUtils_1.HTMLUtils.get('.invite-waiting-button--sms');\r\n        if (Util_1.Util.isMobile()) {\r\n            inviteBySMSButtonElement.addEventListener('click', function () {\r\n                window.open('sms://?body=Please join talk with me:' + tmpRoomLink, '_self');\r\n            });\r\n        }\r\n        else {\r\n            inviteBySMSButtonElement.style.display = 'none';\r\n        }\r\n    };\r\n    /**\r\n     * Hadles remote stream addition.\r\n     *\r\n     * @param {MediaStream} stream\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.onRemoteStreamAdded = function (sessionId, stream) {\r\n        this.deactivate(this.sharingDiv);\r\n        this.deactivate(this.overlayWaitingDiv);\r\n        if (!Util_1.Util.isMobile() && !Util_1.Util.isEdgeHTML()) {\r\n            // if(!this.shareScreenButton.getIsEnabled) this.shareScreenButton.enableSharingState();\r\n        }\r\n        this.remoteVideos.addStream(sessionId, stream);\r\n    };\r\n    /**\r\n     * Handles local stream addition complete.\r\n     *\r\n     * @private\r\n     * @param {MediaStream} stream\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.onLocalStreamAdded = function (stream) {\r\n        Log_1.Log.log('User has granted access to local media.');\r\n        this.localStream = stream;\r\n        this.attachLocalStream();\r\n    };\r\n    /**\r\n     * Handles remote SDP protocol arrival.\r\n     *\r\n     * @private\r\n     * @param {string} remoteStreamId\r\n     * @param {boolean} isRemoteVideoPlaybackAvailable\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.onRemoteSdpProtocolReceived = function (remoteStreamId, isRemoteVideoPlaybackAvailable, isRemoteDisplayMediaAvailable) {\r\n        if (!isRemoteVideoPlaybackAvailable) {\r\n            this.transitionToActive(remoteStreamId);\r\n        }\r\n        if (isRemoteDisplayMediaAvailable) {\r\n            Log_1.Log.log('run display media');\r\n        }\r\n    };\r\n    /**\r\n     * Handles transition to active state action.\r\n     *\r\n     * @private\r\n     * @param {HTMLVideoElement} remoteVideoElement\r\n     * @returns {void}\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.onTransitionToActive = function (remoteVideoElement) {\r\n        remoteVideoElement.oncanplay = undefined;\r\n        var connectTime = window.performance.now();\r\n        this.activate(remoteVideoElement);\r\n        this.remoteVideos.updateVideoElementsLayout();\r\n        // Prepare the remote video and PIP elements.\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.localVideo.srcObject)) {\r\n            Log_1.Log.log('AppController::onTransitionToActive: No local video source. Not swapping.');\r\n            return;\r\n        }\r\n        try {\r\n            this.miniVideo.srcObject = this.localVideo.srcObject;\r\n        }\r\n        catch (e) {\r\n            Log_1.Log.warn('Unable to attach stream to video element.', e);\r\n        }\r\n        // Transition opacity from 0 to 1 for the remote and mini videos.\r\n        this.activate(this.miniVideo);\r\n        // Transition opacity from 1 to 0 for the local video.\r\n        this.deactivate(this.localVideo);\r\n        try {\r\n            this.localVideo.srcObject = null;\r\n        }\r\n        catch (e) {\r\n            Log_1.Log.warn('Unable to attach stream to video element.', e);\r\n        }\r\n        // Rotate the div containing the videos 180 deg with a CSS transform.\r\n        this.activate(this.videosDiv);\r\n        var videosWrapElement = HTMLUtils_1.HTMLUtils.get('.videos-wrap');\r\n        videosWrapElement.classList.add('active');\r\n        this.showActiveConnectionControls();\r\n        Log_1.Log.success('Connection established.');\r\n    };\r\n    /**\r\n     * Shows controls associated with active connection.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.showActiveConnectionControls = function () {\r\n        this.show(this.hangupSvg);\r\n        this.show(this.textChatButton);\r\n    };\r\n    /**\r\n     * Enable active connection state.\r\n     *\r\n     * @private\r\n     * @param {string} videoId\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.transitionToActive = function (videoId) {\r\n        var remoteVideoElement = this.remoteVideos.getElement(videoId);\r\n        // Stop waiting for remote video.\r\n        remoteVideoElement.oncanplay = undefined;\r\n        var connectTime = window.performance.now();\r\n        // Prepare the remote video and PIP elements.\r\n        try {\r\n            Log_1.Log.log(this.localVideo.srcObject);\r\n            this.miniVideo.srcObject = this.localVideo.srcObject;\r\n        }\r\n        catch (e) {\r\n            Log_1.Log.warn('Unable to attach stream to video element.', e);\r\n        }\r\n        // Transition opacity from 0 to 1 for the remote and mini videos.\r\n        this.activate(remoteVideoElement);\r\n        this.activate(this.miniVideo);\r\n        // Transition opacity from 1 to 0 for the local video.\r\n        this.deactivate(this.localVideo);\r\n        try {\r\n            this.localVideo.srcObject = null;\r\n        }\r\n        catch (e) {\r\n            Log_1.Log.warn('Unable to attach stream to video element.', e);\r\n        }\r\n        // Rotate the div containing the videos 180 deg with a CSS transform.\r\n        this.activate(this.videosDiv);\r\n        var videosWrapElement = HTMLUtils_1.HTMLUtils.get('.videos-wrap');\r\n        videosWrapElement.classList.add('active');\r\n        this.showActiveConnectionControls();\r\n    };\r\n    /**\r\n     * Switches to waiting for connection state.\r\n     * Called after all remote connections hang up.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.transitionToWaiting = function () {\r\n        this.hide(this.hangupSvg);\r\n        this.hide(this.textChatButton);\r\n        this.hide(this.textChatWindow);\r\n        this.deactivate(this.videosDiv);\r\n        // Set localVideo.srcObject now so that the local stream won't be lost if the\r\n        // call is restarted before the timeout.\r\n        try {\r\n            this.localVideo.srcObject = this.miniVideo.srcObject;\r\n        }\r\n        catch (e) {\r\n            Log_1.Log.log('Unable to attach stream to video element.', e);\r\n        }\r\n        // Transition opacity from 0 to 1 for the local video.\r\n        this.activate(this.localVideo);\r\n        this.remoteVideos.deactivateAll();\r\n        this.deactivate(this.miniVideo);\r\n    };\r\n    /**\r\n     * Handles remote hangup event.\r\n     *\r\n     * @private\r\n     * @param {string} sessionId\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.onRemoteHangup = function (sessionId) {\r\n        Log_1.Log.log('The remote side hung up. ', sessionId);\r\n        this.remoteVideos.removeRemoteVideo(sessionId);\r\n        if (this.remoteVideos.isEmpty()) {\r\n            this.mediaCommunication.stopSendingDisplayMedia();\r\n            // this.shareScreenButton.disableSharingState();\r\n            this.transitionToWaiting();\r\n            this.closeFullScreen();\r\n        }\r\n    };\r\n    /**\r\n     * Shows icons.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.showIcons = function () {\r\n        if (!this.icons.classList.contains('active')) {\r\n            this.activate(this.fullscreenIcon);\r\n            this.activate(this.icons);\r\n            this.setIconTimeout();\r\n        }\r\n    };\r\n    /**\r\n     * Hides icons.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.hideIcons = function () {\r\n        if (this.icons.classList.contains('active')) {\r\n            this.deactivate(this.icons);\r\n            this.deactivate(this.fullscreenIcon);\r\n        }\r\n    };\r\n    /**\r\n     * Activates HTML element by adding \"active\" class.\r\n     *\r\n     * @private\r\n     * @param {HTMLElement} element\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.activate = function (element) {\r\n        element.classList.add('active');\r\n    };\r\n    /**\r\n     * Initialize remote videos.\r\n     *\r\n     * @private\r\n     * @memberof AppController\r\n     */\r\n    AppController.prototype.initRemoteVideos = function () {\r\n        this.remoteVideos = RemoteVideos_1.RemoteVideos.getInstance();\r\n        this.remoteVideos.addEventListener(RemoteVideosEvent_1.RemoteVideosEvent.ADD_STREAM_SUCCESS, this.onTransitionToActive, this);\r\n    };\r\n    return AppController;\r\n}(EventDispatcherService_1.EventDispatcherService));\r\nexports.AppController = AppController;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/AppController.ts?")},"./ts/com/quickhellou/AppControllerEvent.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.AppControllerEvent = void 0;\r\nvar AppControllerEvent = /** @class */ (function () {\r\n    function AppControllerEvent() {\r\n    }\r\n    AppControllerEvent.INITIALIZED = "initialized";\r\n    AppControllerEvent.DESTROY = "destroy";\r\n    return AppControllerEvent;\r\n}());\r\nexports.AppControllerEvent = AppControllerEvent;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/AppControllerEvent.ts?')},"./ts/com/quickhellou/Call.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Call = void 0;\r\nvar ColliderService_1 = __webpack_require__(/*! ./application/service/ColliderService */ \"./ts/com/quickhellou/application/service/ColliderService.ts\");\r\nvar PeerConnectionClient_1 = __webpack_require__(/*! ./PeerConnectionClient */ \"./ts/com/quickhellou/PeerConnectionClient.ts\");\r\nvar CallEvent_1 = __webpack_require__(/*! ./CallEvent */ \"./ts/com/quickhellou/CallEvent.ts\");\r\nvar Util_1 = __webpack_require__(/*! ./Util */ \"./ts/com/quickhellou/Util.ts\");\r\nvar PeerConnectionClientEvent_1 = __webpack_require__(/*! ./PeerConnectionClientEvent */ \"./ts/com/quickhellou/PeerConnectionClientEvent.ts\");\r\nvar BaseUtils_1 = __webpack_require__(/*! ../genb/base/utils/BaseUtils */ \"./ts/com/genb/base/utils/BaseUtils.ts\");\r\nvar FormService_1 = __webpack_require__(/*! ../genb/base/services/FormService */ \"./ts/com/genb/base/services/FormService.ts\");\r\nvar PeerConnectionResponseType_1 = __webpack_require__(/*! ./application/model/PeerConnectionResponseType */ \"./ts/com/quickhellou/application/model/PeerConnectionResponseType.ts\");\r\nvar Log_1 = __webpack_require__(/*! ../genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\r\nvar StringUtils_1 = __webpack_require__(/*! ../genb/base/utils/StringUtils */ \"./ts/com/genb/base/utils/StringUtils.ts\");\r\nvar RegisterOptions_1 = __webpack_require__(/*! ./application/model/RegisterOptions */ \"./ts/com/quickhellou/application/model/RegisterOptions.ts\");\r\nvar SessionInit_1 = __webpack_require__(/*! ./application/model/SessionInit */ \"./ts/com/quickhellou/application/model/SessionInit.ts\");\r\nvar RtcSession_1 = __webpack_require__(/*! ./application/model/RtcSession */ \"./ts/com/quickhellou/application/model/RtcSession.ts\");\r\nvar SessionOptions_1 = __webpack_require__(/*! ./application/model/SessionOptions */ \"./ts/com/quickhellou/application/model/SessionOptions.ts\");\r\nvar VideoTrackEventOptions_1 = __webpack_require__(/*! ./application/model/VideoTrackEventOptions */ \"./ts/com/quickhellou/application/model/VideoTrackEventOptions.ts\");\r\nvar RetryConsumeManager_1 = __webpack_require__(/*! ./application/controller/RetryConsumeManager */ \"./ts/com/quickhellou/application/controller/RetryConsumeManager.ts\");\r\nvar RetryJobEvent_1 = __webpack_require__(/*! ./application/events/RetryJobEvent */ \"./ts/com/quickhellou/application/events/RetryJobEvent.ts\");\r\n/**\r\n * Call facade.\r\n *\r\n * @export\r\n * @class Call\r\n * @extends {FormService}\r\n */\r\nvar Call = /** @class */ (function (_super) {\r\n    __extends(Call, _super);\r\n    /**\r\n     * Creates an instance of Call.\r\n     *\r\n     * @param {LoadingParams} params\r\n     * @memberof Call\r\n     */\r\n    function Call(params) {\r\n        var _this = _super.call(this) || this;\r\n        _this.params = params;\r\n        _this.colliderService = ColliderService_1.ColliderService.getInstance();\r\n        _this.retryConsumeManagers = new Map();\r\n        _this.pcClients = new Map();\r\n        _this.localStream = null;\r\n        _this.startTime = null;\r\n        _this.cameraTrack = null;\r\n        _this.isCertificateGenerated = false;\r\n        _this.createCertificate();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sends a message via signaling channel.\r\n     *\r\n     * @param {*} message\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.send = function (message, persistant) {\r\n        if (persistant === void 0) { persistant = true; }\r\n        var msgString = JSON.stringify(message);\r\n        this.colliderService.send(msgString, persistant);\r\n    };\r\n    /**\r\n     * Broadcasts a message.\r\n     *\r\n     * @param {string} inputType\r\n     * @param {*} message\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.broadcast = function (inputType, message) {\r\n        this.colliderService.broadcast(inputType, message);\r\n    };\r\n    /**\r\n     * Toggles video muting.\r\n     *\r\n     * @returns {void}\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.toggleVideoMute = function () {\r\n        var videoTracks = this.localStream.getVideoTracks();\r\n        if (videoTracks.length === 0) {\r\n            Log_1.Log.log('No local video available.');\r\n            return;\r\n        }\r\n        Log_1.Log.log('Toggling video mute state.');\r\n        for (var _i = 0, videoTracks_1 = videoTracks; _i < videoTracks_1.length; _i++) {\r\n            var videoTrack = videoTracks_1[_i];\r\n            videoTrack.enabled = !videoTrack.enabled;\r\n        }\r\n        Log_1.Log.log('Video ' + (videoTracks[0].enabled ? 'unmuted.' : 'muted.'));\r\n    };\r\n    /**\r\n     * Adds display media tracks to peer connection clients.\r\n     *\r\n     * @param {MediaStreamTrack} track\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.addDisplayMediaTracks = function (track) {\r\n        var _this = this;\r\n        // mute video track\r\n        this.cameraTrack.enabled = false;\r\n        // Re-enable video on screen sharing end.\r\n        track.addEventListener('ended', function () {\r\n            _this.stopDisplayMedia();\r\n        });\r\n        this.localStream\r\n            .getVideoTracks()\r\n            .forEach(function (videoTrack) {\r\n            _this.localStream.removeTrack(videoTrack);\r\n        });\r\n        this.localStream.addTrack(track);\r\n        this.displayTrack = track;\r\n        this.dispatchEvent(CallEvent_1.CallEvent.LOCAL_VIDEO_MEDIA_CHANGE, new VideoTrackEventOptions_1.VideoTrackEventOptions(this.displayTrack, VideoTrackEventOptions_1.VideoTrackEventOptions.SCREEN_CAPTURE));\r\n        try {\r\n            this.pcClients.forEach(function (pcClient) {\r\n                pcClient.addVideoTrack(_this.displayTrack);\r\n            });\r\n        }\r\n        catch (e) {\r\n            Log_1.Log.log('error', e);\r\n        }\r\n    };\r\n    /**\r\n     * Stops the display media.\r\n     *\r\n     * @public\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.stopDisplayMedia = function () {\r\n        if (!this.displayTrack) {\r\n            return;\r\n        }\r\n        if (!this.displayTrack.enabled) {\r\n            return;\r\n        }\r\n        this.displayTrack.enabled = false;\r\n        this.displayTrack.stop();\r\n        this.addCameraTracks();\r\n        this.dispatchEvent(CallEvent_1.CallEvent.LOCAL_VIDEO_MEDIA_CHANGE, new VideoTrackEventOptions_1.VideoTrackEventOptions(this.cameraTrack));\r\n    };\r\n    /**\r\n     * Toggles audio unmuting.\r\n     *\r\n     * @returns {void}\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.toggleAudioUnMute = function () {\r\n        var audioTracks = this.localStream.getAudioTracks();\r\n        if (audioTracks.length === 0) {\r\n            Log_1.Log.log('No local audio available.');\r\n            return;\r\n        }\r\n        Log_1.Log.log('Toggling audio to unmute state.');\r\n        for (var _i = 0, audioTracks_1 = audioTracks; _i < audioTracks_1.length; _i++) {\r\n            var audioTrack = audioTracks_1[_i];\r\n            audioTrack.enabled = true;\r\n        }\r\n        Log_1.Log.log('Audio unmuted.');\r\n    };\r\n    /**\r\n     * Toggles audio muting.\r\n     *\r\n     * @returns {void}\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.toggleAudioMute = function () {\r\n        var audioTracks = this.localStream.getAudioTracks();\r\n        if (audioTracks.length === 0) {\r\n            Log_1.Log.log('No local audio available.');\r\n            return;\r\n        }\r\n        Log_1.Log.log('Toggling audio mute state.');\r\n        for (var _i = 0, audioTracks_2 = audioTracks; _i < audioTracks_2.length; _i++) {\r\n            var audioTrack = audioTracks_2[_i];\r\n            audioTrack.enabled = !audioTrack.enabled;\r\n        }\r\n        Log_1.Log.log('Audio ' + (audioTracks[0].enabled ? 'unmuted.' : 'muted.'));\r\n    };\r\n    /**\r\n     * Return call start time.\r\n     *\r\n     * @public\r\n     * @returns {number}\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.getStartTime = function () {\r\n        return this.startTime;\r\n    };\r\n    /**\r\n     * Sets local stream.\r\n     *\r\n     * @public\r\n     * @param {MediaStream} stream\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.setLocalStream = function (stream) {\r\n        this.localStream = stream;\r\n        if (this.localStream.getVideoTracks().length === 0) {\r\n            return;\r\n        }\r\n        this.cameraTrack = this.localStream.getVideoTracks().shift();\r\n    };\r\n    /**\r\n     * Sets room.\r\n     *\r\n     * @public\r\n     * @param {Room} room\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.setRoom = function (room) {\r\n        this.room = room;\r\n    };\r\n    /**\r\n     * Handles received signaling channel message.\r\n     *\r\n     * @public\r\n     * @param {string} message\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.receiveColliderChannelMessage = function (messageObj) {\r\n        var message = JSON.parse(messageObj);\r\n        var sessionId = message.sessionId;\r\n        Log_1.Log.log('Call::receiveColliderChannelMessage (should create PC Client) ', sessionId);\r\n        this.createPcClient(new RtcSession_1.RtcSession(sessionId, '', message)).then(function (pcClient) {\r\n            pcClient.receiveSignalingMessage(message);\r\n        });\r\n    };\r\n    /**\r\n     * Starts signaling.\r\n     *\r\n     * @public\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.startRtcSignaling = function (sessionInit) {\r\n        var _this = this;\r\n        sessionInit.sessions.forEach(function (session) {\r\n            Log_1.Log.log('Call::startRtcSignaling - forward? ', session.isForward);\r\n            if (!session.isForward) {\r\n                _this.startNewRtcSession(session);\r\n            }\r\n            else {\r\n                _this.forwardNewRtcSession(session);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Starts new connection session.\r\n     *\r\n     * @public\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.startNewRtcSession = function (session) {\r\n        var _this = this;\r\n        this.startTime = window.performance.now();\r\n        Log_1.Log.log('Start new session with ID: ', session.id);\r\n        if (StringUtils_1.StringUtils.isEmpty(session.id)) {\r\n            Log_1.Log.fatal('No sessionId from the remote peer.');\r\n            return;\r\n        }\r\n        this.createPcClient(session)\r\n            .then(function (pcClient) {\r\n            if (_this.localStream) {\r\n                pcClient.addStream(_this.localStream);\r\n            }\r\n            if (session.isInitiator) {\r\n                _this.startupAsInitiator(pcClient);\r\n                return;\r\n            }\r\n            var started = pcClient.startAsReceiver(session.messages);\r\n            if (!started) {\r\n                _this.startRetryConsumeManager(pcClient);\r\n            }\r\n        })\r\n            .catch(function (reason) {\r\n            _this.onError(\"Create PeerConnection exception: \" + reason);\r\n        });\r\n    };\r\n    /**\r\n     * Returns peer connection stats.\r\n     *\r\n     * @param {Function} callback\r\n     * @returns {void}\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.getPeerConnectionStats = function (callback, pcClientId) {\r\n        var pcClient = this.pcClients.get(pcClientId);\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(pcClient)) {\r\n            return;\r\n        }\r\n    };\r\n    /**\r\n     * Returns peer connection states.\r\n     *\r\n     * @returns\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.getPeerConnectionStates = function (pcClientId) {\r\n        var pcClient = this.pcClients.get(pcClientId);\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(pcClient)) {\r\n            return null;\r\n        }\r\n        return pcClient.getPeerConnectionStates();\r\n    };\r\n    /**\r\n     * Hangs up a call locally.\r\n     *\r\n     * @public\r\n     * @param {boolean} async\r\n     * @returns {Promise<any>}\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.hangup = function (async) {\r\n        var _this = this;\r\n        this.startTime = null;\r\n        if (!!this.localStream) {\r\n            if (typeof this.localStream.getTracks === 'undefined') {\r\n                this.localStream.stop();\r\n            }\r\n            else {\r\n                this.localStream.getTracks().forEach(function (track) {\r\n                    track.stop();\r\n                });\r\n            }\r\n            this.localStream = null;\r\n        }\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.room)) {\r\n            Log_1.Log.log('No room defined.');\r\n            return;\r\n        }\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.room.id)) {\r\n            Log_1.Log.log('No room ID defined.');\r\n            return;\r\n        }\r\n        // close WebRTC peer client\r\n        this.pcClients.forEach(function (pcClient) {\r\n            pcClient.close();\r\n        });\r\n        // Send 'leave' to PyApp. This must complete before saying BYE to other client.\r\n        // When the other client sees BYE it attempts to post offer and candidates to\r\n        // PyApp. PyApp needs to know that we're disconnected at that point otherwise\r\n        // it will forward messages to this client instead of storing them.\r\n        // This section of code is executed in both sync and async depending on\r\n        // where it is called from. When the browser is closed, the requests must\r\n        // be executed as sync to finish before the browser closes. When called\r\n        // from pressing the hang up button, the requests are executed async.\r\n        // If you modify the steps used to hang up a call, you must also modify\r\n        // the clean up queue steps set up in queueCleanupMessages_.');\r\n        var steps = [];\r\n        steps.push({\r\n            step: function () {\r\n                // Send POST request to /leave.\r\n                if (_this.getLeaveUrl().valid) {\r\n                    Log_1.Log.log('sending leave', _this.getLeaveUrl().url);\r\n                    return Util_1.Util.sendUrlRequest('POST', _this.getLeaveUrl().url, async);\r\n                }\r\n            },\r\n            errorString: 'Error sending /leave:',\r\n        });\r\n        steps.push({\r\n            step: function () {\r\n                // Send bye to the other clients.\r\n                Array.from(_this.pcClients).forEach(function (pcClientPair) {\r\n                    var pcClient = pcClientPair[1];\r\n                    _this.sendToOther(pcClient.getSession().otherClientId, {\r\n                        type: PeerConnectionResponseType_1.PeerConnectionResponseType.BYE,\r\n                        clientId: _this.params.clientID,\r\n                        sessionId: pcClient.getSessionId(),\r\n                    });\r\n                    _this.pcClients.delete(pcClient.getId());\r\n                });\r\n                // request current sessons and sends session update for collider applicaion.\r\n            },\r\n            errorString: 'Error sending bye:',\r\n        });\r\n        steps.push({\r\n            step: function () {\r\n                // Close signaling channel.\r\n                Log_1.Log.log('close WS collider from hangup ', async);\r\n                return _this.colliderService.close(async);\r\n            },\r\n            errorString: 'Error closing signaling channel:',\r\n        });\r\n        steps.push({\r\n            step: function () {\r\n                // the room stays as it is, no need to introduce new one\r\n                // this.params.previousRoomID = this.room.id;\r\n                // this.params.roomID = this.room.id = null;\r\n                _this.params.clientID = null;\r\n            },\r\n            errorString: 'Error setting params:',\r\n        });\r\n        if (async) {\r\n            var errorHandler_1 = function (errorString) {\r\n                Log_1.Log.warn(errorString);\r\n            };\r\n            var promise = Promise.resolve();\r\n            var _loop_1 = function (step) {\r\n                promise = promise\r\n                    .then(function () {\r\n                    step.step.call(_this);\r\n                })\r\n                    .catch(function (reason) {\r\n                    Log_1.Log.log(reason, step.errorString);\r\n                    errorHandler_1(step.errorString);\r\n                });\r\n            };\r\n            for (var _i = 0, steps_1 = steps; _i < steps_1.length; _i++) {\r\n                var step = steps_1[_i];\r\n                _loop_1(step);\r\n            }\r\n            return promise;\r\n        }\r\n        // Execute the cleanup steps.\r\n        var executeStep = function (executor, errorString) {\r\n            try {\r\n                executor();\r\n            }\r\n            catch (ex) {\r\n                Log_1.Log.log(errorString + ' ' + ex);\r\n            }\r\n        };\r\n        for (var _a = 0, steps_2 = steps; _a < steps_2.length; _a++) {\r\n            var step = steps_2[_a];\r\n            executeStep(step.step, step.errorString);\r\n        }\r\n        if (BaseUtils_1.BaseUtils.isObjectDefined(this.room.id) ||\r\n            BaseUtils_1.BaseUtils.isObjectDefined(this.params.clientID)) {\r\n            Log_1.Log.log('ERROR: sync cleanup tasks did not complete successfully.', this.room.id, this.params.clientID);\r\n        }\r\n        else {\r\n            Log_1.Log.log('Cleanup completed.');\r\n        }\r\n        return Promise.resolve();\r\n    };\r\n    /**\r\n     * Handles remote hang up.\r\n     *\r\n     * @public\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.onRemoteHangup = function (sessionId) {\r\n        this.startTime = null;\r\n        // On remote hangup this client becomes the new initiator.\r\n        var pcClient = this.pcClients.get(sessionId);\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(pcClient)) {\r\n            Log_1.Log.warn(\"Call::onRemoteHangup pcClient identified by sessionId \" + sessionId + \" doesn't exist.\\n        Not initializing new connection.\");\r\n            return;\r\n        }\r\n        // this.requestSessionUpdate();\r\n        pcClient.close();\r\n        this.pcClients.delete(sessionId);\r\n        var sessionInit = new SessionInit_1.SessionInit();\r\n        sessionInit.addSession(new RtcSession_1.RtcSession(pcClient.getSession().id, StringUtils_1.StringUtils.EMPTY, StringUtils_1.StringUtils.EMPTY, true));\r\n        this.startRtcSignaling(sessionInit);\r\n    };\r\n    /**\r\n     * Handles remote hangup.\r\n     *\r\n     * @param {string} clientId\r\n     * @returns {string}\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.onRemoteHangupByClientId = function (clientId) {\r\n        var _this = this;\r\n        var sessionId = StringUtils_1.StringUtils.EMPTY;\r\n        Array.from(this.pcClients).forEach(function (pcClientPair) {\r\n            var pcClient = pcClientPair[1];\r\n            if (pcClient.getSession().otherClientId === clientId) {\r\n                _this.onRemoteHangup(pcClient.getSession().id);\r\n                sessionId = pcClient.getSession().id;\r\n            }\r\n        });\r\n        return sessionId;\r\n    };\r\n    /**\r\n     * Sets other client's session ID for a particular peer connection client.\r\n     *\r\n     * @param {RegisterOptions} registerOptions\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.setSessionOtherClientId = function (registerOptions) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var pcClient = _this.pcClients.get(registerOptions.sessionId);\r\n            Log_1.Log.log('Call::setSessionOtherClientId client?', !!pcClient);\r\n            if (BaseUtils_1.BaseUtils.isObjectDefined(pcClient)) {\r\n                var session = pcClient.getSession();\r\n                session.otherClientId = registerOptions.clientId;\r\n                pcClient.setSession(session);\r\n                Log_1.Log.log('Call::setSessionOtherClientId updated');\r\n                if (pcClient.requireDataConsume) {\r\n                    var retryConsumeManager = _this.retryConsumeManagers.get(session.id);\r\n                    retryConsumeManager.next();\r\n                }\r\n            }\r\n            else {\r\n                Log_1.Log.log('No client.');\r\n            }\r\n            resolve();\r\n        });\r\n    };\r\n    Call.prototype.onRemoteIceComplete = function (data) {\r\n        var sessionId = data.sessionId;\r\n        var candidates = data.candidates;\r\n        var pcClient = this.pcClients.get(sessionId);\r\n        pcClient.onRemoteIceComplete(candidates);\r\n    };\r\n    Call.prototype.consumeRemoteMessages = function (pcClient) {\r\n        pcClient.requireDataConsume = false;\r\n        this.colliderService.touch(this.params.roomID, this.params.clientID);\r\n        this.post(\"/consume/\" + this.params.roomID + \"/\" + pcClient.getSessionId() + \"/\" + this.params.clientID).then(function (result) {\r\n            if (!result) {\r\n                return;\r\n            }\r\n            var resultJson = JSON.parse(result);\r\n            var messages = resultJson.messages;\r\n            messages.forEach(function (message) {\r\n                Log_1.Log.log('%%% consumeRemoteMessages %%%', message);\r\n                pcClient.receiveSignalingMessage(message);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Request session update in go app.\r\n     *\r\n     * @private\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.requestSessionUpdate = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     *  Requests sessions list from py app.\r\n     *\r\n     * @private\r\n     * @returns {Promise<string>}\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.onLocalIceComplete = function (data) {\r\n        var session = data.session;\r\n        /// xxx static\r\n        this.post(this.params.hostUrl + \"/sessions-getter/\" + this.params.roomID);\r\n        Log_1.Log.log('onLocalIceComplete requireDataConsume', data.pcClient.requireDataConsume);\r\n        if (data.pcClient.requireDataConsume) {\r\n            this.startRetryConsumeManager(data.pcClient);\r\n        }\r\n    };\r\n    /**\r\n     * Starts retry consume manager.\r\n     *\r\n     * @private\r\n     * @param {PeerConnectionClient} pcClient\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.startRetryConsumeManager = function (pcClient) {\r\n        var _this = this;\r\n        var retryConsumeManager = this.retryConsumeManagers.get(pcClient.getSessionId());\r\n        if (BaseUtils_1.BaseUtils.isObjectDefined(retryConsumeManager)) {\r\n            return;\r\n        }\r\n        retryConsumeManager = new RetryConsumeManager_1.RetryConsumeManager(this.colliderService, pcClient, this.params.roomID, this.params.clientID, this.params.hostUrl);\r\n        retryConsumeManager.addEventListener(RetryJobEvent_1.RetryJobEvent.COMPLETE, function () {\r\n            Log_1.Log.log('Job complete.');\r\n            _this.retryConsumeManagers.delete(pcClient.getSessionId());\r\n        }, this);\r\n        retryConsumeManager.start();\r\n        this.retryConsumeManagers.set(pcClient.getSessionId(), retryConsumeManager);\r\n    };\r\n    /**\r\n     * Sets local video track as camera.\r\n     *\r\n     * @private\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.setLocalVideoTrackAsCamera = function () {\r\n        if (!!this.displayTrack) {\r\n            this.localStream.removeTrack(this.displayTrack);\r\n        }\r\n        if (!this.localStream.getTrackById(this.cameraTrack.id)) {\r\n            this.localStream.addTrack(this.cameraTrack);\r\n        }\r\n    };\r\n    /**\r\n     * Adds camera tracks to all the peer connections.\r\n     *\r\n     * @private\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.addCameraTracks = function () {\r\n        var _this = this;\r\n        this.setLocalVideoTrackAsCamera();\r\n        this.pcClients.forEach(function (pcClient) {\r\n            pcClient.addVideoTrack(_this.cameraTrack);\r\n        });\r\n    };\r\n    /**\r\n     * Sends a message to other client.\r\n     *\r\n     * @private\r\n     * @param {string} otherClientId\r\n     * @param {*} message\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.sendToOther = function (otherClientId, message) {\r\n        var msgString = JSON.stringify(message);\r\n        this.colliderService.sendToOther(this.params.roomID, this.params.clientID, otherClientId, msgString);\r\n    };\r\n    /**\r\n     * Sends response via signling channel.\r\n     *\r\n     * @private\r\n     * @param {*} options\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.sendResponse = function (otherClientId, options) {\r\n        var responseOptions = {\r\n            type: 'response',\r\n            body: options,\r\n        };\r\n        if (StringUtils_1.StringUtils.isNotEmpty(otherClientId)) {\r\n            this.sendToOther(otherClientId, responseOptions);\r\n            return;\r\n        }\r\n        this.send(responseOptions);\r\n    };\r\n    /**\r\n     * Startups connection as initiator.\r\n     *\r\n     * @private\r\n     * @param {PeerConnectionClient} pcClient\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.startupAsInitiator = function (pcClient) {\r\n        if (!this.hasAnyActiveSession()) {\r\n            this.dispatchEvent(CallEvent_1.CallEvent.CALLER_STARTED, this.room);\r\n        }\r\n        pcClient.startAsInitiator(this.params.offerOptions);\r\n    };\r\n    /**\r\n     * Forwards session initialization to a remote peer.\r\n     *\r\n     * @private\r\n     * @param {RtcSession} session\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.forwardNewRtcSession = function (session) {\r\n        var options = new SessionOptions_1.SessionOptions();\r\n        var otherClientId = session.otherClientId;\r\n        session.isForward = false;\r\n        session.otherClientId = this.params.clientID;\r\n        options.session = session;\r\n        this.sendResponse(otherClientId, options);\r\n    };\r\n    /**\r\n     * Creates peer connection if not exists.\r\n     * Generates ECDSA certificates.\r\n     *\r\n     * @private\r\n     * @returns {Promise<void>}\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.createCertificate = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (_this.isCertificateGenerated) {\r\n                resolve();\r\n                return;\r\n            }\r\n            if (typeof RTCPeerConnection.generateCertificate === 'function') {\r\n                var certParams = { name: 'ECDSA', namedCurve: 'P-256' };\r\n                RTCPeerConnection\r\n                    .generateCertificate(certParams)\r\n                    .then(function (certificate) {\r\n                    Log_1.Log.log('ECDSA certificate generated successfully.');\r\n                    _this.params.peerConnectionConfig.certificates = [certificate];\r\n                    _this.isCertificateGenerated = true;\r\n                    resolve();\r\n                })\r\n                    .catch(function (reason) {\r\n                    Log_1.Log.log('ECDSA certificate generation failed.');\r\n                    reject(reason);\r\n                });\r\n            }\r\n            else {\r\n                resolve();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Creates new peer connection client.\r\n     *\r\n     * @private\r\n     * @returns {Promise<PeerConnectionClient>}\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.createPcClient = function (session) {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            var pcClient = _this.pcClients.get(session.id);\r\n            if (BaseUtils_1.BaseUtils.isObjectDefined(pcClient)) {\r\n                Log_1.Log.log('Call::createPcClient ', session.id, pcClient.requireDataConsume, ' pc client already exists. resolving.');\r\n                resolve(pcClient);\r\n                return;\r\n            }\r\n            Log_1.Log.log(\"Call::createPcClient \" + session.id + \" pc client not exists. creating.\");\r\n            pcClient = new PeerConnectionClient_1.PeerConnectionClient(_this.params, _this.startTime, session);\r\n            _this.pcClients.set(session.id, pcClient);\r\n            pcClient.init().then(function () {\r\n                _this.addPeerConnectionClientEvents(pcClient);\r\n                resolve(pcClient);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Adds peer connection client events\r\n     *\r\n     * @private\r\n     * @param {PeerConnectionClient} pcClient\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.addPeerConnectionClientEvents = function (pcClient) {\r\n        var _this = this;\r\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.SIGNALING_MESSAGE, function (data) {\r\n            Log_1.Log.log(\"send SIGNALING_MESSAGE\", data, pcClient.getSession(), pcClient.ifSendAsPyMessage());\r\n            _this.sendSignalingMessage(data, pcClient.getSession(), pcClient.ifSendAsPyMessage());\r\n        }, this);\r\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.REMOTE_SDP_PROTOCOL_RECEIVED, function (data) {\r\n            // TODO identify RTC client as remote session id\r\n            _this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_SDP_PROTOCOL_RECEIVED, data);\r\n        }, this);\r\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.REMOTE_STREAM_ADDED, function (data) {\r\n            _this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_STREAM_ADDED, data);\r\n        }, this);\r\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.SIGNALING_STATE_CHANGE, function () {\r\n            _this.dispatchEvent(CallEvent_1.CallEvent.SIGNALING_STATE_CHANGE);\r\n        }, this);\r\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ICE_CONNECTION_STATE_CHANGE, function () {\r\n            _this.dispatchEvent(CallEvent_1.CallEvent.ICE_CONNECTION_STATE_CHANGE);\r\n        }, this);\r\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.NEW_ICE_CANDIDATE, function (data) {\r\n            _this.dispatchEvent(CallEvent_1.CallEvent.NEW_ICE_CANDIDATE, data);\r\n        }, this);\r\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ICE_GATHERING_COMPLETE, function (data) {\r\n            data.pcClient = pcClient;\r\n            _this.onLocalIceComplete(data);\r\n        }, this);\r\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ERROR, function (message) {\r\n            _this.onError(message);\r\n        }, this);\r\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.CREATE_OFFER_SUCCESS, function (session) {\r\n            var options = new RegisterOptions_1.RegisterOptions();\r\n            options.clientId = _this.params.clientID;\r\n            options.sessionId = session.id;\r\n            options.type = 'offer';\r\n            options.uuid = StringUtils_1.StringUtils.uuidv4();\r\n            Log_1.Log.log('Call:: sending offer', session.otherClientId, options);\r\n            _this.sendResponse(session.otherClientId, options);\r\n        }, this);\r\n        pcClient.addEventListener(PeerConnectionClientEvent_1.PeerConnectionClientEvent.CREATE_ANSWER_SUCCESS, function (session) {\r\n            var options = new RegisterOptions_1.RegisterOptions();\r\n            options.clientId = _this.params.clientID;\r\n            options.sessionId = session.id;\r\n            options.type = 'answer';\r\n            options.uuid = StringUtils_1.StringUtils.uuidv4();\r\n            if (session.otherClientId !== '') {\r\n                Log_1.Log.log('Call:: sending answer', session.otherClientId, options);\r\n                _this.sendResponse(session.otherClientId, options);\r\n            }\r\n        }, this);\r\n    };\r\n    /**\r\n     * Changes call bandwidth.\r\n     *\r\n     * @private\r\n     * @param {string} bandwidth\r\n     * @returns\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.changeBandwidth = function (bandwidth) {\r\n        if ((adapter.browserDetails.browser === 'chrome' ||\r\n            adapter.browserDetails.browser === 'safari' ||\r\n            (adapter.browserDetails.browser === 'firefox' &&\r\n                adapter.browserDetails.version >= 64)) &&\r\n            'RTCRtpSender' in window &&\r\n            'setParameters' in window.RTCRtpSender.prototype) {\r\n            this.pcClients.forEach(function (pcClient) {\r\n                pcClient.changeBandwidth(bandwidth);\r\n            });\r\n            return;\r\n        }\r\n    };\r\n    /**\r\n     * Sends signaling message consumed from peer connection client.\r\n     * Initiator sends to PyApp, receiver to Collider.\r\n     *\r\n     * @private\r\n     * @param {*} message\r\n     * @param {RtcSession} session\r\n     * @param {boolean} [sendAsPyMessage=false]\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.sendSignalingMessage = function (message, session, sendAsPyMessage) {\r\n        if (sendAsPyMessage === void 0) { sendAsPyMessage = false; }\r\n        var msgString = JSON.stringify(message);\r\n        if (sendAsPyMessage) {\r\n            // Initiator posts all messages to PyApp. PyApp will either store the messages\r\n            // until the other client connects, or forward the message to Collider if\r\n            // the other client is already connected.\r\n            // Must append query parameters in case we've specified alternate WSS url.\r\n            var path = this.room.server;\r\n            if (StringUtils_1.StringUtils.isNotEmpty(session.id)) {\r\n                path = path + \"/sessionmessage/\" + this.room.id + \"/\" + session.id;\r\n            }\r\n            else {\r\n                path = path + \"/message/\" + this.room.id;\r\n            }\r\n            path = path + \"/\" + this.params.clientID + window.location.search;\r\n            this.post(path, msgString);\r\n        }\r\n        else {\r\n            if (StringUtils_1.StringUtils.isNotEmpty(session.otherClientId)) {\r\n                this.colliderService.sendToOther(this.params.roomID, this.params.clientID, session.otherClientId, msgString);\r\n            }\r\n            else {\r\n                this.colliderService.send(msgString);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles error message.\r\n     *\r\n     * @private\r\n     * @param {any} message\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.onError = function (message) {\r\n        this.dispatchEvent(CallEvent_1.CallEvent.ERROR, message);\r\n    };\r\n    /**\r\n     * Returns leave URL.\r\n     *\r\n     * @private\r\n     * @returns {string}\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.getLeaveUrl = function (clientId) {\r\n        if (clientId === void 0) { clientId = this.params.clientID; }\r\n        if (!clientId) {\r\n            return { valid: false };\r\n        }\r\n        return {\r\n            valid: true,\r\n            url: this.room.server + \"/leave/\" + this.room.id + \"/\" + clientId,\r\n        };\r\n    };\r\n    /**\r\n     * Checks if call has a single connection only.\r\n     *\r\n     * @private\r\n     * @returns {boolean}\r\n     * @memberof Call\r\n     */\r\n    Call.prototype.hasAnyActiveSession = function () {\r\n        var hasActiveRemoteSdp = false;\r\n        this.pcClients.forEach(function (pcClient) {\r\n            hasActiveRemoteSdp = hasActiveRemoteSdp || pcClient.hasActiveRemoteSdp();\r\n        });\r\n        return hasActiveRemoteSdp;\r\n    };\r\n    return Call;\r\n}(FormService_1.FormService));\r\nexports.Call = Call;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/Call.ts?")},"./ts/com/quickhellou/CallEvent.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CallEvent = void 0;\r\nvar CallEvent = /** @class */ (function () {\r\n    function CallEvent() {\r\n    }\r\n    CallEvent.ERROR = 'error';\r\n    CallEvent.STATUS_MESSAGE = 'status_message';\r\n    CallEvent.NEW_ICE_CANDIDATE = 'new_ice_candidate';\r\n    CallEvent.ICE_CONNECTION_STATE_CHANGE = 'ice_connection_state_change';\r\n    CallEvent.SIGNALING_STATE_CHANGE = 'signaling_state_change';\r\n    CallEvent.REMOTE_STREAM_ADDED = 'remote_stream_added';\r\n    CallEvent.LOCAL_STREAM_ADDED = 'local_stream_added';\r\n    CallEvent.LOCAL_DISPLAY_MEDIA_TRACK_ADDED = 'local_display_media_track_added';\r\n    CallEvent.REMOTE_SDP_PROTOCOL_RECEIVED = 'remote_sdp_protocol_received';\r\n    CallEvent.REMOTE_HANGUP = 'remote_hangup';\r\n    CallEvent.WEBSOCKET_CLOSED = 'websocket_closed';\r\n    CallEvent.WSS_RESPONSE = 'wss_response';\r\n    CallEvent.CALLER_STARTED = 'caller_started';\r\n    CallEvent.REMOTE_TEXT_CHAT_MESSAGE = 'remote_text_chat_message';\r\n    CallEvent.REMOTE_CLIENT_REGISTERED = 'remote_client_registered';\r\n    CallEvent.LOCAL_VIDEO_MEDIA_CHANGE = 'local_video_media_change';\r\n    return CallEvent;\r\n}());\r\nexports.CallEvent = CallEvent;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/CallEvent.ts?")},"./ts/com/quickhellou/Constants.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Constants = void 0;\r\nvar Constants = /** @class */ (function () {\r\n    function Constants() {\r\n    }\r\n    // Action type for remote web socket communication.\r\n    Constants.WS_ACTION = "ws";\r\n    // Action type for remote xhr communication.\r\n    Constants.XHR_ACTION = "xhr";\r\n    // Action type for adding a command to the remote clean up queue.\r\n    Constants.QUEUEADD_ACTION = "addToQueue";\r\n    // Action type for clearing the remote clean up queue.\r\n    Constants.QUEUECLEAR_ACTION = "clearQueue";\r\n    // Web socket action type specifying that an event occured.\r\n    Constants.EVENT_ACTION = "event";\r\n    // Web socket action type to create a remote web socket.\r\n    Constants.WS_CREATE_ACTION = "create";\r\n    // Web socket event type onerror.\r\n    Constants.WS_EVENT_ONERROR = "onerror";\r\n    // Web socket event type onmessage.\r\n    Constants.WS_EVENT_ONMESSAGE = "onmessage";\r\n    // Web socket event type onopen.\r\n    Constants.WS_EVENT_ONOPEN = "onopen";\r\n    // Web socket event type onclose.\r\n    Constants.WS_EVENT_ONCLOSE = "onclose";\r\n    // Web socket event sent when an error occurs while calling send.\r\n    Constants.WS_EVENT_SENDERROR = "onsenderror";\r\n    // Web socket action type to send a message on the remote web socket.\r\n    Constants.WS_SEND_ACTION = "send";\r\n    // Web socket action type to close the remote web socket.\r\n    Constants.WS_CLOSE_ACTION = "close";\r\n    Constants.TCP = "tcp";\r\n    Constants.RELAY = "relay";\r\n    return Constants;\r\n}());\r\nexports.Constants = Constants;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/Constants.ts?')},"./ts/com/quickhellou/HTMLTemplates.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.HTMLTemplates = void 0;\r\nvar HTMLTemplates = /** @class */ (function () {\r\n    function HTMLTemplates() {\r\n    }\r\n    HTMLTemplates.getRemoteMessageHTML = function (message) {\r\n        return "<div class=\\"text-chat-window__message text-chat-window__message--incoming\\">\\n          <div class=\\"df df-lt text-chat-window__message-content-wrap text-chat-window__message-content-wrap--incoming\\">\\n            <div class=\\"df text-chat-window__message-icon-wrap\\">\\n            </div>\\n            <div class=\\"df df-f1 text-chat-window__message-content text-chat-window__message-content--incoming\\">\\n            " + message.trim() + "</div>\\n          </div>\\n        </div>";\r\n    };\r\n    HTMLTemplates.getLocalMessageHTML = function (message) {\r\n        return "<div class=\\"text-chat-window__message text-chat-window__message--outgoing\\">\\n        <div class=\\"df df-lt text-chat-window__message-content-wrap text-chat-window__message-content-wrap--outgoing\\">\\n          <div class=\\"df df-c  text-chat-window__message-icon-wrap text-chat-window__message-icon-wrap--outcoming\\">\\n            <img class=\\"text-chat-window__message-icon\\" src=\\"/images/user.svg\\" alt=\\"\\">\\n          </div>\\n          <div class=\\"df df-f1 text-chat-window__message-content text-chat-window__message-content--outgoing\\">\\n            <div>" + message.trim() + "</div>\\n          </div>\\n        </div>\\n      </div>";\r\n    };\r\n    return HTMLTemplates;\r\n}());\r\nexports.HTMLTemplates = HTMLTemplates;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/HTMLTemplates.ts?')},"./ts/com/quickhellou/IconSet.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.IconSet = void 0;\r\nvar HTMLUtils_1 = __webpack_require__(/*! ../genb/base/utils/HTMLUtils */ "./ts/com/genb/base/utils/HTMLUtils.ts");\r\nvar IconSet = /** @class */ (function () {\r\n    function IconSet(selector) {\r\n        this.iconElement = HTMLUtils_1.HTMLUtils.get(selector);\r\n    }\r\n    IconSet.prototype.toggle = function () {\r\n        if (this.iconElement.classList.contains("on")) {\r\n            this.iconElement.classList.remove("on");\r\n        }\r\n        else {\r\n            this.iconElement.classList.add("on");\r\n        }\r\n    };\r\n    IconSet.prototype.disable = function () {\r\n        if (!this.iconElement.classList.contains("on")) {\r\n            this.iconElement.classList.add("on");\r\n        }\r\n    };\r\n    IconSet.prototype.enable = function () {\r\n        if (this.iconElement.classList.contains("on")) {\r\n            this.iconElement.classList.remove("on");\r\n        }\r\n    };\r\n    return IconSet;\r\n}());\r\nexports.IconSet = IconSet;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/IconSet.ts?')},"./ts/com/quickhellou/InvitationView.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.InvitationView = void 0;\r\nvar HtmlComponent_1 = __webpack_require__(/*! ../genb/base/components/HtmlComponent */ "./ts/com/genb/base/components/HtmlComponent.ts");\r\nvar HTMLUtils_1 = __webpack_require__(/*! ../genb/base/utils/HTMLUtils */ "./ts/com/genb/base/utils/HTMLUtils.ts");\r\nvar StringUtils_1 = __webpack_require__(/*! ../genb/base/utils/StringUtils */ "./ts/com/genb/base/utils/StringUtils.ts");\r\n/**\r\n * Send invitation view component.\r\n *\r\n * @export\r\n * @class InvitationView\r\n * @extends {HTMLComponent}\r\n */\r\nvar InvitationView = /** @class */ (function (_super) {\r\n    __extends(InvitationView, _super);\r\n    /**\r\n     * Creates an instance of InvitationView.\r\n     *\r\n     * @param {HTMLElement} element\r\n     * @memberof InvitationView\r\n     */\r\n    function InvitationView(element) {\r\n        var _this = _super.call(this, element) || this;\r\n        _this.sendInvitationForm = _this.findElement(".send-invitation-form");\r\n        _this.addFormEvents();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Adds event to the send invitaion form.\r\n     *\r\n     * @private\r\n     * @memberof InvitationView\r\n     */\r\n    InvitationView.prototype.addFormEvents = function () {\r\n        this.sendInvitationForm.addEventListener("submit", function (event) {\r\n            event.preventDefault();\r\n            var emailInput = HTMLUtils_1.HTMLUtils.get(".send-invitation__email");\r\n            var email = emailInput.value;\r\n            var messageInput = HTMLUtils_1.HTMLUtils.get(".send-invitation__message-editable");\r\n            var message = messageInput.innerHTML;\r\n            var messageErrorMessageElement = HTMLUtils_1.HTMLUtils.get(".send-invitation__error--message");\r\n            messageErrorMessageElement.classList.add("hidden");\r\n            var emailErrorMessageElement = HTMLUtils_1.HTMLUtils.get(".send-invitation__error--email");\r\n            emailErrorMessageElement.classList.add("hidden");\r\n            if (StringUtils_1.StringUtils.isNotEmpty(email) && StringUtils_1.StringUtils.isNotEmpty(message)) {\r\n                var formData = new FormData();\r\n                formData.append("email", email);\r\n                formData.append("subject", "Quick Hellou - Invitation");\r\n                formData.append("message", message.trim());\r\n                formData.append("dateTime", StringUtils_1.StringUtils.EMPTY);\r\n                formData.append("attachCalendar", StringUtils_1.StringUtils.FALSE);\r\n                var request_1 = new XMLHttpRequest();\r\n                request_1.open("POST", "/sendinvitation");\r\n                request_1.addEventListener("load", function () {\r\n                    var sendInvitationBodyElement = HTMLUtils_1.HTMLUtils.get(".send-invitation__body");\r\n                    sendInvitationBodyElement.classList.add("hidden");\r\n                    var sendInvitationResultElement = HTMLUtils_1.HTMLUtils.get(".send-invitation__result");\r\n                    sendInvitationResultElement.classList.remove("hidden");\r\n                    var sendInvitationResultMessageElement = HTMLUtils_1.HTMLUtils.get(".send-invitation__result-message");\r\n                    sendInvitationResultMessageElement.classList.remove("js-error");\r\n                    sendInvitationResultMessageElement.innerHTML = request_1.responseText;\r\n                });\r\n                request_1.send(formData);\r\n            }\r\n            else {\r\n                if (StringUtils_1.StringUtils.isEmpty(message)) {\r\n                    messageErrorMessageElement.classList.remove("hidden");\r\n                }\r\n                if (StringUtils_1.StringUtils.isEmpty(email) || !StringUtils_1.StringUtils.isEmailValid(email)) {\r\n                    emailErrorMessageElement.classList.remove("hidden");\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return InvitationView;\r\n}(HtmlComponent_1.HTMLComponent));\r\nexports.InvitationView = InvitationView;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/InvitationView.ts?')},"./ts/com/quickhellou/LoadingParams.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.LoadingParams = void 0;\r\nvar Util_1 = __webpack_require__(/*! ./Util */ "./ts/com/quickhellou/Util.ts");\r\nvar BaseUtils_1 = __webpack_require__(/*! ../genb/base/utils/BaseUtils */ "./ts/com/genb/base/utils/BaseUtils.ts");\r\n/**\r\n * Loading params.\r\n *\r\n * @export\r\n * @class LoadingParams\r\n */\r\nvar LoadingParams = /** @class */ (function () {\r\n    function LoadingParams(roomId) {\r\n        this.errorMessages = new Array();\r\n        this.warningMessages = new Array();\r\n        this.suggestedRoomId = Util_1.Util.randomString(9);\r\n        this.connect = false;\r\n        this.roomID = roomId;\r\n    }\r\n    /**\r\n     * Loads settings data acquired from local service.\r\n     *\r\n     * @param inlineLoadingParams\r\n     */\r\n    LoadingParams.prototype.load = function (inlineLoadingParams) {\r\n        if (BaseUtils_1.BaseUtils.isObjectDefined(inlineLoadingParams)) {\r\n            this.bypassJoinConfirmation = inlineLoadingParams.bypassJoinConfirmation;\r\n            this.iceServerRequestUrl = inlineLoadingParams.ice_server_url;\r\n            this.errorMessages = inlineLoadingParams.error_messages;\r\n            this.warningMessages = inlineLoadingParams.warning_messages;\r\n            this.mediaConstraints = inlineLoadingParams.media_constraints;\r\n            this.offerOptions = inlineLoadingParams.offer_options;\r\n            this.peerConnectionConfig = inlineLoadingParams.pc_config;\r\n            this.peerConnectionConstraints = inlineLoadingParams.pc_constraints;\r\n            this.roomType = inlineLoadingParams.room_type;\r\n            this.wssPostUrl = inlineLoadingParams.wss_post_url;\r\n            this.wssUrl = inlineLoadingParams.wss_url;\r\n            this.hostUrl = inlineLoadingParams.host_url;\r\n            if (BaseUtils_1.BaseUtils.isObjectDefined(inlineLoadingParams.room_id)) {\r\n                this.roomID = inlineLoadingParams.room_id;\r\n            }\r\n            if (BaseUtils_1.BaseUtils.isObjectDefined(inlineLoadingParams.room_link)) {\r\n                this.roomLink = inlineLoadingParams.room_link;\r\n            }\r\n            if (BaseUtils_1.BaseUtils.isObjectDefined(inlineLoadingParams.additional_param)) {\r\n                this.additionalParam = inlineLoadingParams.additional_param;\r\n            }\r\n        }\r\n    };\r\n    return LoadingParams;\r\n}());\r\nexports.LoadingParams = LoadingParams;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/LoadingParams.ts?')},"./ts/com/quickhellou/PeerConnectionClient.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PeerConnectionClient = void 0;\r\nvar SDPUtils_1 = __webpack_require__(/*! ./SDPUtils */ \"./ts/com/quickhellou/SDPUtils.ts\");\r\nvar PeerConnectionClientEvent_1 = __webpack_require__(/*! ./PeerConnectionClientEvent */ \"./ts/com/quickhellou/PeerConnectionClientEvent.ts\");\r\nvar BaseUtils_1 = __webpack_require__(/*! ../genb/base/utils/BaseUtils */ \"./ts/com/genb/base/utils/BaseUtils.ts\");\r\nvar Constants_1 = __webpack_require__(/*! ./Constants */ \"./ts/com/quickhellou/Constants.ts\");\r\nvar StringUtils_1 = __webpack_require__(/*! ../genb/base/utils/StringUtils */ \"./ts/com/genb/base/utils/StringUtils.ts\");\r\nvar FormService_1 = __webpack_require__(/*! ../genb/base/services/FormService */ \"./ts/com/genb/base/services/FormService.ts\");\r\nvar PeerConnectionResponseType_1 = __webpack_require__(/*! ./application/model/PeerConnectionResponseType */ \"./ts/com/quickhellou/application/model/PeerConnectionResponseType.ts\");\r\nvar Log_1 = __webpack_require__(/*! ../genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\r\nvar PeerConnectionIdentity_1 = __webpack_require__(/*! ./application/model/PeerConnectionIdentity */ \"./ts/com/quickhellou/application/model/PeerConnectionIdentity.ts\");\r\nvar StatsMonitor_1 = __webpack_require__(/*! ./application/controller/StatsMonitor */ \"./ts/com/quickhellou/application/controller/StatsMonitor.ts\");\r\nvar BandwidthLevelUpdateEvent_1 = __webpack_require__(/*! ./application/events/BandwidthLevelUpdateEvent */ \"./ts/com/quickhellou/application/events/BandwidthLevelUpdateEvent.ts\");\r\nvar BandwidthLevel_1 = __webpack_require__(/*! ./application/model/BandwidthLevel */ \"./ts/com/quickhellou/application/model/BandwidthLevel.ts\");\r\n/**\r\n * Peer connection client (WebRTC).\r\n *\r\n * @export\r\n * @class PeerConnectionClient\r\n * @extends {EventDispatcherService}\r\n */\r\nvar PeerConnectionClient = /** @class */ (function (_super) {\r\n    __extends(PeerConnectionClient, _super);\r\n    /**\r\n     * Creates an instance of PeerConnectionClient.\r\n     *\r\n     * @param {LoadingParams} params\r\n     * @param {number} startTime\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    function PeerConnectionClient(params, startTime, session) {\r\n        var _this = _super.call(this) || this;\r\n        _this.requireDataConsume = false;\r\n        _this.params = params;\r\n        _this.startTime = startTime;\r\n        _this.identity = new PeerConnectionIdentity_1.PeerConnectionIdentity();\r\n        _this.session = session;\r\n        _this.localIceCandidates = [];\r\n        return _this;\r\n    }\r\n    /**\r\n     * Initializes the client.\r\n     *\r\n     * @returns {Promise<void>}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.init = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            // Create an RTCPeerConnection via the polyfill (adapter.js).\r\n            // adapter.js is a shim to insulate apps from spec changes and prefix differences.\r\n            // https://webrtcglossary.com/adapter-js/\r\n            _this.peerConnection = new RTCPeerConnection(_this.params.peerConnectionConfig, _this.params.peerConnectionConstraints);\r\n            _this.peerConnection.onicecandidate = function (ev) {\r\n                _this.onIceCandidate(ev);\r\n            };\r\n            _this.peerConnection.ontrack = function (ev) {\r\n                _this.onRemoteStreamAdded(ev);\r\n            };\r\n            _this.peerConnection.onnegotiationneeded = function (event) { return __awaiter(_this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    this.renegotiate();\r\n                    return [2 /*return*/];\r\n                });\r\n            }); };\r\n            _this.peerConnection.onsignalingstatechange = function (message) {\r\n                _this.onSignalingStateChanged();\r\n            };\r\n            _this.peerConnection.oniceconnectionstatechange = function (message) {\r\n                _this.onIceConnectionStateChanged();\r\n            };\r\n            _this.peerConnection.onstatsended = function (message) {\r\n                Log_1.Log.log('message', message);\r\n            };\r\n            _this.peerConnection.onicegatheringstatechange = function (ev) {\r\n                if (_this.peerConnection.iceGatheringState === 'complete') {\r\n                    _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ICE_GATHERING_COMPLETE, {\r\n                        session: _this.session,\r\n                        candidates: _this.localIceCandidates,\r\n                    });\r\n                    _this.localIceCandidates = [];\r\n                }\r\n            };\r\n            // is it required?\r\n            window.dispatchEvent(new CustomEvent('pccreated', {\r\n                detail: {\r\n                    pc: _this,\r\n                    sessionId: _this.params.roomID,\r\n                    time: new Date(),\r\n                    userId: _this.params.roomID + (_this.session.isInitiator ? '-0' : '-1'),\r\n                },\r\n            }));\r\n            _this.hasRemoteSdp = false;\r\n            _this.messageQueue = [];\r\n            _this.started = false;\r\n            _this.statsMonitor = new StatsMonitor_1.StatsMonitor(_this.peerConnection);\r\n            _this.statsMonitor.addEventListener(BandwidthLevelUpdateEvent_1.BandwidthLevelUpdateEvent.OUTBOUND_LEVEL_CHANGE, function (data) {\r\n                _this.updateOutboundStream(data.level);\r\n            }, _this);\r\n            _this.statsMonitor.addEventListener(BandwidthLevelUpdateEvent_1.BandwidthLevelUpdateEvent.INBOUND_LEVEL_CHANGE, function (data) {\r\n                _this.updateInboundStream(data.level);\r\n            }, _this);\r\n            _this.statsMonitor.run();\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Handles signaling message communication event.\r\n     *\r\n     * @public\r\n     * @param {any} message\r\n     * @returns {void}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.receiveSignalingMessage = function (messageObj) {\r\n        // const messageObj: any = Util.parseJSON(message)\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(messageObj)) {\r\n            Log_1.Log.log('Message object is not defined.');\r\n            return;\r\n        }\r\n        var type = messageObj.type;\r\n        if ((this.session.isInitiator && PeerConnectionResponseType_1.PeerConnectionResponseType.isAnswer(type)) ||\r\n            (!this.session.isInitiator && PeerConnectionResponseType_1.PeerConnectionResponseType.isOffer(type))) {\r\n            this.hasRemoteSdp = true;\r\n            // Always process offer before candidates.\r\n            this.messageQueue.unshift(messageObj);\r\n        }\r\n        else if (PeerConnectionResponseType_1.PeerConnectionResponseType.isCandidate(type)) {\r\n            this.messageQueue.push(messageObj);\r\n        }\r\n        this.drainMessageQueue();\r\n    };\r\n    PeerConnectionClient.prototype.hasActiveRemoteSdp = function () {\r\n        return this.hasRemoteSdp;\r\n    };\r\n    /**\r\n     * Adds display media track to the RTCPeerConnection client.\r\n     *\r\n     * @public\r\n     * @param {MediaStreamTrack} track\r\n     * @returns {void}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.addVideoTrack = function (track) {\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\r\n            Log_1.Log.error('Peer connection is not defined.');\r\n            return;\r\n        }\r\n        Promise.all(this.peerConnection.getSenders().map(function (sender) {\r\n            if (sender.track.kind === 'video') {\r\n                try {\r\n                    var parameters = sender.getParameters();\r\n                    parameters.degradationPreference = 'maintain-resolution';\r\n                    sender.setParameters(parameters).then(function () {\r\n                        sender.replaceTrack(track);\r\n                    });\r\n                }\r\n                catch (e) {\r\n                    Log_1.Log.warn('Replace track failure.');\r\n                }\r\n            }\r\n        }));\r\n    };\r\n    /**\r\n     * Returns peer connection stats.\r\n     *\r\n     * @public\r\n     * @param {*} callback\r\n     * @returns {void}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.getPeerConnectionStats = function (track, callback) {\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\r\n            Log_1.Log.warn('PeerConnectionClient::getPeerConnectionStats No RTCPeerConnection object.');\r\n            return;\r\n        }\r\n        this.peerConnection.getStats(track).then(callback);\r\n    };\r\n    /**\r\n     * Adds a stream to the peer connection to send it to a remote peer.\r\n     *\r\n     * @public\r\n     * @param {MediaStream} stream\r\n     * @returns {void}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.addStream = function (stream) {\r\n        var _this = this;\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\r\n            return null;\r\n        }\r\n        stream.getTracks().forEach(function (track) {\r\n            _this.peerConnection.addTrack(track, stream);\r\n        });\r\n    };\r\n    /**\r\n     * Returns peer connection states.\r\n     *\r\n     * @public\r\n     * @returns {any}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.getPeerConnectionStates = function () {\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\r\n            return null;\r\n        }\r\n        return {\r\n            signalingState: this.peerConnection.signalingState,\r\n            iceGatheringState: this.peerConnection.iceGatheringState,\r\n            iceConnectionState: this.peerConnection.iceConnectionState,\r\n        };\r\n    };\r\n    /**\r\n     * Closes peer connection.\r\n     *\r\n     * @public\r\n     * @returns {void}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.close = function () {\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\r\n            return;\r\n        }\r\n        this.peerConnection.close();\r\n        window.dispatchEvent(new CustomEvent('pcclosed', {\r\n            detail: {\r\n                pc: this,\r\n                time: new Date(),\r\n            },\r\n        }));\r\n        this.peerConnection = null;\r\n        this.statsMonitor.stop();\r\n    };\r\n    /**\r\n     * Starts signaling as initiator.\r\n     *\r\n     * @public\r\n     * @param {*} offerOptions\r\n     * @returns {boolean}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.startAsInitiator = function (offerOptions) {\r\n        var _this = this;\r\n        Log_1.Log.breakpoint('Start as initiator.');\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\r\n            Log_1.Log.log('this.peerConnection not defined. return');\r\n            return false;\r\n        }\r\n        if (this.started) {\r\n            Log_1.Log.log('already started. return');\r\n            return false;\r\n        }\r\n        this.started = true;\r\n        var constraints = SDPUtils_1.SDPUtils.mergeConstraints(PeerConnectionClient.DEFAULT_SDP_OFFER_OPTIONS, offerOptions);\r\n        this.peerConnection\r\n            .createOffer(constraints)\r\n            .then(function (sessionDescriptionInit) {\r\n            _this.setLocalSdpAndNotify(sessionDescriptionInit).then(function () {\r\n                _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.CREATE_OFFER_SUCCESS, _this.session);\r\n            });\r\n        })\r\n            .catch(function (reason) {\r\n            return _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ERROR, \"ERROR:createOffer => \" + reason);\r\n        });\r\n        return true;\r\n    };\r\n    /**\r\n     * Starts signaling when another peer is present.\r\n     *\r\n     * @param {any} initialMessages\r\n     *              SDP and type data\r\n     * @returns {boolean}\r\n     *              is process successful\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.startAsReceiver = function (initialMessages) {\r\n        var _this = this;\r\n        Log_1.Log.breakpoint('Start as receiver.');\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\r\n            return false;\r\n        }\r\n        if (this.started) {\r\n            return false;\r\n        }\r\n        this.started = true;\r\n        if (BaseUtils_1.BaseUtils.isObjectDefined(initialMessages) &&\r\n            initialMessages.length > 0) {\r\n            // Convert received messages to JSON objects and add them to the message\r\n            // queue.\r\n            initialMessages.forEach(function (message) {\r\n                Log_1.Log.log('proceed with initial message', message);\r\n                _this.receiveSignalingMessage(message);\r\n            });\r\n            return true;\r\n        }\r\n        // We may have queued messages received from the signaling channel before\r\n        // started.\r\n        if (this.messageQueue.length > 0) {\r\n            Log_1.Log.log('*** have already queued messages so drain them ***');\r\n            this.drainMessageQueue();\r\n        }\r\n        else {\r\n            Log_1.Log.log('*** requires remote data to consume ***');\r\n            this.requireDataConsume = true;\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    PeerConnectionClient.prototype.getSessionId = function () {\r\n        return this.session.id;\r\n    };\r\n    /**\r\n     * Gets the session.\r\n     *\r\n     * @returns {RtcSession}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.getSession = function () {\r\n        return this.session;\r\n    };\r\n    /**\r\n     * Sets the session.\r\n     *\r\n     * @public\r\n     * @param {RtcSession} session\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.setSession = function (session) {\r\n        this.session = session;\r\n    };\r\n    /**\r\n     * Returns true if send message using memorystore channel.\r\n     *\r\n     * @public\r\n     * @returns {boolean}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.ifSendAsPyMessage = function () {\r\n        if (!this.session.isInitiator) {\r\n            return false;\r\n        }\r\n        if (StringUtils_1.StringUtils.isNotEmpty(this.session.otherClientId)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Gets identity token.\r\n     *\r\n     * @public\r\n     * @returns {string}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.getId = function () {\r\n        return this.session.id;\r\n    };\r\n    /**\r\n     * Changes connection bandwidth.\r\n     *\r\n     * @param {string} bandwidth\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.changeBandwidth = function (bandwidth) {\r\n        var sender = this.peerConnection.getSenders()[0];\r\n        var parameters = sender.getParameters();\r\n        if (!parameters.encodings) {\r\n            parameters.encodings = [{ rid: StringUtils_1.StringUtils.EMPTY }];\r\n        }\r\n        if (bandwidth === 'unlimited' &&\r\n            parameters.encodings[0].maxBitrate !== undefined) {\r\n            delete parameters.encodings[0].maxBitrate;\r\n        }\r\n        else {\r\n            ;\r\n            parameters.encodings[0].degradationPreference =\r\n                'maintain-resolution';\r\n            parameters.encodings[0].maxBitrate = Number(bandwidth) * 1000;\r\n            parameters.encodings[0].scaleResolutionDownBy = 8;\r\n        }\r\n        parameters.degradationPreference = 'maintain-resolution';\r\n        sender\r\n            .setParameters(parameters)\r\n            .catch(function (reason) { return Log_1.Log.error('error', reason); });\r\n    };\r\n    PeerConnectionClient.prototype.onRemoteIceComplete = function (candidateMessages) {\r\n        Log_1.Log.log('state', this.peerConnection.connectionState);\r\n        Log_1.Log.log('candidates', candidateMessages);\r\n    };\r\n    /**\r\n     * Updates outbound stream with a new bitrate level.\r\n     *\r\n     * @private\r\n     * @param {string} level\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.updateOutboundStream = function (level) {\r\n        this.changeBandwidth(BandwidthLevel_1.BandwidthLevel.getBitrate(level));\r\n    };\r\n    PeerConnectionClient.prototype.updateInboundStream = function (level) {\r\n        this.changeBandwidth(BandwidthLevel_1.BandwidthLevel.getBitrate(level));\r\n        return;\r\n    };\r\n    /**\r\n     * Renegotiates session.\r\n     * Note: No need to handle this unless using EdgeHTML browser.\r\n     *\r\n     * @private\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.renegotiate = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                Log_1.Log.log('Negotiation needed.');\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Sets remote SDP.\r\n     *\r\n     * @private\r\n     * @param {*} message\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.setRemoteSdp = function (message) {\r\n        var _this = this;\r\n        message.sdp = SDPUtils_1.SDPUtils.maybeSetOpusOptions(message.sdp, this.params);\r\n        message.sdp = SDPUtils_1.SDPUtils.maybePreferAudioSendCodec(message.sdp, this.params);\r\n        message.sdp = SDPUtils_1.SDPUtils.maybePreferVideoSendCodec(message.sdp, this.params);\r\n        message.sdp = SDPUtils_1.SDPUtils.maybeSetAudioSendBitRate(message.sdp, this.params);\r\n        message.sdp = SDPUtils_1.SDPUtils.maybeSetVideoSendBitRate(message.sdp, this.params);\r\n        message.sdp = SDPUtils_1.SDPUtils.maybeSetVideoSendInitialBitRate(message.sdp, this.params);\r\n        message.sdp = SDPUtils_1.SDPUtils.maybeRemoveVideoFec(message.sdp, this.params);\r\n        this.peerConnection\r\n            .setRemoteDescription(new RTCSessionDescription(message))\r\n            .then(function () {\r\n            _this.onSetRemoteDescriptionSuccess();\r\n        })\r\n            .catch(function (reason) {\r\n            _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ERROR, 'setRemoteDescription');\r\n        });\r\n    };\r\n    /**\r\n     * Handles remote session description setting success.\r\n     *\r\n     * @private\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.onSetRemoteDescriptionSuccess = function () {\r\n        // By now all onaddstream events for the setRemoteDescription have fired,\r\n        // so we can know if the peer has any remote video streams that we need\r\n        // to wait for. Otherwise, transition immediately to the active state.\r\n        var remoteStreams = this.getRemoteStreams();\r\n        var isRemoteStreamAvailable = remoteStreams.length > 0;\r\n        var isRemoteVideoPlaybackAvailableParam = isRemoteStreamAvailable && remoteStreams[0].getVideoTracks().length > 0;\r\n        var isRemoteDisplayMediaAvailableParam = isRemoteStreamAvailable && remoteStreams[0].getVideoTracks().length > 1;\r\n        this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.REMOTE_SDP_PROTOCOL_RECEIVED, {\r\n            isRemoteDisplayMediaAvailable: isRemoteDisplayMediaAvailableParam,\r\n            isRemoteVideoPlaybackAvailable: isRemoteVideoPlaybackAvailableParam,\r\n            sessionId: this.session.id,\r\n        });\r\n        Log_1.Log.log('Remote session description setting complete.');\r\n    };\r\n    /**\r\n     * Processes signaling message.\r\n     *\r\n     * @private\r\n     * @param {*} message\r\n     * @returns {Promise<any>}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.processSignalingMessage = function (message) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            Log_1.Log.info('====> processSignalingMessage', message);\r\n            // if is receiver and get an offer\r\n            if (message.type === PeerConnectionResponseType_1.PeerConnectionResponseType.OFFER &&\r\n                !_this.session.isInitiator) {\r\n                if (_this.peerConnection.signalingState !== 'stable') {\r\n                    Log_1.Log.warn(\"Remote offer received in unexpected state:\\n           \" + _this.peerConnection.signalingState);\r\n                    resolve();\r\n                    return;\r\n                }\r\n                _this.setRemoteSdp(message);\r\n                _this.doAnswer();\r\n                resolve();\r\n                return;\r\n            }\r\n            // if is initiator and get an answer\r\n            if (message.type === PeerConnectionResponseType_1.PeerConnectionResponseType.ANSWER &&\r\n                _this.session.isInitiator) {\r\n                if (_this.peerConnection.signalingState !== 'have-local-offer') {\r\n                    Log_1.Log.warn(\"Remote answer received in unexpected state:\\n          \" + _this.peerConnection.signalingState);\r\n                    resolve();\r\n                    return;\r\n                }\r\n                _this.setRemoteSdp(message);\r\n                resolve();\r\n                return;\r\n            }\r\n            if (message.type === 'candidate') {\r\n                var candidate = new RTCIceCandidate({\r\n                    candidate: message.candidate,\r\n                    sdpMLineIndex: message.label,\r\n                });\r\n                Log_1.Log.fatal('Remote ICE candidate');\r\n                _this.recordIceCandidate('Remote', candidate);\r\n                _this.peerConnection\r\n                    .addIceCandidate(candidate)\r\n                    .then(function () {\r\n                    Log_1.Log.log('Remote candidate added successfully.');\r\n                })\r\n                    .catch(function (reason) {\r\n                    _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ERROR, \"ERROR:addIceCandidate => \" + reason);\r\n                });\r\n                resolve();\r\n                return;\r\n            }\r\n            Log_1.Log.warn('Unexpected message: ' + JSON.stringify(message));\r\n            reject(JSON.stringify(message));\r\n        });\r\n    };\r\n    /**\r\n     * When we receive messages from PyApp registration and from the WSS connection,\r\n     * we add them to a queue and drain it if conditions are right.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.drainMessageQueue = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        Log_1.Log.info('drainMessageQueue', this.started, this.hasRemoteSdp);\r\n                        // It's possible that we finish registering and receiving messages from WSS\r\n                        // before our peer connection is created or started. We need to wait for the\r\n                        // peer connection to be created and started before processing messages.\r\n                        //\r\n                        // Also, the order of messages is in general not the same as the POST order\r\n                        // from the other client because the POSTs are async and the server may handle\r\n                        // some requests faster than others. We need to process offer before\r\n                        // candidates so we wait for the offer to arrive first if we're answering.\r\n                        // Offers are added to the front of the queue.\r\n                        if (!this.peerConnection || !this.started || !this.hasRemoteSdp) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!(this.messageQueue.length > 0)) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, this.processSignalingMessage(this.messageQueue.shift())];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 1];\r\n                    case 3:\r\n                        this.requireDataConsume = false;\r\n                        this.messageQueue = [];\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Sends an answer to a remote peer.\r\n     *\r\n     * @private\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.doAnswer = function () {\r\n        var _this = this;\r\n        this.peerConnection\r\n            .createAnswer()\r\n            .then(function (sessionDescription) {\r\n            _this.setLocalSdpAndNotify(sessionDescription).then(function () {\r\n                _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.CREATE_ANSWER_SUCCESS, _this.session);\r\n            });\r\n        })\r\n            .catch(function (reason) {\r\n            _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ERROR, \"ERROR:createAnswer => \" + reason);\r\n        });\r\n    };\r\n    /**\r\n     * Sets local session description protocol (SDP) and sends notification\r\n     * to the RTC server.\r\n     * SDP is used by WebRTC to negotiate the session’s parameters.\r\n     * https://webrtcglossary.com/sdp/\r\n     *\r\n     * @private\r\n     * @param {RTCSessionDescriptionInit} sessionDescriptionInit\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.setLocalSdpAndNotify = function (sessionDescriptionInit) {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            sessionDescriptionInit.sdp = SDPUtils_1.SDPUtils.maybePreferAudioReceiveCodec(sessionDescriptionInit.sdp, _this.params);\r\n            sessionDescriptionInit.sdp = SDPUtils_1.SDPUtils.maybePreferVideoReceiveCodec(sessionDescriptionInit.sdp, _this.params);\r\n            sessionDescriptionInit.sdp = SDPUtils_1.SDPUtils.maybeSetAudioReceiveBitRate(sessionDescriptionInit.sdp, _this.params);\r\n            sessionDescriptionInit.sdp = SDPUtils_1.SDPUtils.maybeSetVideoReceiveBitRate(sessionDescriptionInit.sdp, _this.params);\r\n            sessionDescriptionInit.sdp = SDPUtils_1.SDPUtils.maybeRemoveVideoFec(sessionDescriptionInit.sdp, _this.params);\r\n            if (!SDPUtils_1.SDPUtils.isSendRecv(sessionDescriptionInit.sdp)) {\r\n                Log_1.Log.warn('No local stream is added to the peer connection.');\r\n            }\r\n            else {\r\n                _this.identity.localSessionId = SDPUtils_1.SDPUtils.getMsid(sessionDescriptionInit.sdp).replace(/\\{|\\}/g, '');\r\n            }\r\n            _this.peerConnection\r\n                .setLocalDescription(sessionDescriptionInit)\r\n                .then(function () {\r\n                Log_1.Log.log('PeerConnectionClient::setLocalSdpAndNotify Set session description success.');\r\n            })\r\n                .catch(function (reason) {\r\n                _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ERROR, \"ERROR::setLocalDescription => \" + reason);\r\n            });\r\n            // Chrome version of RTCSessionDescription can't be serialized directly\r\n            // because it JSON.stringify won't include attributes which are on the\r\n            // object's prototype chain. By creating the message to serialize\r\n            // explicitly we can avoid the issue.\r\n            _this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.SIGNALING_MESSAGE, {\r\n                sdp: sessionDescriptionInit.sdp,\r\n                type: sessionDescriptionInit.type,\r\n                sessionId: _this.session.id,\r\n            });\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Records ICE candidate in applicaton controller.\r\n     *\r\n     * @private\r\n     * @param {string} location\r\n     * @param {RTCIceCandidate} candidate\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.recordIceCandidate = function (locationParameter, candidate) {\r\n        this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.NEW_ICE_CANDIDATE, {\r\n            candidate: candidate.candidate,\r\n            location: locationParameter,\r\n        });\r\n        if (locationParameter === 'Local') {\r\n            this.localIceCandidates.push(candidate);\r\n        }\r\n    };\r\n    /**\r\n     * Handles signaling state change.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.onSignalingStateChanged = function () {\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\r\n            return;\r\n        }\r\n        Log_1.Log.log('PeerConnectionClient::onSignalingStateChanged Signaling state changed to: ' +\r\n            this.peerConnection.signalingState);\r\n        this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.SIGNALING_STATE_CHANGE);\r\n    };\r\n    /**\r\n     * Handles ICE connection state change.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.onIceConnectionStateChanged = function () {\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.peerConnection)) {\r\n            return;\r\n        }\r\n        Log_1.Log.log('PeerConnectionClient::onSignalingStateChanged ICE connection state changed to: ' +\r\n            this.peerConnection.iceConnectionState);\r\n        if (StringUtils_1.StringUtils.equals(this.peerConnection.iceConnectionState, 'completed')) {\r\n            Log_1.Log.log('ICE complete time: ' +\r\n                (window.performance.now() - this.startTime).toFixed(0) +\r\n                'ms.');\r\n        }\r\n        this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.ICE_CONNECTION_STATE_CHANGE);\r\n    };\r\n    /**\r\n     * Handles ICE candicate offer.\r\n     *\r\n     * @private\r\n     * @param {RTCPeerConnectionIceEvent} event\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.onIceCandidate = function (event) {\r\n        if (event.candidate) {\r\n            // Drop undesired candidates.\r\n            if (this.filterIceCandidate(event.candidate)) {\r\n                var message = {\r\n                    type: 'candidate',\r\n                    label: event.candidate.sdpMLineIndex,\r\n                    id: event.candidate.sdpMid,\r\n                    candidate: event.candidate.candidate,\r\n                    sessionId: this.session.id,\r\n                };\r\n                Log_1.Log.breakpoint('Local ICE candidate');\r\n                this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.SIGNALING_MESSAGE, message);\r\n                this.recordIceCandidate('Local', event.candidate);\r\n            }\r\n        }\r\n        else {\r\n            Log_1.Log.log('End of candidates.');\r\n        }\r\n    };\r\n    /**\r\n     * Checks if candidate should be dropped.\r\n     *\r\n     * @private\r\n     * @param {RTCIceCandidate} candidate\r\n     * @returns {boolean}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.filterIceCandidate = function (candidate) {\r\n        var candidateStr = candidate.candidate;\r\n        // Always drop TCP candidates. Not needed in this context.\r\n        if (candidateStr.indexOf(Constants_1.Constants.TCP) !== -1) {\r\n            return false;\r\n        }\r\n        // If we're trying to drop non-relay candidates, do that.\r\n        if (StringUtils_1.StringUtils.equals(this.params.peerConnectionConfig.iceTransports, Constants_1.Constants.RELAY) &&\r\n            !StringUtils_1.StringUtils.equals(SDPUtils_1.SDPUtils.iceCandidateType(candidateStr), Constants_1.Constants.RELAY)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Handles remote stream added.\r\n     *\r\n     * @private\r\n     * @param {RTCTrackEvent} event\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.onRemoteStreamAdded = function (event) {\r\n        Log_1.Log.log('onRemoteStreamAdded', event);\r\n        if (!event || event.type !== 'track') {\r\n            Log_1.Log.log('onRemoteStreamAdded return ');\r\n            return;\r\n        }\r\n        var mediaStream = event.streams[0];\r\n        Log_1.Log.log('onRemoteStreamAdded pass ', this.session.id, mediaStream);\r\n        this.dispatchEvent(PeerConnectionClientEvent_1.PeerConnectionClientEvent.REMOTE_STREAM_ADDED, {\r\n            sessionId: this.session.id,\r\n            stream: mediaStream,\r\n        });\r\n    };\r\n    /**\r\n     * Returns newly generated stream with remote tracks attached.\r\n     *\r\n     * @private\r\n     * @returns {MediaStream[]}\r\n     * @memberof PeerConnectionClient\r\n     */\r\n    PeerConnectionClient.prototype.getRemoteStreams = function () {\r\n        var stream = new MediaStream();\r\n        this.peerConnection.getReceivers().forEach(function (receiver) {\r\n            stream.addTrack(receiver.track);\r\n        });\r\n        stream.onremovetrack = function () {\r\n            Log_1.Log.log('Track removed.');\r\n        };\r\n        return [stream];\r\n    };\r\n    PeerConnectionClient.DEFAULT_SDP_OFFER_OPTIONS = {\r\n        offerToReceiveAudio: 1,\r\n        offerToReceiveVideo: 1,\r\n        voiceActivityDetection: false,\r\n    };\r\n    return PeerConnectionClient;\r\n}(FormService_1.FormService));\r\nexports.PeerConnectionClient = PeerConnectionClient;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/PeerConnectionClient.ts?")},"./ts/com/quickhellou/PeerConnectionClientEvent.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.PeerConnectionClientEvent = void 0;\r\nvar PeerConnectionClientEvent = /** @class */ (function () {\r\n    function PeerConnectionClientEvent() {\r\n    }\r\n    PeerConnectionClientEvent.REMOTE_SDP_PROTOCOL_RECEIVED = "remote_sdp_protocol_received";\r\n    PeerConnectionClientEvent.PY_MESSAGE = "gae_message";\r\n    PeerConnectionClientEvent.SIGNALING_MESSAGE = "signaling_message";\r\n    PeerConnectionClientEvent.REMOTE_HANGUP = "remote_hangup";\r\n    PeerConnectionClientEvent.REMOTE_TEXT_CHAT_MESSAGE = "remote_text_chat_message";\r\n    PeerConnectionClientEvent.SIGNALING_STATE_CHANGE = "signaling_state_change";\r\n    PeerConnectionClientEvent.ICE_GATHERING_COMPLETE = "ice_gathering_complete";\r\n    PeerConnectionClientEvent.NEW_ICE_CANDIDATE = "new_ice_candidate";\r\n    PeerConnectionClientEvent.ICE_CONNECTION_STATE_CHANGE = "ice_connection_state_change";\r\n    PeerConnectionClientEvent.REMOTE_STREAM_ADDED = "remote_stream_added";\r\n    PeerConnectionClientEvent.REGISTERED = "registered";\r\n    PeerConnectionClientEvent.CREATE_OFFER_SUCCESS = "create_offer_success";\r\n    PeerConnectionClientEvent.CREATE_ANSWER_SUCCESS = "create_answer_success";\r\n    PeerConnectionClientEvent.REMOTE_CLIENT_REGISTERED = "remote_client_registered";\r\n    PeerConnectionClientEvent.ERROR = "error";\r\n    return PeerConnectionClientEvent;\r\n}());\r\nexports.PeerConnectionClientEvent = PeerConnectionClientEvent;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/PeerConnectionClientEvent.ts?')},"./ts/com/quickhellou/RoomSelection.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.RoomSelection = void 0;\r\nvar HTMLUtils_1 = __webpack_require__(/*! ../genb/base/utils/HTMLUtils */ "./ts/com/genb/base/utils/HTMLUtils.ts");\r\nvar EventDispatcherService_1 = __webpack_require__(/*! ../genb/base/services/EventDispatcherService */ "./ts/com/genb/base/services/EventDispatcherService.ts");\r\nvar RoomSelectionEvent_1 = __webpack_require__(/*! ./RoomSelectionEvent */ "./ts/com/quickhellou/RoomSelectionEvent.ts");\r\nvar Util_1 = __webpack_require__(/*! ./Util */ "./ts/com/quickhellou/Util.ts");\r\nvar RoomSelection = /** @class */ (function (_super) {\r\n    __extends(RoomSelection, _super);\r\n    /**\r\n     * Creates an instance of RoomSelection.\r\n     *\r\n     * @param {string} roomType\r\n     * @memberof RoomSelection\r\n     */\r\n    function RoomSelection(roomType) {\r\n        var _this = _super.call(this) || this;\r\n        _this.roomType = roomType;\r\n        _this.roomID = Util_1.Util.randomString(9);\r\n        _this.attachButtonEvents();\r\n        return _this;\r\n    }\r\n    RoomSelection.prototype.attachButtonEvents = function () {\r\n        this.attachJoinButtonsEvents();\r\n        this.attachSchedulerButtonsEvents();\r\n    };\r\n    RoomSelection.prototype.attachJoinButtonsEvents = function () {\r\n        var _this = this;\r\n        var joinButtons = HTMLUtils_1.HTMLUtils.array(\'.button--quick-talk\');\r\n        joinButtons.forEach(function (joinButton) {\r\n            joinButton.addEventListener(\'click\', function () {\r\n                _this.onJoinButton();\r\n            }, false);\r\n        });\r\n    };\r\n    RoomSelection.prototype.attachSchedulerButtonsEvents = function () {\r\n        var _this = this;\r\n        var schedulerButtons = HTMLUtils_1.HTMLUtils.array(\'.button--scheduler\');\r\n        schedulerButtons.forEach(function (schedulerButton) {\r\n            schedulerButton.addEventListener(\'click\', function () {\r\n                _this.onSchedulerButton();\r\n            }, false);\r\n        });\r\n    };\r\n    RoomSelection.matchRandomRoomPattern = function (roomID) {\r\n        return roomID.match(/^\\d{9}$/) !== null;\r\n    };\r\n    RoomSelection.prototype.removeEventListeners = function () { };\r\n    RoomSelection.prototype.onJoinButton = function () {\r\n        this.dispatchEvent(RoomSelectionEvent_1.RoomSelectionEvent.ROOM_SELECTED, {\r\n            roomID: this.roomID,\r\n        });\r\n    };\r\n    RoomSelection.prototype.onSchedulerButton = function () {\r\n        this.dispatchEvent(RoomSelectionEvent_1.RoomSelectionEvent.SCHEDULER_SELECTED, {\r\n            roomID: this.roomID,\r\n        });\r\n    };\r\n    return RoomSelection;\r\n}(EventDispatcherService_1.EventDispatcherService));\r\nexports.RoomSelection = RoomSelection;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/RoomSelection.ts?')},"./ts/com/quickhellou/RoomSelectionEvent.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.RoomSelectionEvent = void 0;\r\nvar RoomSelectionEvent = /** @class */ (function () {\r\n    function RoomSelectionEvent() {\r\n    }\r\n    RoomSelectionEvent.ROOM_SELECTED = "room_selected";\r\n    RoomSelectionEvent.SCHEDULER_SELECTED = "scheduler_selected";\r\n    return RoomSelectionEvent;\r\n}());\r\nexports.RoomSelectionEvent = RoomSelectionEvent;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/RoomSelectionEvent.ts?')},"./ts/com/quickhellou/RoomSelectionUIConstants.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.RoomSelectionUIConstants = void 0;\r\nvar RoomSelectionUIConstants = /** @class */ (function () {\r\n    function RoomSelectionUIConstants() {\r\n        this.div = ".room-selection";\r\n        this.joinButton = ".join-button";\r\n        this.joinCircle = ".button--quick-talk";\r\n    }\r\n    return RoomSelectionUIConstants;\r\n}());\r\nexports.RoomSelectionUIConstants = RoomSelectionUIConstants;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/RoomSelectionUIConstants.ts?')},"./ts/com/quickhellou/SDPUtils.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.SDPUtils = void 0;\r\nvar Log_1 = __webpack_require__(/*! ../genb/base/utils/Log */ "./ts/com/genb/base/utils/Log.ts");\r\nvar StringUtils_1 = __webpack_require__(/*! ../genb/base/utils/StringUtils */ "./ts/com/genb/base/utils/StringUtils.ts");\r\n/**\r\n * Session Description Protocol utils.\r\n *\r\n * @export\r\n * @class SDPUtils\r\n */\r\nvar SDPUtils = /** @class */ (function () {\r\n    function SDPUtils() {\r\n    }\r\n    /**\r\n     * Merges options contstraints.\r\n     *\r\n     * @static\r\n     * @param {*} cons1\r\n     * @param {*} cons2\r\n     * @returns\r\n     * @memberof SDPUtils\r\n     */\r\n    SDPUtils.mergeConstraints = function (cons1, cons2) {\r\n        if (!cons1 || !cons2) {\r\n            return cons1 || cons2;\r\n        }\r\n        var merged = cons1;\r\n        for (var _i = 0, _a = Object.keys(cons2); _i < _a.length; _i++) {\r\n            var key = _a[_i];\r\n            merged[key] = cons2[key];\r\n        }\r\n        return merged;\r\n    };\r\n    /**\r\n     * Gets ICE candidate string.\r\n     *\r\n     * @static\r\n     * @param {string} candidateStr\r\n     * @returns\r\n     * @memberof SDPUtils\r\n     */\r\n    SDPUtils.iceCandidateType = function (candidateStr) {\r\n        return candidateStr.split(" ")[7];\r\n    };\r\n    SDPUtils.maybeSetOpusOptions = function (sdp, params) {\r\n        // Set Opus in Stereo, if stereo is true, unset it, if stereo is false, and\r\n        // do nothing if otherwise.\r\n        if (params.opusStereo === "true") {\r\n            sdp = this.setCodecParam(sdp, "opus/48000", "stereo", "1");\r\n        }\r\n        else if (params.opusStereo === "false") {\r\n            sdp = this.removeCodecParam(sdp, "opus/48000", "stereo");\r\n        }\r\n        // Set Opus FEC, if opusfec is true, unset it, if opusfec is false, and\r\n        // do nothing if otherwise.\r\n        if (params.opusFec === "true") {\r\n            sdp = this.setCodecParam(sdp, "opus/48000", "useinbandfec", "1");\r\n        }\r\n        else if (params.opusFec === "false") {\r\n            sdp = this.removeCodecParam(sdp, "opus/48000", "useinbandfec");\r\n        }\r\n        // Set Opus DTX, if opusdtx is true, unset it, if opusdtx is false, and\r\n        // do nothing if otherwise.\r\n        if (params.opusDtx === "true") {\r\n            sdp = this.setCodecParam(sdp, "opus/48000", "usedtx", "1");\r\n        }\r\n        else if (params.opusDtx === "false") {\r\n            sdp = this.removeCodecParam(sdp, "opus/48000", "usedtx");\r\n        }\r\n        // Set Opus maxplaybackrate, if requested.\r\n        if (params.opusMaxPbr) {\r\n            sdp = this.setCodecParam(sdp, "opus/48000", "maxplaybackrate", params.opusMaxPbr);\r\n        }\r\n        return sdp;\r\n    };\r\n    SDPUtils.maybeSetAudioSendBitRate = function (sdp, params) {\r\n        if (!params.audioSendBitrate) {\r\n            return sdp;\r\n        }\r\n        Log_1.Log.log("Prefer audio send bitrate: " + params.audioSendBitrate);\r\n        return this.preferBitRate(sdp, params.audioSendBitrate, "audio");\r\n    };\r\n    SDPUtils.maybeSetAudioReceiveBitRate = function (sdp, params) {\r\n        if (!params.audioRecvBitrate) {\r\n            return sdp;\r\n        }\r\n        Log_1.Log.log("Prefer audio receive bitrate: " + params.audioRecvBitrate);\r\n        return this.preferBitRate(sdp, params.audioRecvBitrate, "audio");\r\n    };\r\n    SDPUtils.maybeSetVideoSendBitRate = function (sdp, params) {\r\n        if (!params.videoSendBitrate) {\r\n            return sdp;\r\n        }\r\n        Log_1.Log.log("Prefer video send bitrate: " + params.videoSendBitrate);\r\n        return this.preferBitRate(sdp, params.videoSendBitrate, "video");\r\n    };\r\n    SDPUtils.maybeSetVideoReceiveBitRate = function (sdp, params) {\r\n        if (!params.videoRecvBitrate) {\r\n            return sdp;\r\n        }\r\n        Log_1.Log.log("Prefer video receive bitrate: " + params.videoRecvBitrate);\r\n        return this.preferBitRate(sdp, params.videoRecvBitrate, "video");\r\n    };\r\n    // Add a b=AS:bitrate line to the m=mediaType section.\r\n    SDPUtils.preferBitRate = function (sdp, bitrate, mediaType) {\r\n        var sdpLines = sdp.split("\\r\\n");\r\n        // Find m line for the given mediaType.\r\n        var mLineIndex = this.findLine(sdpLines, "m=", mediaType);\r\n        if (mLineIndex === null) {\r\n            Log_1.Log.log("Failed to add bandwidth line to sdp, as no m-line found");\r\n            return sdp;\r\n        }\r\n        // Find next m-line if any.\r\n        var nextMLineIndex = this.findLineInRange(sdpLines, mLineIndex + 1, -1, "m=");\r\n        if (nextMLineIndex === null) {\r\n            nextMLineIndex = sdpLines.length;\r\n        }\r\n        // Find c-line corresponding to the m-line.\r\n        var cLineIndex = this.findLineInRange(sdpLines, mLineIndex + 1, nextMLineIndex, "c=");\r\n        if (cLineIndex === null) {\r\n            Log_1.Log.log("Failed to add bandwidth line to sdp, as no c-line found");\r\n            return sdp;\r\n        }\r\n        // Check if bandwidth line already exists between c-line and next m-line.\r\n        var bLineIndex = this.findLineInRange(sdpLines, cLineIndex + 1, nextMLineIndex, "b=AS");\r\n        if (bLineIndex) {\r\n            sdpLines.splice(bLineIndex, 1);\r\n        }\r\n        // Create the b (bandwidth) sdp line.\r\n        var bwLine = "b=AS:" + bitrate;\r\n        // As per RFC 4566, the b line should follow after c-line.\r\n        sdpLines.splice(cLineIndex + 1, 0, bwLine);\r\n        sdp = sdpLines.join("\\r\\n");\r\n        return sdp;\r\n    };\r\n    // Add an a=fmtp: x-google-min-bitrate=kbps line, if videoSendInitialBitrate\r\n    // is specified. We\'ll also add a x-google-min-bitrate value, since the max\r\n    // must be >= the min.\r\n    SDPUtils.maybeSetVideoSendInitialBitRate = function (sdp, params) {\r\n        var initialBitrate = Number(params.videoSendInitialBitrate);\r\n        if (!initialBitrate) {\r\n            return sdp;\r\n        }\r\n        // Validate the initial bitrate value.\r\n        var maxBitrate = initialBitrate;\r\n        var bitrate = Number(params.videoSendBitrate);\r\n        if (bitrate) {\r\n            if (initialBitrate > bitrate) {\r\n                Log_1.Log.log("Clamping initial bitrate to max bitrate of " + bitrate + " kbps.");\r\n                initialBitrate = bitrate;\r\n                params.videoSendInitialBitrate = initialBitrate;\r\n            }\r\n            maxBitrate = bitrate;\r\n        }\r\n        var sdpLines = sdp.split("\\r\\n");\r\n        // Search for m line.\r\n        var mLineIndex = this.findLine(sdpLines, "m=", "video");\r\n        if (mLineIndex === null) {\r\n            Log_1.Log.log("Failed to find video m-line");\r\n            return sdp;\r\n        }\r\n        // Figure out the first codec payload type on the m=video SDP line.\r\n        var videoMLine = sdpLines[mLineIndex];\r\n        var pattern = new RegExp("m=video\\\\s\\\\d+\\\\s[A-Z/]+\\\\s");\r\n        var sendPayloadType = videoMLine.split(pattern)[1].split(" ")[0];\r\n        var fmtpLine = sdpLines[this.findLine(sdpLines, "a=rtpmap", sendPayloadType)];\r\n        var codecName = fmtpLine\r\n            .split("a=rtpmap:" + sendPayloadType)[1]\r\n            .split("/")[0];\r\n        // Use codec from params if specified via URL param, otherwise use from SDP.\r\n        var codec = params.videoSendCodec || codecName;\r\n        sdp = this.setCodecParam(sdp, codec, "x-google-min-bitrate", params.videoSendInitialBitrate.toString());\r\n        sdp = this.setCodecParam(sdp, codec, "x-google-max-bitrate", maxBitrate.toString());\r\n        return sdp;\r\n    };\r\n    SDPUtils.removePayloadTypeFromMline = function (mLine, payloadType) {\r\n        mLine = mLine.split(" ");\r\n        for (var i = 0; i < mLine.length; ++i) {\r\n            if (mLine[i] === payloadType.toString()) {\r\n                mLine.splice(i, 1);\r\n            }\r\n        }\r\n        return mLine.join(" ");\r\n    };\r\n    SDPUtils.getMsid = function (sdp) {\r\n        var sdpLines = sdp.split("\\r\\n");\r\n        var index = this.findLine(sdpLines, "a=msid:");\r\n        if (index === null) {\r\n            return StringUtils_1.StringUtils.EMPTY;\r\n        }\r\n        var sdpLine = sdpLines[index];\r\n        return sdpLine\r\n            .match(new RegExp("a=msid:[a-z0-9A-Z{}-]+"))[0]\r\n            .replace(/a=msid:/, "");\r\n    };\r\n    /**\r\n     * Checks if protocol allows sending and receiving signal.\r\n     *\r\n     * @static\r\n     * @param {*} sdp\r\n     * @returns {boolean}\r\n     * @memberof SDPUtils\r\n     */\r\n    SDPUtils.isSendRecv = function (sdp) {\r\n        var sdpLines = sdp.split("\\r\\n");\r\n        var index = this.findLine(sdpLines, "a=sendrecv");\r\n        if (index === null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    SDPUtils.removeCodecByName = function (sdpLines, codec) {\r\n        var index = this.findLine(sdpLines, "a=rtpmap", codec);\r\n        if (index === null) {\r\n            return sdpLines;\r\n        }\r\n        var payloadType = this.getCodecPayloadTypeFromLine(sdpLines[index]);\r\n        sdpLines.splice(index, 1);\r\n        // Search for the video m= line and remove the codec.\r\n        var mLineIndex = this.findLine(sdpLines, "m=", "video");\r\n        if (mLineIndex === null) {\r\n            return sdpLines;\r\n        }\r\n        sdpLines[mLineIndex] = this.removePayloadTypeFromMline(sdpLines[mLineIndex], payloadType);\r\n        return sdpLines;\r\n    };\r\n    SDPUtils.removeCodecByPayloadType = function (sdpLines, payloadType) {\r\n        var index = this.findLine(sdpLines, "a=rtpmap", payloadType.toString());\r\n        if (index === null) {\r\n            return sdpLines;\r\n        }\r\n        sdpLines.splice(index, 1);\r\n        // Search for the video m= line and remove the codec.\r\n        var mLineIndex = this.findLine(sdpLines, "m=", "video");\r\n        if (mLineIndex === null) {\r\n            return sdpLines;\r\n        }\r\n        sdpLines[mLineIndex] = this.removePayloadTypeFromMline(sdpLines[mLineIndex], payloadType);\r\n        return sdpLines;\r\n    };\r\n    SDPUtils.maybeRemoveVideoFec = function (sdp, params) {\r\n        if (params.videoFec !== "false") {\r\n            return sdp;\r\n        }\r\n        var sdpLines = sdp.split("\\r\\n");\r\n        var index = this.findLine(sdpLines, "a=rtpmap", "red");\r\n        if (index === null) {\r\n            return sdp;\r\n        }\r\n        var redPayloadType = this.getCodecPayloadTypeFromLine(sdpLines[index]);\r\n        sdpLines = this.removeCodecByPayloadType(sdpLines, redPayloadType);\r\n        sdpLines = this.removeCodecByName(sdpLines, "ulpfec");\r\n        // Remove fmtp lines associated with red codec.\r\n        index = this.findLine(sdpLines, "a=fmtp", redPayloadType.toString());\r\n        if (index === null) {\r\n            return sdp;\r\n        }\r\n        var fmtpLine = this.parseFmtpLine(sdpLines[index]);\r\n        var rtxPayloadType = fmtpLine.pt;\r\n        if (rtxPayloadType === null) {\r\n            return sdp;\r\n        }\r\n        sdpLines.splice(index, 1);\r\n        sdpLines = this.removeCodecByPayloadType(sdpLines, rtxPayloadType);\r\n        return sdpLines.join("\\r\\n");\r\n    };\r\n    // Promotes |audioSendCodec| to be the first in the m=audio line, if set.\r\n    SDPUtils.maybePreferAudioSendCodec = function (sdp, params) {\r\n        return this.maybePreferCodec(sdp, "audio", "send", params.audioSendCodec);\r\n    };\r\n    // Promotes |audioRecvCodec| to be the first in the m=audio line, if set.\r\n    SDPUtils.maybePreferAudioReceiveCodec = function (sdp, params) {\r\n        return this.maybePreferCodec(sdp, "audio", "receive", params.audioRecvCodec);\r\n    };\r\n    // Promotes |videoSendCodec| to be the first in the m=audio line, if set.\r\n    SDPUtils.maybePreferVideoSendCodec = function (sdp, params) {\r\n        return this.maybePreferCodec(sdp, "video", "send", params.videoSendCodec);\r\n    };\r\n    // Promotes |videoRecvCodec| to be the first in the m=audio line, if set.\r\n    SDPUtils.maybePreferVideoReceiveCodec = function (sdp, params) {\r\n        return this.maybePreferCodec(sdp, "video", "receive", params.videoRecvCodec);\r\n    };\r\n    // Sets |codec| as the default |type| codec if it\'s present.\r\n    // The format of |codec| is \'NAME/RATE\', e.g. \'opus/48000\'.\r\n    SDPUtils.maybePreferCodec = function (sdp, type, dir, codec) {\r\n        var str = type + " " + dir + " codec";\r\n        if (!codec) {\r\n            Log_1.Log.log("No preference on " + str + ".");\r\n            return sdp;\r\n        }\r\n        Log_1.Log.log("Prefer " + str + ": " + codec);\r\n        var sdpLines = sdp.split("\\r\\n");\r\n        // Search for m line.\r\n        var mLineIndex = this.findLine(sdpLines, "m=", type);\r\n        if (mLineIndex === null) {\r\n            return sdp;\r\n        }\r\n        // If the codec is available, set it as the default in m line.\r\n        var payload = this.getCodecPayloadType(sdpLines, codec);\r\n        if (payload) {\r\n            sdpLines[mLineIndex] = this.setDefaultCodec(sdpLines[mLineIndex], payload);\r\n        }\r\n        sdp = sdpLines.join("\\r\\n");\r\n        return sdp;\r\n    };\r\n    // Set fmtp param to specific codec in SDP. If param does not exists, add it.\r\n    SDPUtils.setCodecParam = function (sdp, codec, param, value) {\r\n        var sdpLines = sdp.split("\\r\\n");\r\n        var fmtpLineIndex = this.findFmtpLine(sdpLines, codec);\r\n        var fmtpObj = {};\r\n        if (fmtpLineIndex === null) {\r\n            var index = this.findLine(sdpLines, "a=rtpmap", codec);\r\n            if (index === null) {\r\n                return sdp;\r\n            }\r\n            var payload = this.getCodecPayloadTypeFromLine(sdpLines[index]);\r\n            fmtpObj.pt = payload.toString();\r\n            fmtpObj.params = {};\r\n            fmtpObj.params[param] = value;\r\n            sdpLines.splice(index + 1, 0, this.writeFmtpLine(fmtpObj));\r\n        }\r\n        else {\r\n            fmtpObj = this.parseFmtpLine(sdpLines[fmtpLineIndex]);\r\n            fmtpObj.params[param] = value;\r\n            sdpLines[fmtpLineIndex] = this.writeFmtpLine(fmtpObj);\r\n        }\r\n        sdp = sdpLines.join("\\r\\n");\r\n        return sdp;\r\n    };\r\n    // Remove fmtp param if it exists.\r\n    SDPUtils.removeCodecParam = function (sdp, codec, param) {\r\n        var sdpLines = sdp.split("\\r\\n");\r\n        var fmtpLineIndex = this.findFmtpLine(sdpLines, codec);\r\n        if (fmtpLineIndex === null) {\r\n            return sdp;\r\n        }\r\n        var map = this.parseFmtpLine(sdpLines[fmtpLineIndex]);\r\n        delete map.params[param];\r\n        var newLine = this.writeFmtpLine(map);\r\n        if (newLine === null) {\r\n            sdpLines.splice(fmtpLineIndex, 1);\r\n        }\r\n        else {\r\n            sdpLines[fmtpLineIndex] = newLine;\r\n        }\r\n        sdp = sdpLines.join("\\r\\n");\r\n        return sdp;\r\n    };\r\n    // Split an fmtp line into an object including \'pt\' and \'params\'.\r\n    SDPUtils.parseFmtpLine = function (fmtpLine) {\r\n        var fmtpObj = {};\r\n        var spacePos = fmtpLine.indexOf(" ");\r\n        var keyValues = fmtpLine.substring(spacePos + 1).split(";");\r\n        var pattern = new RegExp("a=fmtp:(\\\\d+)");\r\n        var result = fmtpLine.match(pattern);\r\n        if (result && result.length === 2) {\r\n            fmtpObj.pt = result[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n        var params = {};\r\n        // for (let i = 0; i < keyValues.length; ++i) {\r\n        for (var _i = 0, _a = Object.keys(keyValues); _i < _a.length; _i++) {\r\n            var pair = _a[_i];\r\n            // const pair = keyValues[i].split("=");\r\n            if (pair.length === 2) {\r\n                params[pair[0]] = pair[1];\r\n            }\r\n        }\r\n        fmtpObj.params = params;\r\n        return fmtpObj;\r\n    };\r\n    // Generate an fmtp line from an object including \'pt\' and \'params\'.\r\n    SDPUtils.writeFmtpLine = function (fmtpObj) {\r\n        if (!fmtpObj.hasOwnProperty("pt") || !fmtpObj.hasOwnProperty("params")) {\r\n            return null;\r\n        }\r\n        var pt = fmtpObj.pt;\r\n        var params = fmtpObj.params;\r\n        var keyValues = [];\r\n        var i = 0;\r\n        for (var _i = 0, _a = Object.keys(params); _i < _a.length; _i++) {\r\n            var key = _a[_i];\r\n            keyValues[i] = key + "=" + params[key];\r\n            ++i;\r\n        }\r\n        if (i === 0) {\r\n            return null;\r\n        }\r\n        return "a=fmtp:" + pt.toString() + " " + keyValues.join(";");\r\n    };\r\n    // Find fmtp attribute for |codec| in |sdpLines|.\r\n    SDPUtils.findFmtpLine = function (sdpLines, codec) {\r\n        // Find payload of codec.\r\n        var payload = this.getCodecPayloadType(sdpLines, codec);\r\n        // Find the payload in fmtp line.\r\n        return payload\r\n            ? this.findLine(sdpLines, "a=fmtp:" + payload.toString())\r\n            : null;\r\n    };\r\n    // Find the line in sdpLines that starts with |prefix|, and, if specified,\r\n    // contains |substr| (case-insensitive search).\r\n    SDPUtils.findLine = function (sdpLines, prefix, substr) {\r\n        return this.findLineInRange(sdpLines, 0, -1, prefix, substr);\r\n    };\r\n    // Find the line in sdpLines[startLine...endLine - 1] that starts with |prefix|\r\n    // and, if specified, contains |substr| (case-insensitive search).\r\n    SDPUtils.findLineInRange = function (sdpLines, startLine, endLine, prefix, substr) {\r\n        var realEndLine = endLine !== -1 ? endLine : sdpLines.length;\r\n        for (var i = startLine; i < realEndLine; ++i) {\r\n            if (sdpLines[i].indexOf(prefix) === 0) {\r\n                if (!substr ||\r\n                    sdpLines[i].toLowerCase().indexOf(substr.toLowerCase()) !== -1) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    // Gets the codec payload type from sdp lines.\r\n    SDPUtils.getCodecPayloadType = function (sdpLines, codec) {\r\n        var index = this.findLine(sdpLines, "a=rtpmap", codec);\r\n        return index ? this.getCodecPayloadTypeFromLine(sdpLines[index]) : null;\r\n    };\r\n    // Gets the codec payload type from an a=rtpmap:X line.\r\n    SDPUtils.getCodecPayloadTypeFromLine = function (sdpLine) {\r\n        var pattern = new RegExp("a=rtpmap:(\\\\d+) [a-zA-Z0-9-]+\\\\/\\\\d+");\r\n        var result = sdpLine.match(pattern);\r\n        return result && result.length === 2 ? result[1] : null;\r\n    };\r\n    // Returns a new m= line with the specified codec as the first one.\r\n    SDPUtils.setDefaultCodec = function (mLine, payload) {\r\n        var elements = mLine.split(" ");\r\n        // Just copy the first three parameters; codec order starts on fourth.\r\n        var newLine = elements.slice(0, 3);\r\n        // Put target payload first and copy in the rest.\r\n        newLine.push(payload);\r\n        for (var i = 3; i < elements.length; i++) {\r\n            if (elements[i] !== payload) {\r\n                newLine.push(elements[i]);\r\n            }\r\n        }\r\n        return newLine.join(" ");\r\n    };\r\n    return SDPUtils;\r\n}());\r\nexports.SDPUtils = SDPUtils;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/SDPUtils.ts?')},"./ts/com/quickhellou/TextChatUIConstants.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.TextChatUIConstants = void 0;\r\nvar TextChatUIConstants = /** @class */ (function () {\r\n    function TextChatUIConstants() {\r\n        this.chatWindow = ".text-chat-window";\r\n        this.closeButton = ".text-chat-window__close";\r\n        this.collapseButton = ".text-chat-window__collapse";\r\n        this.messageList = ".text-chat-window__messages";\r\n        this.input = ".text-chat-window__message-input";\r\n    }\r\n    return TextChatUIConstants;\r\n}());\r\nexports.TextChatUIConstants = TextChatUIConstants;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/TextChatUIConstants.ts?')},"./ts/com/quickhellou/UIConstants.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.UIConstants = void 0;\r\nvar TextChatUIConstants_1 = __webpack_require__(/*! ./TextChatUIConstants */ "./ts/com/quickhellou/TextChatUIConstants.ts");\r\nvar RoomSelectionUIConstants_1 = __webpack_require__(/*! ./RoomSelectionUIConstants */ "./ts/com/quickhellou/RoomSelectionUIConstants.ts");\r\nvar UIConstants = /** @class */ (function () {\r\n    function UIConstants() {\r\n    }\r\n    UIConstants.confirmJoinButton = ".confirm-join-button";\r\n    UIConstants.confirmJoinDiv = ".confirm-join-div";\r\n    UIConstants.confirmJoinRoomSpan = ".confirm-join-room-span";\r\n    UIConstants.fullscreenSvg = ".fullscreen";\r\n    UIConstants.hangupSvg = ".button--hangup";\r\n    UIConstants.icons = ".icons";\r\n    UIConstants.infoDiv = ".info-div";\r\n    UIConstants.localVideo = ".local-video";\r\n    UIConstants.miniVideo = ".mini-video";\r\n    UIConstants.muteAudioSvg = ".mute-audio";\r\n    UIConstants.muteVideoSvg = ".mute-video";\r\n    UIConstants.newRoomButton = ".new-room-button";\r\n    UIConstants.remoteVideo = ".remote-video";\r\n    UIConstants.textChatButton = ".button--chat-window";\r\n    UIConstants.rejoinButton = ".rejoin-button";\r\n    UIConstants.rejoinDiv = ".rejoin-div";\r\n    UIConstants.roomLinkHref = ".room-link-href";\r\n    UIConstants.roomLinkHrefWaiting = ".room-link-href-waiting";\r\n    UIConstants.sharingDiv = ".sharing-div";\r\n    UIConstants.statusDiv = ".status-div";\r\n    UIConstants.videosDiv = ".view--videos";\r\n    UIConstants.hellouLogoFooterDiv = ".quickhellou-logo-footer";\r\n    UIConstants.overlayDiv = ".overlay";\r\n    UIConstants.overlayWaitingDiv = ".overlay-waiting";\r\n    UIConstants.closeOverlayButton = ".invite-waiting-button--thanks";\r\n    UIConstants.textChat = new TextChatUIConstants_1.TextChatUIConstants();\r\n    UIConstants.roomSelection = new RoomSelectionUIConstants_1.RoomSelectionUIConstants();\r\n    return UIConstants;\r\n}());\r\nexports.UIConstants = UIConstants;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/UIConstants.ts?')},"./ts/com/quickhellou/Util.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Util = void 0;\r\nvar StringUtils_1 = __webpack_require__(/*! ../genb/base/utils/StringUtils */ \"./ts/com/genb/base/utils/StringUtils.ts\");\r\nvar Log_1 = __webpack_require__(/*! ../genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\r\n/**\r\n * Utilities.\r\n *\r\n * @export\r\n * @class Util\r\n */\r\nvar Util = /** @class */ (function () {\r\n    function Util() {\r\n    }\r\n    Util.sendAsyncUrlRequest = function (method, url, body) {\r\n        return this.sendUrlRequest(method, url, true, body);\r\n    };\r\n    /**\r\n     * Sends XHR request.\r\n     *\r\n     * @static\r\n     * @param {string} method\r\n     * @param {string} url\r\n     * @param {boolean} async\r\n     * @param {string} [body]\r\n     * @returns\r\n     * @memberof Util\r\n     */\r\n    Util.sendUrlRequest = function (method, url, async, body) {\r\n        return new Promise(function (resolve, reject) {\r\n            if (!async) {\r\n                resolve(navigator.sendBeacon(url, body));\r\n                return;\r\n            }\r\n            var xhr;\r\n            var reportResults = function () {\r\n                if (xhr.status !== 200) {\r\n                    reject(Error('Status=' + xhr.status + ', response=' + xhr.responseText));\r\n                    return;\r\n                }\r\n                resolve(xhr.responseText);\r\n            };\r\n            xhr = new XMLHttpRequest();\r\n            if (async) {\r\n                xhr.onreadystatechange = function () {\r\n                    if (xhr.readyState !== 4) {\r\n                        return;\r\n                    }\r\n                    reportResults();\r\n                };\r\n            }\r\n            xhr.open(method, url, async);\r\n            xhr.send(body);\r\n            if (!async) {\r\n                reportResults();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Parses JSON object.\r\n     *\r\n     * @static\r\n     * @param {string} json\r\n     * @returns {object}\r\n     * @memberof Util\r\n     */\r\n    Util.parseJSON = function (json) {\r\n        try {\r\n            return JSON.parse(json);\r\n        }\r\n        catch (e) {\r\n            Log_1.Log.log('Error parsing json: ' + json);\r\n        }\r\n        return null;\r\n    };\r\n    Util.setCookie = function (name, value, days, path) {\r\n        if (days === void 0) { days = 7; }\r\n        if (path === void 0) { path = '/'; }\r\n        var expires = new Date(Date.now() + days * 864e5).toUTCString();\r\n        document.cookie =\r\n            name +\r\n                '=' +\r\n                encodeURIComponent(value) +\r\n                '; expires=' +\r\n                expires +\r\n                '; path=' +\r\n                path;\r\n    };\r\n    Util.getCookie = function (name) {\r\n        return document.cookie.split('; ').reduce(function (r, v) {\r\n            var parts = v.split('=');\r\n            return parts[0] === name ? decodeURIComponent(parts[1]) : r;\r\n        }, '');\r\n    };\r\n    Util.deleteCookie = function (name, path) {\r\n        this.setCookie(name, '', -1, path);\r\n    };\r\n    /**\r\n     * Checks if is mobile platform.\r\n     *\r\n     * @static\r\n     * @returns {boolean}\r\n     * @memberof Util\r\n     */\r\n    Util.isMobile = function () {\r\n        if (\r\n        // tslint:disable-next-line:max-line-length\r\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) ||\r\n            // tslint:disable-next-line:max-line-length\r\n            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0, 4))) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Checks if a browser is EdgeHTML.\r\n     *\r\n     * @static\r\n     * @returns {boolean}\r\n     * @memberof Util\r\n     */\r\n    Util.isEdgeHTML = function () {\r\n        return /Edge\\//g.test(navigator.userAgent);\r\n    };\r\n    Util.randomString = function (strLength) {\r\n        var result = [];\r\n        strLength = strLength || 5;\r\n        var charSet = '0123456789';\r\n        while (strLength--) {\r\n            result.push(charSet.charAt(Math.floor(Math.random() * charSet.length)));\r\n        }\r\n        return result.join('');\r\n    };\r\n    /**\r\n     * Returns the URL query key-value pairs as a dictionary object.\r\n     *\r\n     * @static\r\n     * @param {string} queryString\r\n     * @returns {*}\r\n     * @memberof Util\r\n     */\r\n    Util.queryStringToDictionary = function (queryString) {\r\n        var pairs = queryString.slice(1).split('&');\r\n        var result = {};\r\n        pairs.forEach(function (pair) {\r\n            if (pair) {\r\n                pair = pair.split('=');\r\n                if (pair[0]) {\r\n                    result[pair[0]] = decodeURIComponent(pair[1] || '');\r\n                }\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    /**\r\n     * Calculcates FPS for the provided video elements and calls on a callback which\r\n     * is used to update the necessary stats for either remote or local videos.\r\n     * Adapted from https://cs.chromium.org/chromium/src/chrome/test/data/media/html/media_stat_perf.html\r\n     *\r\n     * @static\r\n     * @param {*} videoElement\r\n     * @param {number} decodedFrames\r\n     * @param {number} startTime\r\n     * @param {string} remoteOrLocal\r\n     * @param {Function} callback\r\n     * @returns {number}\r\n     * @memberof Util\r\n     */\r\n    Util.calculateFps = function (videoElement, decodedFrames, startTime, remoteOrLocal, callback) {\r\n        var fps = 0;\r\n        if (videoElement &&\r\n            typeof videoElement.webkitDecodedFrameCount !== undefined) {\r\n            if (videoElement.readyState >= videoElement.HAVE_CURRENT_DATA) {\r\n                var currentTime = new Date().getTime();\r\n                var deltaTime = (currentTime - startTime) / 1000;\r\n                var startTimeToReturn = currentTime;\r\n                fps = (videoElement.webkitDecodedFrameCount - decodedFrames) / deltaTime;\r\n                callback(videoElement.webkitDecodedFrameCount, startTimeToReturn, remoteOrLocal);\r\n            }\r\n        }\r\n        // tslint:disable-next-line:radix\r\n        return parseInt(fps);\r\n    };\r\n    /**\r\n     * Returns a list of ICE servers after requesting it from the ICE server provider.\r\n     * ICE is a standard method of NAT traversal used in WebRTC.\r\n     * https://webrtcglossary.com/ice/\r\n     *\r\n     * @static\r\n     * @param {string} iceServerRequestUrl\r\n     * @param {string} iceTransports\r\n     * @returns {*}\r\n     * @memberof Util\r\n     */\r\n    Util.requestIceServers = function (iceServerRequestUrl, iceTransports) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this.sendAsyncUrlRequest('POST', iceServerRequestUrl)\r\n                .then(function (response) {\r\n                var iceServerRequestResponse = _this.parseJSON(response);\r\n                if (!iceServerRequestResponse) {\r\n                    reject(Error('Error parsing response JSON: ' + response));\r\n                    return;\r\n                }\r\n                if (StringUtils_1.StringUtils.isNotEmpty(iceTransports)) {\r\n                    _this.filterIceServersUrls(iceServerRequestResponse, iceTransports);\r\n                }\r\n                Log_1.Log.log('Retrieved ICE server information.');\r\n                resolve(iceServerRequestResponse.iceServers);\r\n            })\r\n                .catch(function (error) {\r\n                reject(Error('ICE server request error: ' + error.message));\r\n                return;\r\n            });\r\n        });\r\n    };\r\n    Util.isFullScreen = function () {\r\n        return !!(document.isFullScreen || document.fullscreenEnabled); // if any defined and true\r\n    };\r\n    /**\r\n     * Start shims for fullscreen\r\n     * (kmr) review reliability\r\n     * @static\r\n     * @memberof Util\r\n     */\r\n    Util.setUpFullScreen = function () {\r\n        document.cancelFullScreen =\r\n            document.mozCancelFullScreen || document.cancelFullScreen;\r\n        document.body.requestFullScreen =\r\n            document.body.mozRequestFullScreen || document.body.requestFullScreen;\r\n        document.onfullscreenchange = function (event) {\r\n            return document.onfullscreenchange;\r\n        };\r\n    };\r\n    Util.requestFullscreen = function () {\r\n        if (document.body.requestFullscreen) {\r\n            document.body.requestFullscreen();\r\n        }\r\n        else if (document.body.mozRequestFullScreen) {\r\n            document.body.mozRequestFullScreen();\r\n        }\r\n        else if (document.body.msRequestFullscreen) {\r\n            document.body.msRequestFullscreen();\r\n        }\r\n    };\r\n    Util.cancelFullScreen = function () {\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        }\r\n        else if (document.mozCancelFullScreen) {\r\n            document.mozCancelFullScreen();\r\n        }\r\n        else if (document.msExitFullscreen) {\r\n            document.msExitFullscreen();\r\n        }\r\n        else if (document.cancelFullScreen) {\r\n            document.cancelFullScreen();\r\n        }\r\n    };\r\n    /**\r\n     * Filter a peerConnection config to only contain ice servers with\r\n     * transport=|protocol|.\r\n     *\r\n     * @private\r\n     * @static\r\n     * @param {*} config\r\n     * @param {*} protocol\r\n     * @memberof Util\r\n     */\r\n    Util.filterIceServersUrls = function (config, protocol) {\r\n        var transport = 'transport=' + protocol;\r\n        var newIceServers = new Array();\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (var i = 0; i < config.iceServers.length; ++i) {\r\n            var iceServer = config.iceServers[i];\r\n            var newUrls = [];\r\n            // tslint:disable-next-line:prefer-for-of\r\n            for (var j = 0; j < iceServer.urls.length; ++j) {\r\n                var url = iceServer.urls[j];\r\n                if (url.indexOf(transport) !== -1) {\r\n                    newUrls.push(url);\r\n                }\r\n                else if (url.indexOf('?transport=') === -1) {\r\n                    newUrls.push(url + '?' + transport);\r\n                }\r\n            }\r\n            if (newUrls.length !== 0) {\r\n                iceServer.urls = newUrls;\r\n                newIceServers.push(iceServer);\r\n            }\r\n        }\r\n        config.iceServers = newIceServers;\r\n    };\r\n    return Util;\r\n}());\r\nexports.Util = Util;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/Util.ts?")},"./ts/com/quickhellou/application/RemoteVideo.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.RemoteVideo = void 0;\r\n/**\r\n * Remote video object.\r\n *\r\n * @export\r\n * @class RemoteVideo\r\n */\r\nvar RemoteVideo = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of RemoteVideo.\r\n     *\r\n     * @param {string} id\r\n     * @param {HTMLVideoElement} element\r\n     * @memberof RemoteVideo\r\n     */\r\n    function RemoteVideo(clientId, element) {\r\n        this.clientId = clientId;\r\n        this.element = element;\r\n    }\r\n    return RemoteVideo;\r\n}());\r\nexports.RemoteVideo = RemoteVideo;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/RemoteVideo.ts?')},"./ts/com/quickhellou/application/RemoteVideos.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RemoteVideos = void 0;\r\nvar HTMLUtils_1 = __webpack_require__(/*! ../../genb/base/utils/HTMLUtils */ \"./ts/com/genb/base/utils/HTMLUtils.ts\");\r\nvar RemoteVideo_1 = __webpack_require__(/*! ./RemoteVideo */ \"./ts/com/quickhellou/application/RemoteVideo.ts\");\r\nvar EventDispatcherService_1 = __webpack_require__(/*! ../../genb/base/services/EventDispatcherService */ \"./ts/com/genb/base/services/EventDispatcherService.ts\");\r\nvar BaseUtils_1 = __webpack_require__(/*! ../../genb/base/utils/BaseUtils */ \"./ts/com/genb/base/utils/BaseUtils.ts\");\r\nvar RemoteVideosEvent_1 = __webpack_require__(/*! ./model/RemoteVideosEvent */ \"./ts/com/quickhellou/application/model/RemoteVideosEvent.ts\");\r\nvar Log_1 = __webpack_require__(/*! ../../genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\r\n/**\r\n * Remote videos controller\r\n *\r\n * @export\r\n * @class RemoteVideos\r\n * @extends {EventDispatcherService}\r\n */\r\nvar RemoteVideos = /** @class */ (function (_super) {\r\n    __extends(RemoteVideos, _super);\r\n    /**\r\n     * Creates an instance of RemoteVideos.\r\n     *\r\n     * @memberof RemoteVideos\r\n     */\r\n    function RemoteVideos() {\r\n        var _this = _super.call(this) || this;\r\n        _this.isFullScreen = false;\r\n        _this.videos = new Map();\r\n        document.addEventListener('fullscreenchange', function () {\r\n            _this.onFullScreenChange();\r\n        }, false);\r\n        document.addEventListener('webkitfullscreenchange', function () {\r\n            _this.onFullScreenChange();\r\n        }, false);\r\n        document.addEventListener('mozfullscreenchange', function (event) {\r\n            _this.onFullScreenChange();\r\n        }, false);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Gets static instance.\r\n     *\r\n     * @static\r\n     * @returns\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.getInstance = function () {\r\n        if (!RemoteVideos.instance) {\r\n            RemoteVideos.instance = new RemoteVideos();\r\n        }\r\n        return RemoteVideos.instance;\r\n    };\r\n    /**\r\n     * Removes a remote video object.\r\n     *\r\n     * @public\r\n     * @param {string} videoId\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.remove = function (videoId) {\r\n        this.videos.delete(videoId);\r\n    };\r\n    /**\r\n     * Gets remote video.\r\n     *\r\n     * @param {string} videoId\r\n     * @returns {RemoteVideo}\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.get = function (videoId) {\r\n        var video = this.videos.get(videoId);\r\n        return video;\r\n    };\r\n    /**\r\n     * Gets all remote videos.\r\n     *\r\n     * @returns {Map<string, RemoteVideo>}\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.getAll = function () {\r\n        return this.videos;\r\n    };\r\n    /**\r\n     * Checks if there are no remote videos.\r\n     *\r\n     * @returns {boolean}\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.isEmpty = function () {\r\n        return Array.from(this.videos).length === 0;\r\n    };\r\n    /**\r\n     * Gets remote video video element.\r\n     *\r\n     * @param {string} videoId\r\n     * @returns {HTMLVideoElement}\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.getElement = function (videoId) {\r\n        var remoteVideo = this.videos.get(videoId);\r\n        if (BaseUtils_1.BaseUtils.isObjectDefined(remoteVideo)) {\r\n            return remoteVideo.element;\r\n        }\r\n        else {\r\n            Log_1.Log.warn('RemoteVideos::getElement No remote video by given video ID.');\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Awaits remote stream arrival.\r\n     *\r\n     * @public\r\n     * @param {string} streamId\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.waitForRemoteVideo = function (streamId) {\r\n        // Wait for the actual video to start arriving before moving to the active\r\n        // call state.\r\n        var _this = this;\r\n        var remoteVideo = this.videos.get(streamId);\r\n        var remoteVideoElement = remoteVideo.element;\r\n        if (remoteVideoElement.readyState >= 2) {\r\n            // i.e. can play\r\n            Log_1.Log.log('Remote video started; currentTime: ' + remoteVideoElement.currentTime);\r\n            this.dispatchEvent(RemoteVideosEvent_1.RemoteVideosEvent.ADD_STREAM_SUCCESS, remoteVideo.element);\r\n        }\r\n        else {\r\n            remoteVideoElement.oncanplay = function () {\r\n                _this.waitForRemoteVideo(streamId);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * Removes remote video \"can play\" handlers.\r\n     *\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.removeCanPlayHandlers = function () {\r\n        this.videos.forEach(function (remoteVideo) {\r\n            remoteVideo.element.oncanplay = undefined;\r\n        });\r\n    };\r\n    /**\r\n     * Deactivates all remote video windows.\r\n     *\r\n     * @public\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.deactivateAll = function () {\r\n        this.videos.forEach(function (remoteVideo) {\r\n            remoteVideo.element.classList.remove('active');\r\n        });\r\n        this.removeAllRemoteVideo();\r\n    };\r\n    /**\r\n     * Creates remote video window with stream attached.\r\n     *\r\n     * @public\r\n     * @param {MediaStream} stream\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.addRemoteVideo = function (registerOptions) {\r\n        Log_1.Log.log('RemoteVideos::addRemoteVideo', registerOptions.clientId, registerOptions.sessionId);\r\n        this.add(registerOptions.clientId, registerOptions.sessionId);\r\n        this.updateVideoElementsLayout();\r\n        this.dispatchEvent(RemoteVideosEvent_1.RemoteVideosEvent.REMOTE_VIDEO_ADDED);\r\n    };\r\n    /**\r\n     * Adds stream to existing video element.\r\n     *\r\n     * @public\r\n     * @param {MediaStream} stream\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.addStream = function (sessionId, stream) {\r\n        var _this = this;\r\n        var remoteVideo = this.get(sessionId);\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(remoteVideo)) {\r\n            setTimeout(function () {\r\n                _this.addStream(sessionId, stream);\r\n            }, 2000);\r\n            return;\r\n        }\r\n        var remoteVideoElement = remoteVideo.element;\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(remoteVideoElement)) {\r\n            this.dispatchEvent(RemoteVideosEvent_1.RemoteVideosEvent.ADD_STREAM_FAILURE);\r\n            return;\r\n        }\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(remoteVideoElement.srcObject)) {\r\n            remoteVideoElement.srcObject = stream;\r\n        }\r\n        if (remoteVideoElement.readyState >= 2) {\r\n            this.dispatchEvent(RemoteVideosEvent_1.RemoteVideosEvent.ADD_STREAM_SUCCESS, remoteVideoElement);\r\n            return;\r\n        }\r\n        setTimeout(function () {\r\n            _this.addStream(sessionId, stream);\r\n        }, 2000);\r\n    };\r\n    /**\r\n     * Remove remote video.\r\n     *\r\n     * @param {string} videoId\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.removeRemoteVideo = function (sessionId) {\r\n        var remoteVideo = this.get(sessionId);\r\n        if (BaseUtils_1.BaseUtils.isObjectDefined(remoteVideo)) {\r\n            remoteVideo.element.srcObject = null;\r\n            remoteVideo.element.oncanplay = undefined;\r\n            this.remove(sessionId);\r\n            // document.querySelectorAll(this.getRemoteVideoClassName(sessionId)).forEach((e) => e.parentNode.removeChild(e));\r\n            var wrapVideo = remoteVideo.element.parentElement;\r\n            if (BaseUtils_1.BaseUtils.isObjectDefined(wrapVideo)) {\r\n                wrapVideo.remove();\r\n            }\r\n            this.dispatchEvent(RemoteVideosEvent_1.RemoteVideosEvent.REMOTE_VIDEO_REMOVED);\r\n        }\r\n        this.updateVideoElementsLayout();\r\n    };\r\n    /**\r\n     * Gets remote video class name.\r\n     *\r\n     * @param {string} sessionId\r\n     * @returns {string}\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.getRemoteVideoClassName = function (sessionId) {\r\n        return \"remote-video--\" + sessionId;\r\n    };\r\n    /**\r\n     * Updates video windows layout.\r\n     *\r\n     * @public\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.updateVideoElementsLayout = function () {\r\n        var activeVideoElementsSize = HTMLUtils_1.HTMLUtils.list('video.remote-video.active').length;\r\n        this.videos.forEach(function (video, sessionId) {\r\n            var videoElement = video.element.parentElement;\r\n            videoElement.classList.remove('size--single', 'size--double', 'size--multi');\r\n            var sizeClass = 'size--single';\r\n            if (activeVideoElementsSize === 2) {\r\n                sizeClass = 'size--double';\r\n            }\r\n            if (activeVideoElementsSize > 2 && activeVideoElementsSize <= 4) {\r\n                sizeClass = 'size--multi';\r\n            }\r\n            if (activeVideoElementsSize > 4) {\r\n                sizeClass = 'size--large';\r\n            }\r\n            videoElement.classList.add(sizeClass);\r\n        });\r\n    };\r\n    /**\r\n     * Adds a remote video object.\r\n     *\r\n     * @param {string} remoteClientId\r\n     * @param {string} sessionId\r\n     * @returns {RemoteVideo}\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.add = function (remoteClientId, sessionId) {\r\n        var _this = this;\r\n        var videoElementClassName = this.getRemoteVideoClassName(sessionId);\r\n        if (HTMLUtils_1.HTMLUtils.exists(videoElementClassName)) {\r\n            this.removeRemoteVideo(sessionId);\r\n        }\r\n        if (!HTMLUtils_1.HTMLUtils.exists(videoElementClassName)) {\r\n            var videoElementHtml = \"<div class=\\\"remote-video-wrap \" + videoElementClassName + \"--wrap\\\">\\n        <div class=\\\"remote-video-fullscreen \" + videoElementClassName + \"--fullscreen\\\">\\n        </div><div class=\\\"video-loader js-active\\\">\\n        </div><video class=\\\"remote-video \" + videoElementClassName + \"\\\" autoplay playsinline></video></div>\";\r\n            var videoElementContainerElement = HTMLUtils_1.HTMLUtils.get('.videos-wrap');\r\n            videoElementContainerElement.insertAdjacentHTML('afterbegin', videoElementHtml);\r\n            var fullscreenButton = HTMLUtils_1.HTMLUtils.get(\".\" + videoElementClassName + \"--fullscreen\");\r\n            fullscreenButton.addEventListener('click', function () {\r\n                _this.toggleFullScreen(\".\" + videoElementClassName + \"--wrap\");\r\n            }, false);\r\n        }\r\n        var videoElement = HTMLUtils_1.HTMLUtils.get(\".\" + videoElementClassName);\r\n        var remoteVideo = new RemoteVideo_1.RemoteVideo(remoteClientId, videoElement);\r\n        this.videos.set(sessionId, remoteVideo);\r\n        var videoLoader = HTMLUtils_1.HTMLUtils.get(\".\" + videoElementClassName + \"--wrap .video-loader\");\r\n        videoElement.oncanplay = function () {\r\n            videoLoader.classList.remove('js-active');\r\n            videoElement.oncanplay = undefined;\r\n        };\r\n        Log_1.Log.info('RemoteVideos::add Remote video added ', sessionId);\r\n        return remoteVideo;\r\n    };\r\n    /**\r\n     * Handles full screen change event.\r\n     *\r\n     * @memberof AppController\r\n     */\r\n    RemoteVideos.prototype.onFullScreenChange = function () {\r\n        if (this.isFullScreen) {\r\n            var footer = HTMLUtils_1.HTMLUtils.get('.footer');\r\n            var videosWrapList = HTMLUtils_1.HTMLUtils.list('.video-columns-wrap, .videos-wrap, .remote-video-wrap');\r\n            footer.classList.remove('hidden');\r\n            videosWrapList.forEach(function (elem) {\r\n                elem.classList.remove('js-fullscreen');\r\n            });\r\n            this.isFullScreen = false;\r\n        }\r\n    };\r\n    /**\r\n     * Toggles full screen.\r\n     *\r\n     * @private\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.toggleFullScreen = function (videoElementName) {\r\n        var footer = HTMLUtils_1.HTMLUtils.get('.footer');\r\n        var videosWrapList = HTMLUtils_1.HTMLUtils.list('.video-columns-wrap, .videos-wrap, ' + videoElementName);\r\n        if (!this.isFullScreen) {\r\n            Log_1.Log.log('Entering fullscreen.');\r\n            footer.classList.add('hidden');\r\n            videosWrapList.item(0).classList.add('js-fullscreen');\r\n            videosWrapList.item(1).classList.add('js-fullscreen');\r\n            videosWrapList.item(2).classList.add('js-fullscreen');\r\n            this.isFullScreen = true;\r\n        }\r\n        else {\r\n            Log_1.Log.log('Exiting fullscreen.');\r\n            footer.classList.remove('hidden');\r\n            videosWrapList.forEach(function (elem) {\r\n                elem.classList.remove('js-fullscreen');\r\n            });\r\n            this.isFullScreen = false;\r\n        }\r\n    };\r\n    /**\r\n     * Removes all remote videos.\r\n     *\r\n     * @private\r\n     * @memberof RemoteVideos\r\n     */\r\n    RemoteVideos.prototype.removeAllRemoteVideo = function () {\r\n        var _this = this;\r\n        this.videos.forEach(function (video, sessionId) {\r\n            _this.removeRemoteVideo(sessionId);\r\n        });\r\n    };\r\n    return RemoteVideos;\r\n}(EventDispatcherService_1.EventDispatcherService));\r\nexports.RemoteVideos = RemoteVideos;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/RemoteVideos.ts?")},"./ts/com/quickhellou/application/controller/MediaCommunication.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.MediaCommunication = void 0;\r\nvar EventDispatcherService_1 = __webpack_require__(/*! ../../../genb/base/services/EventDispatcherService */ "./ts/com/genb/base/services/EventDispatcherService.ts");\r\nvar Call_1 = __webpack_require__(/*! ../../Call */ "./ts/com/quickhellou/Call.ts");\r\nvar ColliderService_1 = __webpack_require__(/*! ../service/ColliderService */ "./ts/com/quickhellou/application/service/ColliderService.ts");\r\nvar CallEvent_1 = __webpack_require__(/*! ../../CallEvent */ "./ts/com/quickhellou/CallEvent.ts");\r\nvar Room_1 = __webpack_require__(/*! ../model/Room */ "./ts/com/quickhellou/application/model/Room.ts");\r\nvar Util_1 = __webpack_require__(/*! ../../Util */ "./ts/com/quickhellou/Util.ts");\r\nvar ColliderServiceEvent_1 = __webpack_require__(/*! ../model/ColliderServiceEvent */ "./ts/com/quickhellou/application/model/ColliderServiceEvent.ts");\r\nvar BaseUtils_1 = __webpack_require__(/*! ../../../genb/base/utils/BaseUtils */ "./ts/com/genb/base/utils/BaseUtils.ts");\r\nvar StringUtils_1 = __webpack_require__(/*! ../../../genb/base/utils/StringUtils */ "./ts/com/genb/base/utils/StringUtils.ts");\r\nvar Log_1 = __webpack_require__(/*! ../../../genb/base/utils/Log */ "./ts/com/genb/base/utils/Log.ts");\r\nvar PeerConnectionResponseType_1 = __webpack_require__(/*! ../model/PeerConnectionResponseType */ "./ts/com/quickhellou/application/model/PeerConnectionResponseType.ts");\r\nvar SessionInit_1 = __webpack_require__(/*! ../model/SessionInit */ "./ts/com/quickhellou/application/model/SessionInit.ts");\r\nvar RtcSession_1 = __webpack_require__(/*! ../model/RtcSession */ "./ts/com/quickhellou/application/model/RtcSession.ts");\r\nvar MediaEvent_1 = __webpack_require__(/*! ../model/MediaEvent */ "./ts/com/quickhellou/application/model/MediaEvent.ts");\r\nvar ShareScreenEvent_1 = __webpack_require__(/*! ../model/ShareScreenEvent */ "./ts/com/quickhellou/application/model/ShareScreenEvent.ts");\r\n/**\r\n * MediaCommunication and media facade.\r\n *\r\n * @export\r\n * @class MediaCommunication\r\n * @extends {EventDispatcherService}\r\n */\r\nvar MediaCommunication = /** @class */ (function (_super) {\r\n    __extends(MediaCommunication, _super);\r\n    /**\r\n     * Creates an instance of MediaCommunication.\r\n     *\r\n     * @param {LoadingParams} loadingParams\r\n     * @memberof MediaCommunication\r\n     */\r\n    function MediaCommunication(loadingParams) {\r\n        var _this = _super.call(this) || this;\r\n        _this.loadingParams = loadingParams;\r\n        _this.colliderService = ColliderService_1.ColliderService.setupInstance(_this.loadingParams.wssUrl, _this.loadingParams.wssPostUrl, true);\r\n        _this.setRoom(_this.loadingParams.roomID, _this.loadingParams.roomLink);\r\n        _this.colliderService = ColliderService_1.ColliderService.getInstance();\r\n        _this.colliderService.addEventListener(ColliderServiceEvent_1.ColliderServiceEvent.MESSAGE, _this.onReceiveColliderChannelMessage, _this);\r\n        _this.colliderService.addEventListener(ColliderServiceEvent_1.ColliderServiceEvent.CLOSE, _this.onColliderChannelClose, _this);\r\n        _this.colliderService.addEventListener(ColliderServiceEvent_1.ColliderServiceEvent.DESTROY, _this.onColliderChannelDestroy, _this);\r\n        _this.requestMediaAndIceServers();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets room.\r\n     *\r\n     * @param {string} roomId\r\n     * @param {string} roomLink\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.setRoom = function (roomId, roomLink) {\r\n        this.room = new Room_1.Room(roomId, roomLink);\r\n        this.loadingParams.roomID = roomId;\r\n        this.loadingParams.roomLink = roomLink;\r\n        this.room.server = this.room.server = this.loadingParams.hostUrl || \'\';\r\n    };\r\n    /**\r\n     * Creates call instance.\r\n     *\r\n     * @returns {Call}\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.createCall = function () {\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.call)) {\r\n            this.call = new Call_1.Call(this.loadingParams);\r\n            this.setupCallEvents();\r\n        }\r\n        return this.call;\r\n    };\r\n    /**\r\n     * Connects to remote services.\r\n     *\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.connect = function () {\r\n        var _this = this;\r\n        // Asynchronously open a WebSocket connection to the Collider service.\r\n        var connectColliderPromise = this.colliderService\r\n            .open()\r\n            .catch(function (reason) {\r\n            _this.onError("WebSocket open error: " + reason.message);\r\n            return Promise.reject(reason);\r\n        });\r\n        // Asynchronously join the room.\r\n        var joinSignalingServerPromise = this.joinRoom().catch(function (reason) {\r\n            _this.onError("Room server join error: " + reason.message);\r\n            return Promise.reject(reason);\r\n        });\r\n        // We only register with WSS if the web socket connection is open and if we\'re\r\n        // already registered with PyApp.\r\n        Promise.all([connectColliderPromise, joinSignalingServerPromise])\r\n            .then(function (results) {\r\n            var roomPyParams = results[1];\r\n            _this.loadingParams.clientID = roomPyParams.client_id;\r\n            var sessions = roomPyParams.sessions;\r\n            var sessionInit = new SessionInit_1.SessionInit();\r\n            sessions.forEach(function (sessionObj) {\r\n                var sessionJson = JSON.parse(sessionObj);\r\n                sessionInit.addSession(new RtcSession_1.RtcSession(sessionJson.id, sessionJson.messages, sessionJson.other_client_id, StringUtils_1.StringUtils.equals(sessionJson.is_initiator, \'True\'), StringUtils_1.StringUtils.equals(sessionJson.is_forward, \'True\')));\r\n            });\r\n            _this.colliderService.register(_this.room.id, roomPyParams.client_id);\r\n            // We only start signaling after we have registered the signaling channel\r\n            // and have media and TURN. Since we send candidates as soon as the peer\r\n            // connection generates them we need to wait for the signaling channel to be\r\n            // ready.\r\n            Promise.all([_this.getIceServersPromise, _this.getMediaPromise])\r\n                .then(function () {\r\n                _this.startRtcSignaling(sessionInit);\r\n            })\r\n                .catch(function (reason) {\r\n                _this.onError("Failed to start signaling: " + reason.message);\r\n            });\r\n        })\r\n            .catch(function (reason) {\r\n            _this.onError("WebSocket register error: " + reason.message);\r\n        });\r\n    };\r\n    /**\r\n     * Sets display media as default video track.\r\n     *\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.displayMedia = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                ;\r\n                navigator.mediaDevices\r\n                    .getDisplayMedia({ video: true, audio: true })\r\n                    .then(function (stream) {\r\n                    _this.onUserDisplayMediaSuccess(stream);\r\n                })\r\n                    .catch(function (reason) {\r\n                    Log_1.Log.warn(reason);\r\n                    _this.dispatchEvent(ShareScreenEvent_1.ShareScreenEvent.NOT_ALLOWED);\r\n                });\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Stops sending the screen capture tracks\r\n     * and reattaches camera tracks.\r\n     *\r\n     * @public\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.stopSendingDisplayMedia = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                this.call.stopDisplayMedia();\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Restarts call.\r\n     *\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.restartCall = function () {\r\n        this.requestMediaAndIceServers();\r\n        this.connect();\r\n    };\r\n    /**\r\n     * Hangups call.\r\n     *\r\n     * @param {boolean} async\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.hangupCall = function (async) {\r\n        this.call.hangup(async);\r\n    };\r\n    /**\r\n     * Toggles audio unmuting.\r\n     *\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.toggleAudioUnMute = function () {\r\n        this.call.toggleAudioUnMute();\r\n    };\r\n    /**\r\n     * Toggles audio muting.\r\n     *\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.toggleAudioMute = function () {\r\n        this.call.toggleAudioMute();\r\n    };\r\n    /**\r\n     * Toggles video muting.\r\n     *\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.toggleVideoMute = function () {\r\n        this.call.toggleVideoMute();\r\n    };\r\n    /**\r\n     * Gets call start time.\r\n     *\r\n     * @returns\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.getCallStartTime = function () {\r\n        return this.call.getStartTime();\r\n    };\r\n    /**\r\n     * Sends local chat message.\r\n     *\r\n     * @public\r\n     * @param {string} message\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.sendLocalChatMessage = function (message) {\r\n        this.call.broadcast(PeerConnectionResponseType_1.PeerConnectionResponseType.TEXT_CHAT_MESSAGE, message);\r\n    };\r\n    /**\r\n     * Gets call instance.\r\n     *\r\n     * @returns {Call}\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.getCall = function () {\r\n        return this.call;\r\n    };\r\n    /**\r\n     * Adds display media to stream.\r\n     *\r\n     * @private\r\n     * @param {MediaStream} stream\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onUserDisplayMediaSuccess = function (displayStream) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                if (!BaseUtils_1.BaseUtils.isObjectDefined(this.call)) {\r\n                    Log_1.Log.error(\'Call instance is not defined.\');\r\n                    return [2 /*return*/];\r\n                }\r\n                if (displayStream.getTracks().length === 0) {\r\n                    Log_1.Log.error(\'Display screen has no tracks attached.\');\r\n                    return [2 /*return*/];\r\n                }\r\n                this.dispatchEvent(MediaEvent_1.MediaEvent.DISPLAY_MEDIA_DISPLAYED);\r\n                this.call.addDisplayMediaTracks(displayStream.getTracks()[0]);\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Requests local media and ICE servers.\r\n     *\r\n     * @private\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.requestMediaAndIceServers = function () {\r\n        this.getMediaPromise = this.maybeGetMedia();\r\n        this.getIceServersPromise = this.maybeGetIceServers();\r\n    };\r\n    /**\r\n     * Joins room in signaling service.\r\n     *\r\n     * @private\r\n     * @returns {Promise<any>}\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.joinRoom = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(_this.room.id)) {\r\n                reject(Error(\'Missing room ID.\'));\r\n            }\r\n            var path = _this.room.server + "/join/" + _this.room.id + window.location.search;\r\n            Util_1.Util.sendAsyncUrlRequest(\'POST\', path)\r\n                .then(function (response) {\r\n                var responseObj = Util_1.Util.parseJSON(response);\r\n                if (!responseObj) {\r\n                    reject(Error(\'Error parsing response JSON.\'));\r\n                    return;\r\n                }\r\n                if (!StringUtils_1.StringUtils.equals(responseObj.result, \'SUCCESS\')) {\r\n                    reject(Error("Registration error: " + responseObj.result));\r\n                    if (StringUtils_1.StringUtils.equals(responseObj.result, \'FULL\')) {\r\n                        var getPath = _this.room.server + "/r/" + _this.room.id + window.location.search;\r\n                        window.location.assign(getPath);\r\n                    }\r\n                    return;\r\n                }\r\n                Log_1.Log.log(\'Joined the room.\');\r\n                resolve(responseObj.params);\r\n            })\r\n                .catch(function (reason) {\r\n                reject(Error("Failed to join the room: " + reason.message));\r\n                return;\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Asynchronously request local video and audio if needed.\r\n     *\r\n     * @private\r\n     * @returns {Promise<any>}\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.maybeGetMedia = function () {\r\n        var _this = this;\r\n        var needStream = this.loadingParams.mediaConstraints.audio !== false ||\r\n            this.loadingParams.mediaConstraints.video !== false;\r\n        var mediaPromise = null;\r\n        if (needStream) {\r\n            var mediaConstraints_1 = this.loadingParams.mediaConstraints;\r\n            mediaPromise = navigator.mediaDevices\r\n                .getUserMedia(mediaConstraints_1)\r\n                .catch(function (reason) {\r\n                if (reason.name !== \'NotFoundError\') {\r\n                    throw reason;\r\n                }\r\n                return navigator.mediaDevices\r\n                    .enumerateDevices()\r\n                    .then(function (devices) {\r\n                    var cam = devices.find(function (device) {\r\n                        return device.kind === \'videoinput\';\r\n                    });\r\n                    var mic = devices.find(function (device) {\r\n                        return device.kind === \'audioinput\';\r\n                    });\r\n                    var audioConstraint = {\r\n                        echoCancellation: true,\r\n                    };\r\n                    var constraints = {\r\n                        audio: audioConstraint,\r\n                        video: cam && mediaConstraints_1.video,\r\n                    };\r\n                    if (!!navigator.mediaDevices.getUserMedia) {\r\n                        return navigator.mediaDevices.getUserMedia(constraints);\r\n                    }\r\n                    else {\r\n                        Log_1.Log.warn(\'Feature not supported. Please update your browser to the newest release.\');\r\n                    }\r\n                });\r\n            })\r\n                .then(function (stream) {\r\n                _this.onUserMediaSuccess(stream);\r\n            })\r\n                .catch(function (reason) {\r\n                _this.onError("Error getting local media: " + reason.message);\r\n                _this.onUserMediaError(reason);\r\n            });\r\n        }\r\n        else {\r\n            mediaPromise = Promise.resolve();\r\n        }\r\n        return mediaPromise;\r\n    };\r\n    /**\r\n     * Handles local media initialize success.\r\n     *\r\n     * @private\r\n     * @param {MediaStream} stream\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onUserMediaSuccess = function (stream) {\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(this.call)) {\r\n            Log_1.Log.warn(\'Call instance is not defined.\');\r\n            return;\r\n        }\r\n        this.call.setLocalStream(stream);\r\n        this.dispatchEvent(CallEvent_1.CallEvent.LOCAL_STREAM_ADDED, stream);\r\n    };\r\n    /**\r\n     * Handles local media initialize error.\r\n     *\r\n     * @private\r\n     * @param {any} error\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onUserMediaError = function (reason) {\r\n        var errorMessage = "Failed to get access to local media. Error name was " + reason.name + "." +\r\n            \'Continuing without sending a stream.\';\r\n        this.onError("getUserMedia error: " + errorMessage);\r\n        alert(errorMessage);\r\n    };\r\n    /**\r\n     * Asynchronously request an ICE server if needed.\r\n     *\r\n     * @private\r\n     * @returns {Promise<any>}\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.maybeGetIceServers = function () {\r\n        var _this = this;\r\n        var shouldRequestIceServers = this.loadingParams.iceServerRequestUrl &&\r\n            this.loadingParams.iceServerRequestUrl.length > 0 &&\r\n            this.loadingParams.peerConnectionConfig.iceServers &&\r\n            this.loadingParams.peerConnectionConfig.iceServers.length === 0;\r\n        var iceServerPromise = null;\r\n        if (shouldRequestIceServers) {\r\n            var requestURL = this.loadingParams.iceServerRequestUrl;\r\n            iceServerPromise = Util_1.Util.requestIceServers(requestURL, this.loadingParams.iceServerTransports)\r\n                .then(function (iceServers) {\r\n                var servers = _this.loadingParams.peerConnectionConfig.iceServers;\r\n                _this.loadingParams.peerConnectionConfig.iceServers =\r\n                    servers.concat(iceServers);\r\n            })\r\n                .catch(function (reason) {\r\n                // Error retrieving ICE servers.\r\n                var message = \'No TURN server; unlikely that media will traverse networks.\';\r\n                _this.dispatchEvent(CallEvent_1.CallEvent.STATUS_MESSAGE, message);\r\n                Log_1.Log.warn(reason.message);\r\n            });\r\n        }\r\n        else {\r\n            iceServerPromise = Promise.resolve();\r\n        }\r\n        return iceServerPromise;\r\n    };\r\n    /**\r\n     * Sends request to create PeerConnection client and start RTC signaling.\r\n     *\r\n     * @private\r\n     * @param {SessionInit} sessionInit\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.startRtcSignaling = function (sessionInit) {\r\n        this.call.setRoom(this.room);\r\n        this.call.startRtcSignaling(sessionInit);\r\n    };\r\n    /**\r\n     * Resolves response signaling message.\r\n     *\r\n     * @private\r\n     * @param {string} message the message\r\n     *\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onReceiveColliderChannelMessage = function (message) {\r\n        var messageJson = Util_1.Util.parseJSON(message);\r\n        if (typeof messageJson === \'string\') {\r\n            messageJson = Util_1.Util.parseJSON(messageJson);\r\n        }\r\n        if (!BaseUtils_1.BaseUtils.isObjectDefined(messageJson)) {\r\n            Log_1.Log.warn(\'MediaCommunication::onReceiveColliderChannelMessage No message defined.\');\r\n            return;\r\n        }\r\n        var type = messageJson.type;\r\n        if (PeerConnectionResponseType_1.PeerConnectionResponseType.isBye(type)) {\r\n            this.onRemoteHangup(messageJson.sessionId);\r\n            return;\r\n        }\r\n        if (PeerConnectionResponseType_1.PeerConnectionResponseType.isPing(type)) {\r\n            this.onPingRequest();\r\n            return;\r\n        }\r\n        if (PeerConnectionResponseType_1.PeerConnectionResponseType.isRemoteIceComplete(type)) {\r\n            this.onRemoteIceComplete(messageJson);\r\n            return;\r\n        }\r\n        if (PeerConnectionResponseType_1.PeerConnectionResponseType.isUnreachableClient(type)) {\r\n            this.onUnreachableClient(messageJson.body);\r\n            return;\r\n        }\r\n        if (PeerConnectionResponseType_1.PeerConnectionResponseType.isTextChatMessage(messageJson)) {\r\n            this.onRemoteTextChatMessage(Util_1.Util.parseJSON(messageJson.body));\r\n            return;\r\n        }\r\n        if (PeerConnectionResponseType_1.PeerConnectionResponseType.isResponse(type)) {\r\n            var body = messageJson.body;\r\n            if (typeof messageJson.body === \'string\') {\r\n                body = JSON.parse(messageJson.body);\r\n            }\r\n            if (BaseUtils_1.BaseUtils.isObjectDefined(body)) {\r\n                var name_1 = body.name;\r\n                this.resolveResponseSignalingMessage(name_1, body);\r\n                return;\r\n            }\r\n        }\r\n        // forward the message to the call instance\r\n        // to use it in RTC connection\r\n        this.call.receiveColliderChannelMessage(message);\r\n    };\r\n    /**\r\n     * Handles unexpected Collider channel close.\r\n     *\r\n     * @private\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onColliderChannelClose = function () {\r\n        this.dispatchEvent(CallEvent_1.CallEvent.WEBSOCKET_CLOSED);\r\n    };\r\n    /**\r\n     * Destroy application transmitter.\r\n     */\r\n    MediaCommunication.prototype.onColliderChannelDestroy = function () {\r\n        this.dispatchEvent(ColliderServiceEvent_1.ColliderServiceEvent.DESTROY);\r\n    };\r\n    /**\r\n     * Responds on ping request.\r\n     *\r\n     * @private\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onPingRequest = function () {\r\n        this.colliderService.respondOnPingRequest();\r\n    };\r\n    MediaCommunication.prototype.onRemoteIceComplete = function (data) {\r\n        this.call.onRemoteIceComplete(data);\r\n    };\r\n    /**\r\n     *\r\n     *\r\n     * @private\r\n     * @param {string} clientId\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onUnreachableClient = function (clientId) {\r\n        var sessionId = this.call.onRemoteHangupByClientId(clientId);\r\n        this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_HANGUP, sessionId);\r\n    };\r\n    /**\r\n     * Setups call events.\r\n     *\r\n     * @private\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.setupCallEvents = function () {\r\n        var _this = this;\r\n        this.call.addEventListener(CallEvent_1.CallEvent.REMOTE_SDP_PROTOCOL_RECEIVED, function (data) {\r\n            _this.onRemoteSdpProtocolReceived(data);\r\n        }, this);\r\n        this.call.addEventListener(CallEvent_1.CallEvent.REMOTE_STREAM_ADDED, function (data) {\r\n            _this.onRemoteStreamAdded(data);\r\n        }, this);\r\n        this.call.addEventListener(CallEvent_1.CallEvent.LOCAL_STREAM_ADDED, function (data) {\r\n            _this.onLocalStreamAdded(data.stream);\r\n        }, this);\r\n        this.call.addEventListener(CallEvent_1.CallEvent.SIGNALING_STATE_CHANGE, function () {\r\n            _this.dispatchEvent(CallEvent_1.CallEvent.SIGNALING_STATE_CHANGE);\r\n        }, this);\r\n        this.call.addEventListener(CallEvent_1.CallEvent.ICE_CONNECTION_STATE_CHANGE, function () {\r\n            _this.dispatchEvent(CallEvent_1.CallEvent.ICE_CONNECTION_STATE_CHANGE);\r\n        }, this);\r\n        this.call.addEventListener(CallEvent_1.CallEvent.NEW_ICE_CANDIDATE, function (data) {\r\n            _this.dispatchEvent(CallEvent_1.CallEvent.NEW_ICE_CANDIDATE, data);\r\n        }, this);\r\n        this.call.addEventListener(CallEvent_1.CallEvent.REMOTE_TEXT_CHAT_MESSAGE, function (data) {\r\n            _this.onRemoteTextChatMessage(data.message);\r\n        }, this);\r\n        this.call.addEventListener(CallEvent_1.CallEvent.STATUS_MESSAGE, function (message) {\r\n            _this.dispatchEvent(CallEvent_1.CallEvent.STATUS_MESSAGE, message);\r\n        }, this);\r\n        this.call.addEventListener(CallEvent_1.CallEvent.ERROR, function (message) {\r\n            _this.dispatchEvent(CallEvent_1.CallEvent.ERROR, message);\r\n        }, this);\r\n        this.call.addEventListener(CallEvent_1.CallEvent.CALLER_STARTED, function (room) {\r\n            _this.dispatchEvent(CallEvent_1.CallEvent.CALLER_STARTED, room);\r\n        }, this);\r\n        this.call.addEventListener(CallEvent_1.CallEvent.LOCAL_VIDEO_MEDIA_CHANGE, function (options) {\r\n            _this.dispatchEvent(CallEvent_1.CallEvent.LOCAL_VIDEO_MEDIA_CHANGE, options);\r\n        }, this);\r\n    };\r\n    /**\r\n     * Handles remote hangup signal.\r\n     *\r\n     * @private\r\n     * @param {string} sessionId\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onRemoteHangup = function (sessionId) {\r\n        this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_HANGUP, sessionId);\r\n        this.call.onRemoteHangup(sessionId);\r\n    };\r\n    /**\r\n     * Handles remote SPD protocol received.\r\n     *\r\n     * @private\r\n     * @param {*} data\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onRemoteSdpProtocolReceived = function (data) {\r\n        this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_SDP_PROTOCOL_RECEIVED, data);\r\n    };\r\n    /**\r\n     * Handles remote stream added.\r\n     *\r\n     * @private\r\n     * @param {*} data\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onRemoteStreamAdded = function (data) {\r\n        this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_STREAM_ADDED, data);\r\n    };\r\n    /**\r\n     * Handles local stream added.\r\n     *\r\n     * @private\r\n     * @param {MediaStream} stream\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onLocalStreamAdded = function (stream) {\r\n        this.dispatchEvent(CallEvent_1.CallEvent.LOCAL_STREAM_ADDED, stream);\r\n    };\r\n    /**\r\n     * Handles remote text chat message received.\r\n     *\r\n     * @private\r\n     * @param {string} message\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onRemoteTextChatMessage = function (message) {\r\n        this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_TEXT_CHAT_MESSAGE, message.data);\r\n    };\r\n    /**\r\n     * Handles session initialization from a remtoe peer.\r\n     *\r\n     * @private\r\n     * @param {SessionOptions} sessionOptions\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onRemoteSession = function (sessionOptions) {\r\n        var sessionInit = new SessionInit_1.SessionInit();\r\n        sessionInit.addSession(sessionOptions.session);\r\n        this.startRtcSignaling(sessionInit);\r\n    };\r\n    /**\r\n     * Handles remote peer registered.\r\n     *\r\n     * @private\r\n     * @param {RegisterOptions} registerOptions\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onRemoteClientRegistered = function (registerOptions) {\r\n        var _this = this;\r\n        this.call\r\n            .setSessionOtherClientId(registerOptions)\r\n            .then(function () {\r\n            _this.dispatchEvent(CallEvent_1.CallEvent.REMOTE_CLIENT_REGISTERED, registerOptions);\r\n        })\r\n            .catch(function () {\r\n            Log_1.Log.warn(\'Remote client cannot be registered.\');\r\n        });\r\n    };\r\n    /**\r\n     * Handles error message.\r\n     *\r\n     * @private\r\n     * @param {any} message\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onError = function (message) {\r\n        this.dispatchEvent(CallEvent_1.CallEvent.ERROR, message);\r\n    };\r\n    /**\r\n     * Resolves response signaling message.\r\n     *\r\n     * @private\r\n     * @param {string} name\r\n     * @param {string} status\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.resolveResponseSignalingMessage = function (name, body) {\r\n        switch (name) {\r\n            case \'register\':\r\n                this.onRegister(body);\r\n                break;\r\n            case \'remoteSession\':\r\n                this.onRemoteSession(body);\r\n                break;\r\n            case \'remoteClientRegistered\':\r\n                this.onRemoteClientRegistered(body);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Handles goapp register response.\r\n     *\r\n     * @private\r\n     * @param {*} body\r\n     * @memberof MediaCommunication\r\n     */\r\n    MediaCommunication.prototype.onRegister = function (body) {\r\n        if (StringUtils_1.StringUtils.equals(body.status, \'ok\')) {\r\n            Log_1.Log.log(\'Client has successfully registered in the Collider service.\');\r\n        }\r\n        // this.call.consumeRemoteMessages();\r\n    };\r\n    return MediaCommunication;\r\n}(EventDispatcherService_1.EventDispatcherService));\r\nexports.MediaCommunication = MediaCommunication;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/controller/MediaCommunication.ts?')},"./ts/com/quickhellou/application/controller/RetryConsumeManager.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RetryConsumeManager = void 0;\r\nvar Log_1 = __webpack_require__(/*! ../../../genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\r\nvar RetryJobEvent_1 = __webpack_require__(/*! ../events/RetryJobEvent */ \"./ts/com/quickhellou/application/events/RetryJobEvent.ts\");\r\nvar FormService_1 = __webpack_require__(/*! ../../../genb/base/services/FormService */ \"./ts/com/genb/base/services/FormService.ts\");\r\nvar BaseUtils_1 = __webpack_require__(/*! ../../../genb/base/utils/BaseUtils */ \"./ts/com/genb/base/utils/BaseUtils.ts\");\r\nvar RetryConsumeManager = /** @class */ (function (_super) {\r\n    __extends(RetryConsumeManager, _super);\r\n    /**\r\n     * Creates an instance of RetryConsumeManager.\r\n     *\r\n     * @param {ColliderService} colliderService\r\n     * @param {PeerConnectionClient} pcClient\r\n     * @memberof RetryConsumeManager\r\n     */\r\n    function RetryConsumeManager(colliderService, pcClient, roomId, clientId, hostUrl) {\r\n        var _this = _super.call(this) || this;\r\n        _this.status = '__init__';\r\n        _this.colliderService = colliderService;\r\n        _this.pcClient = pcClient;\r\n        _this.roomId = roomId;\r\n        _this.clientId = clientId;\r\n        _this.hostUrl = hostUrl;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Starts jobs.\r\n     *\r\n     * @memberof RetryConsumeManager\r\n     */\r\n    RetryConsumeManager.prototype.start = function () {\r\n        this.status = 'touch';\r\n        this.doJob();\r\n    };\r\n    /**\r\n     * Triggers next job.\r\n     *\r\n     * @memberof RetryConsumeManager\r\n     */\r\n    RetryConsumeManager.prototype.next = function () {\r\n        this.status = 'consume';\r\n    };\r\n    /**\r\n     * Requests doing a job.\r\n     *\r\n     * @private\r\n     * @memberof RetryConsumeManager\r\n     */\r\n    RetryConsumeManager.prototype.doJob = function () {\r\n        var _this = this;\r\n        Log_1.Log.log('**** status', this.status);\r\n        if (!this.pcClient.requireDataConsume) {\r\n            return;\r\n        }\r\n        if (this.status === 'touch') {\r\n            this.touch();\r\n        }\r\n        else if (this.status === 'consume') {\r\n            this.consume();\r\n        }\r\n        if (this.status !== 'complete') {\r\n            setTimeout(function () {\r\n                _this.doJob();\r\n            }, 3000);\r\n        }\r\n    };\r\n    /**\r\n     * Request touch in go app.\r\n     *\r\n     * @private\r\n     * @memberof RetryConsumeManager\r\n     */\r\n    RetryConsumeManager.prototype.touch = function () {\r\n        this.colliderService.touch(this.roomId, this.clientId);\r\n    };\r\n    /**\r\n     * Requests consume in py app.\r\n     *\r\n     * @private\r\n     * @memberof RetryConsumeManager\r\n     */\r\n    RetryConsumeManager.prototype.consume = function () {\r\n        var _this = this;\r\n        this.post(this.hostUrl + \"/consume/\" + this.roomId + \"/\" + this.pcClient.getSessionId() + \"/\" + this.clientId).then(function (result) {\r\n            if (!result) {\r\n                return;\r\n            }\r\n            var resultJson = JSON.parse(result);\r\n            var messages = resultJson.messages;\r\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(messages)) {\r\n                return;\r\n            }\r\n            messages.forEach(function (message) {\r\n                _this.pcClient.receiveSignalingMessage(message);\r\n            });\r\n            if (messages.length > 0) {\r\n                _this.pcClient.requireDataConsume = false;\r\n                _this.status = 'complete';\r\n                _this.dispatchEvent(RetryJobEvent_1.RetryJobEvent.COMPLETE);\r\n            }\r\n        });\r\n    };\r\n    return RetryConsumeManager;\r\n}(FormService_1.FormService));\r\nexports.RetryConsumeManager = RetryConsumeManager;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/controller/RetryConsumeManager.ts?")},"./ts/com/quickhellou/application/controller/ScreenShareButtonComponent.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.ScreenShareButtonComponent = void 0;\r\nvar HtmlComponent_1 = __webpack_require__(/*! ../../../../com/genb/base/components/HtmlComponent */ "./ts/com/genb/base/components/HtmlComponent.ts");\r\nvar HTMLUtils_1 = __webpack_require__(/*! ../../../../com/genb/base/utils/HTMLUtils */ "./ts/com/genb/base/utils/HTMLUtils.ts");\r\nvar ShareScreenEvent_1 = __webpack_require__(/*! ../model/ShareScreenEvent */ "./ts/com/quickhellou/application/model/ShareScreenEvent.ts");\r\nvar ScreenShareButtonComponent = /** @class */ (function (_super) {\r\n    __extends(ScreenShareButtonComponent, _super);\r\n    function ScreenShareButtonComponent() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.isSharingEnabled = false;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Initializes the component.\r\n     *\r\n     * @memberof ScreenShareButtonComponent\r\n     */\r\n    ScreenShareButtonComponent.prototype.init = function () {\r\n        this.setupUIEvents();\r\n    };\r\n    /**\r\n     * Setups UI events.\r\n     *\r\n     * @private\r\n     * @memberof ScreenShareButtonComponent\r\n     */\r\n    ScreenShareButtonComponent.prototype.setupUIEvents = function () {\r\n        var _this = this;\r\n        this.element.addEventListener("click", function () {\r\n            _this.dispatchScreenSharingEvent();\r\n        });\r\n    };\r\n    /**\r\n     * Toggles screen sharing.\r\n     *\r\n     * @private\r\n     * @memberof ScreenShareButtonComponent\r\n     */\r\n    ScreenShareButtonComponent.prototype.dispatchScreenSharingEvent = function () {\r\n        if (this.isSharingEnabled) {\r\n            this.dispatchEvent(ShareScreenEvent_1.ShareScreenEvent.START_SHARING);\r\n            //this.lock();\r\n            this.setStopSharingLabel();\r\n        }\r\n        else {\r\n            this.dispatchEvent(ShareScreenEvent_1.ShareScreenEvent.STOP_SHARING);\r\n            this.setStartSharingLabel();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @public\r\n     * @param {boolean} isSharingEnabled\r\n     * @memberof ScreenShareButtonComponent\r\n     */\r\n    ScreenShareButtonComponent.prototype.toggleScreenSharingWithFlag = function (isSharingEnabled) {\r\n        if (this.isSharingEnabled) {\r\n            this.setStopSharingLabel();\r\n        }\r\n        else {\r\n            this.setStartSharingLabel();\r\n        }\r\n        this.isSharingEnabled = !isSharingEnabled;\r\n    };\r\n    /**\r\n     * Enables component.\r\n     *\r\n     * @public\r\n     * @memberof ScreenShareButtonComponent\r\n     */\r\n    ScreenShareButtonComponent.prototype.enableSharingState = function () {\r\n        this.isSharingEnabled = true;\r\n        _super.prototype.enable.call(this);\r\n        this.setStartSharingLabel();\r\n    };\r\n    /**\r\n     * Disables components.\r\n     *\r\n     * @public\r\n     * @memberof ScreenShareButtonComponent\r\n     */\r\n    ScreenShareButtonComponent.prototype.disableSharingState = function () {\r\n        this.isSharingEnabled = false;\r\n        _super.prototype.disable.call(this);\r\n        this.setStopSharingLabel();\r\n    };\r\n    /**\r\n     * Locks the button.\r\n     *\r\n     * @public\r\n     * @memberof ScreenShareButtonComponent\r\n     */\r\n    ScreenShareButtonComponent.prototype.lock = function () {\r\n        this.element.classList.add("js-locked");\r\n    };\r\n    /**\r\n     * Unlocks the button.\r\n     *\r\n     * @memberof ScreenShareButtonComponent\r\n     */\r\n    ScreenShareButtonComponent.prototype.unlock = function () {\r\n        this.element.classList.remove("js-locked");\r\n    };\r\n    /**\r\n     * Sets label as start sharing.\r\n     *\r\n     * @public\r\n     * @memberof ScreenShareButtonComponent\r\n     */\r\n    ScreenShareButtonComponent.prototype.setStartSharingLabel = function () {\r\n        var labelElement = HTMLUtils_1.HTMLUtils.get(".button--share-screen__label");\r\n        labelElement.innerHTML = "Share Screen";\r\n    };\r\n    /**\r\n     * Sets label as stop sharing.\r\n     *\r\n     * @private\r\n     * @memberof ScreenShareButtonComponent\r\n     */\r\n    ScreenShareButtonComponent.prototype.setStopSharingLabel = function () {\r\n        var labelElement = HTMLUtils_1.HTMLUtils.get(".button--share-screen__label");\r\n        labelElement.innerHTML = "Stop Sharing Screen";\r\n    };\r\n    return ScreenShareButtonComponent;\r\n}(HtmlComponent_1.HTMLComponent));\r\nexports.ScreenShareButtonComponent = ScreenShareButtonComponent;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/controller/ScreenShareButtonComponent.ts?')},"./ts/com/quickhellou/application/controller/StatsMonitor.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.StatsMonitor = void 0;\r\nvar EventDispatcherService_1 = __webpack_require__(/*! ../../../genb/base/services/EventDispatcherService */ "./ts/com/genb/base/services/EventDispatcherService.ts");\r\nvar Log_1 = __webpack_require__(/*! ../../../genb/base/utils/Log */ "./ts/com/genb/base/utils/Log.ts");\r\nvar MovingAverage_1 = __webpack_require__(/*! ../utils/MovingAverage */ "./ts/com/quickhellou/application/utils/MovingAverage.ts");\r\nvar BandwidthLevelUpdateEvent_1 = __webpack_require__(/*! ../events/BandwidthLevelUpdateEvent */ "./ts/com/quickhellou/application/events/BandwidthLevelUpdateEvent.ts");\r\nvar BandwidthLevel_1 = __webpack_require__(/*! ../model/BandwidthLevel */ "./ts/com/quickhellou/application/model/BandwidthLevel.ts");\r\n/**\r\n * Bandwidth monitor for a peer connection.\r\n *\r\n * @export\r\n * @class StatsMonitor\r\n * @extends {EventDispatcherService}\r\n */\r\nvar StatsMonitor = /** @class */ (function (_super) {\r\n    __extends(StatsMonitor, _super);\r\n    /**\r\n     * Creates an instance of StatsMonitor.\r\n     *\r\n     * @param {RTCPeerConnection} peerConnection\r\n     * @memberof StatsMonitor\r\n     */\r\n    function StatsMonitor(peerConnection) {\r\n        var _this = _super.call(this) || this;\r\n        _this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n        _this.getStatsResult = {\r\n            audio: {\r\n                send: {\r\n                    tracks: [],\r\n                    availableBandwidth: 0,\r\n                    streams: 0,\r\n                    framerateMean: 0,\r\n                    bitrateMean: 0,\r\n                },\r\n                recv: {\r\n                    tracks: [],\r\n                    availableBandwidth: 0,\r\n                    streams: 0,\r\n                    framerateMean: 0,\r\n                    bitrateMean: 0,\r\n                },\r\n                bytesSent: 0,\r\n                bytesReceived: 0,\r\n                packetsLost: 0,\r\n            },\r\n            video: {\r\n                send: {\r\n                    tracks: [],\r\n                    availableBandwidth: 0,\r\n                    availableBandwidthMA: 0,\r\n                    streams: 0,\r\n                    framerateMean: 0,\r\n                    bitrateMean: 0,\r\n                },\r\n                recv: {\r\n                    tracks: [],\r\n                    availableBandwidth: 0,\r\n                    availableBandwidthMA: 0,\r\n                    streams: 0,\r\n                    framerateMean: 0,\r\n                    bitrateMean: 0,\r\n                },\r\n                bytesSent: 0,\r\n                bytesReceived: 0,\r\n                packetsLost: 0,\r\n            },\r\n            bandwidth: {\r\n                availableOutgoingBitrate: 0,\r\n                availableIncomingBitrate: 0,\r\n                actualEncBitrate: 0,\r\n                helper: {\r\n                    audioBytesSent: 0,\r\n                    videoBytestSent: 0,\r\n                },\r\n                speed: 0,\r\n            },\r\n            results: {},\r\n            resolutions: {\r\n                send: {\r\n                    width: 0,\r\n                    height: 0,\r\n                },\r\n                recv: {\r\n                    width: 0,\r\n                    height: 0,\r\n                },\r\n            },\r\n            framesPerSecond: 0,\r\n            internal: {\r\n                audio: {\r\n                    send: {},\r\n                    recv: {},\r\n                },\r\n                video: {\r\n                    send: {\r\n                        prevBytesSent: 0,\r\n                        prevFramerateMean: 0,\r\n                        prevBitrateMean: 0,\r\n                        ema: 0,\r\n                    },\r\n                    recv: {\r\n                        prevBytesReceived: 0,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n        _this.peerConnection = peerConnection;\r\n        _this.inboundBandwidthMA = new MovingAverage_1.MovingAverage(5);\r\n        _this.outboundBandwidthMA = new MovingAverage_1.MovingAverage(5);\r\n        _this.inboundBandwidthLevel = BandwidthLevel_1.BandwidthLevel.HIGH;\r\n        _this.outboundBandwidthLevel = BandwidthLevel_1.BandwidthLevel.HIGH;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Runs the monitor.\r\n     *\r\n     * @memberof StatsMonitor\r\n     */\r\n    StatsMonitor.prototype.run = function () {\r\n        var _this = this;\r\n        setTimeout(function () {\r\n            _this.monitorInterval = window.setInterval(function () {\r\n                _this.monitorCycle();\r\n            }, 1000);\r\n        }, 10000);\r\n    };\r\n    /**\r\n     * Stops monitoring.\r\n     *\r\n     * @public\r\n     * @memberof StatsMonitor\r\n     */\r\n    StatsMonitor.prototype.stop = function () {\r\n        window.clearInterval(this.monitorInterval);\r\n    };\r\n    /**\r\n     * Handles monitor cycle.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     * @memberof StatsMonitor\r\n     */\r\n    StatsMonitor.prototype.monitorCycle = function () {\r\n        var _this = this;\r\n        if (!this.peerConnection) {\r\n            Log_1.Log.log("No peer connection. Stopping monitor.");\r\n            this.stop();\r\n            return;\r\n        }\r\n        this.peerConnection.getStats().then(function (report) {\r\n            var reportResults = [];\r\n            report.forEach(function (reportResult) {\r\n                reportResults.push(reportResult);\r\n            });\r\n            _this.processReportResults(reportResults);\r\n        });\r\n        this.getBandwidth();\r\n        this.distributeBandwidthEvents(this.getStatsResult.video);\r\n    };\r\n    /**\r\n     * Distriutes bandwidth events.\r\n     *\r\n     * @private\r\n     * @param {*} videoResult\r\n     * @memberof StatsMonitor\r\n     */\r\n    StatsMonitor.prototype.distributeBandwidthEvents = function (videoResult) {\r\n        var outboundBandwidth = videoResult.send.availableBandwidthMA;\r\n        /*if (this.getStatsResult.video.send.framerateMean < 20) {\r\n          this.dispatchEvent(BandwidthLevelUpdateEvent.INBOUND_LEVEL_CHANGE, {\r\n            level: BandwidthLevel.LOW,\r\n          });\r\n          return;\r\n        }*/\r\n        if (BandwidthLevel_1.BandwidthLevel.isLow(outboundBandwidth) &&\r\n            this.outboundBandwidthLevel !== BandwidthLevel_1.BandwidthLevel.LOW) {\r\n            this.outboundBandwidthLevel = BandwidthLevel_1.BandwidthLevel.LOW;\r\n            this.dispatchEvent(BandwidthLevelUpdateEvent_1.BandwidthLevelUpdateEvent.OUTBOUND_LEVEL_CHANGE, {\r\n                level: BandwidthLevel_1.BandwidthLevel.LOW,\r\n            });\r\n        }\r\n        if (BandwidthLevel_1.BandwidthLevel.isMedium(outboundBandwidth) &&\r\n            this.outboundBandwidthLevel !== BandwidthLevel_1.BandwidthLevel.MEDIUM) {\r\n            this.outboundBandwidthLevel = BandwidthLevel_1.BandwidthLevel.MEDIUM;\r\n            this.dispatchEvent(BandwidthLevelUpdateEvent_1.BandwidthLevelUpdateEvent.OUTBOUND_LEVEL_CHANGE, {\r\n                level: BandwidthLevel_1.BandwidthLevel.MEDIUM,\r\n            });\r\n        }\r\n        if (BandwidthLevel_1.BandwidthLevel.isHigh(outboundBandwidth) &&\r\n            this.outboundBandwidthLevel !== BandwidthLevel_1.BandwidthLevel.HIGH) {\r\n            this.outboundBandwidthLevel = BandwidthLevel_1.BandwidthLevel.HIGH;\r\n            this.dispatchEvent(BandwidthLevelUpdateEvent_1.BandwidthLevelUpdateEvent.OUTBOUND_LEVEL_CHANGE, {\r\n                level: BandwidthLevel_1.BandwidthLevel.HIGH,\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Handles report elements.\r\n     *\r\n     * @private\r\n     * @param {any[]} reportResults\r\n     * @returns\r\n     * @memberof StatsMonitor\r\n     */\r\n    StatsMonitor.prototype.processReportResults = function (reportResults) {\r\n        var _this = this;\r\n        if (!reportResults || !reportResults.forEach) {\r\n            return;\r\n        }\r\n        reportResults.forEach(function (result) {\r\n            _this.processReportResult(result);\r\n        });\r\n    };\r\n    /**\r\n     * Handles report element.\r\n     *\r\n     * @private\r\n     * @param {*} result\r\n     * @memberof StatsMonitor\r\n     */\r\n    StatsMonitor.prototype.processReportResult = function (result) {\r\n        this.checkAudio(result);\r\n        this.checkVideo(result);\r\n    };\r\n    /**\r\n     * Checks audio report data.\r\n     *\r\n     * @private\r\n     * @param {*} result\r\n     * @returns\r\n     * @memberof StatsMonitor\r\n     */\r\n    StatsMonitor.prototype.checkAudio = function (result) {\r\n        if ((!!result.mediaType && result.mediaType !== "audio") ||\r\n            (!!result.kind && result.kind !== "audio")) {\r\n            return;\r\n        }\r\n        var sendrecvType;\r\n        if (result.isRemote === true || result.bytesReceived !== undefined) {\r\n            sendrecvType = "recv";\r\n        }\r\n        if (result.isRemote === false || result.bytesSent !== undefined) {\r\n            sendrecvType = "send";\r\n        }\r\n        if (!sendrecvType) {\r\n            return;\r\n        }\r\n        if (!!result.bytesSent) {\r\n            var kilobytes = 0;\r\n            if (!this.getStatsResult.internal.audio[sendrecvType].prevBytesSent) {\r\n                this.getStatsResult.internal.audio[sendrecvType].prevBytesSent =\r\n                    result.bytesSent;\r\n            }\r\n            var bytes = result.bytesSent -\r\n                this.getStatsResult.internal.audio[sendrecvType].prevBytesSent;\r\n            this.getStatsResult.internal.audio[sendrecvType].prevBytesSent =\r\n                result.bytesSent;\r\n            kilobytes = bytes / 1024;\r\n            this.getStatsResult.audio[sendrecvType].availableBandwidth = kilobytes.toFixed(1);\r\n            this.getStatsResult.audio.bytesSent = kilobytes.toFixed(1);\r\n        }\r\n        if (!!result.bytesReceived) {\r\n            var kilobytes = 0;\r\n            if (!this.getStatsResult.internal.audio[sendrecvType].prevBytesReceived) {\r\n                this.getStatsResult.internal.audio[sendrecvType].prevBytesReceived =\r\n                    result.bytesReceived;\r\n            }\r\n            var bytes = result.bytesReceived -\r\n                this.getStatsResult.internal.audio[sendrecvType].prevBytesReceived;\r\n            this.getStatsResult.internal.audio[sendrecvType].prevBytesReceived =\r\n                result.bytesReceived;\r\n            kilobytes = bytes / 1024;\r\n            this.getStatsResult.audio.bytesReceived = kilobytes.toFixed(1);\r\n        }\r\n        // calculate packetsLost\r\n        if (!!result.packetsLost) {\r\n            if (!this.getStatsResult.internal.audio.prevPacketsLost) {\r\n                this.getStatsResult.internal.audio.prevPacketsLost = result.packetsLost;\r\n            }\r\n            var bytes = result.packetsLost - this.getStatsResult.internal.audio.prevPacketsLost;\r\n            this.getStatsResult.internal.audio.prevPacketsLost = result.packetsLost;\r\n            this.getStatsResult.audio.packetsLost = bytes.toFixed(1);\r\n            if (this.getStatsResult.audio.packetsLost < 0) {\r\n                this.getStatsResult.audio.packetsLost = 0;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks video report data.\r\n     *\r\n     * @private\r\n     * @param {*} result\r\n     * @returns\r\n     * @memberof StatsMonitor\r\n     */\r\n    StatsMonitor.prototype.checkVideo = function (result) {\r\n        if ((!!result.mediaType && result.mediaType !== "video") ||\r\n            (!!result.kind && result.kind !== "video")) {\r\n            return;\r\n        }\r\n        var sendrecvType = result.id.split("_").pop();\r\n        if (result.isRemote === true || result.bytesReceived !== undefined) {\r\n            sendrecvType = "recv";\r\n        }\r\n        if (result.isRemote === false || result.bytesSent !== undefined) {\r\n            sendrecvType = "send";\r\n        }\r\n        if (!sendrecvType) {\r\n            return;\r\n        }\r\n        this.getTrack(result);\r\n        this.getMediaSource(result);\r\n        this.getDataSentReceived(result);\r\n        this.getInboundRtp(result);\r\n        this.getOutboundRtp(result);\r\n    };\r\n    /**\r\n     * Statistics for the media produced by a MediaStreamTrack\r\n     * that is currently attached to an RTCRtpSender.\r\n     *\r\n     * @private\r\n     * @param {*} result\r\n     * @returns {void}\r\n     * @memberof StatsMonitor\r\n     */\r\n    StatsMonitor.prototype.getMediaSource = function (result) {\r\n        if (result.type !== "media-source") {\r\n            return;\r\n        }\r\n        this.getStatsResult.framesPerSecond = result.framesPerSecond;\r\n    };\r\n    /**\r\n     * Statistics related to a specific MediaStreamTrack\'s attachment to\r\n     * an RTCRtpSender and the corresponding media-level metrics.\r\n     *\r\n     * @private\r\n     * @param {*} result\r\n     * @returns {void}\r\n     * @memberof StatsMonitor\r\n     */\r\n    StatsMonitor.prototype.getTrack = function (result) {\r\n        if (result.type !== "track") {\r\n            return;\r\n        }\r\n        var sendrecvType = result.remoteSource === true ? "send" : "recv";\r\n        if (result.frameWidth && result.frameHeight) {\r\n            this.getStatsResult.resolutions[sendrecvType].width = result.frameWidth;\r\n            this.getStatsResult.resolutions[sendrecvType].height = result.frameHeight;\r\n        }\r\n    };\r\n    /**\r\n     * Statistics for an inbound RTP stream that is currently received with\r\n     * this RTCPeerConnection object.\r\n     *\r\n     * @private\r\n     * @param {*} result\r\n     * @returns\r\n     * @memberof StatsMonitor\r\n     */\r\n    StatsMonitor.prototype.getInboundRtp = function (result) {\r\n        if (result.type !== "inbound-rtp") {\r\n            return;\r\n        }\r\n        var mediaType = result.mediaType || "audio";\r\n        if (!!result.bytesReceived) {\r\n            var bytesReceived = result.bytesReceived;\r\n            var bytes = bytesReceived -\r\n                this.getStatsResult.internal[mediaType].recv.prevBytesReceived;\r\n            var kilobytes = bytes / 1024;\r\n            this.getStatsResult[mediaType].recv.availableBandwidth = kilobytes.toFixed(1);\r\n            this.getStatsResult[mediaType].recv.availableBandwidthMA = this.inboundBandwidthMA.update(kilobytes);\r\n            this.getStatsResult.internal[mediaType].recv.prevBytesReceived = bytesReceived;\r\n            this.getStatsResult[mediaType].bytesReceived = kilobytes.toFixed(1);\r\n        }\r\n    };\r\n    /**\r\n     * Statistics for an outbound RTP stream that is currently sent with\r\n     * this RTCPeerConnection object.\r\n     *\r\n     * @private\r\n     * @param {*} result\r\n     * @returns\r\n     * @memberof StatsMonitor\r\n     */\r\n    StatsMonitor.prototype.getOutboundRtp = function (result) {\r\n        if (result.type !== "outbound-rtp") {\r\n            return;\r\n        }\r\n        var mediaType = result.mediaType || "audio";\r\n        var sendrecvType = result.isRemote ? "recv" : "send";\r\n        if (!sendrecvType) {\r\n            return;\r\n        }\r\n        if (!!result.bytesSent) {\r\n            var bytesSent = result.bytesSent;\r\n            var bytes = bytesSent - this.getStatsResult.internal[mediaType].send.prevBytesSent;\r\n            var kilobytes = bytes / 1024;\r\n            this.getStatsResult[mediaType].send.availableBandwidth = kilobytes.toFixed(1);\r\n            this.getStatsResult[mediaType].send.availableBandwidthMA = this.outboundBandwidthMA.update(kilobytes);\r\n            this.getStatsResult.internal[mediaType].send.prevBytesSent = bytesSent;\r\n            this.getStatsResult[mediaType].bytesSent = kilobytes.toFixed(1);\r\n            if (!!result.retransmittedBytesSent) {\r\n                this.getStatsResult.bandwidth.actualEncBitrate =\r\n                    result.bytesSent - result.retransmittedBytesSent;\r\n            }\r\n        }\r\n        if (!!result.bytesReceived) {\r\n            var kilobytes = 0;\r\n            if (!this.getStatsResult.internal[mediaType][sendrecvType].prevBytesReceived) {\r\n                this.getStatsResult.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;\r\n            }\r\n            var bytes = result.bytesReceived -\r\n                this.getStatsResult.internal[mediaType][sendrecvType].prevBytesReceived;\r\n            this.getStatsResult.internal[mediaType][sendrecvType].prevBytesReceived =\r\n                result.bytesReceived;\r\n            kilobytes = bytes / 1024;\r\n            this.getStatsResult[mediaType].bytesReceived = kilobytes.toFixed(1);\r\n        }\r\n    };\r\n    StatsMonitor.prototype.getDataSentReceived = function (result) {\r\n        if (result.mediaType !== "video" && result.mediaType !== "audio") {\r\n            return;\r\n        }\r\n        if (!!result.bytesSent) {\r\n            this.getStatsResult[result.mediaType].bytesSent = Number(result.bytesSent);\r\n        }\r\n        if (!!result.bytesReceived) {\r\n            this.getStatsResult[result.mediaType].bytesReceived = Number(result.bytesReceived);\r\n        }\r\n    };\r\n    /**\r\n     * Calculates bandwidth.\r\n     *\r\n     * @private\r\n     * @memberof StatsMonitor\r\n     */\r\n    StatsMonitor.prototype.getBandwidth = function () {\r\n        if (this.getStatsResult.audio && this.getStatsResult.video) {\r\n            this.getStatsResult.bandwidth.speed =\r\n                this.getStatsResult.audio.bytesSent -\r\n                    this.getStatsResult.bandwidth.helper.audioBytesSent +\r\n                    (this.getStatsResult.video.bytesSent -\r\n                        this.getStatsResult.bandwidth.helper.videoBytesSent);\r\n            this.getStatsResult.bandwidth.helper.audioBytesSent = this.getStatsResult.audio.bytesSent;\r\n            this.getStatsResult.bandwidth.helper.videoBytesSent = this.getStatsResult.video.bytesSent;\r\n        }\r\n    };\r\n    return StatsMonitor;\r\n}(EventDispatcherService_1.EventDispatcherService));\r\nexports.StatsMonitor = StatsMonitor;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/controller/StatsMonitor.ts?')},"./ts/com/quickhellou/application/events/BandwidthLevelUpdateEvent.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.BandwidthLevelUpdateEvent = void 0;\r\n/**\r\n * Bandwidth event.\r\n *\r\n * @export\r\n * @class BandwidthLevelUpdateEvent\r\n */\r\nvar BandwidthLevelUpdateEvent = /** @class */ (function () {\r\n    function BandwidthLevelUpdateEvent() {\r\n    }\r\n    BandwidthLevelUpdateEvent.INBOUND_LEVEL_CHANGE = "inbound_level_change";\r\n    BandwidthLevelUpdateEvent.OUTBOUND_LEVEL_CHANGE = "outbound_level_change";\r\n    return BandwidthLevelUpdateEvent;\r\n}());\r\nexports.BandwidthLevelUpdateEvent = BandwidthLevelUpdateEvent;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/events/BandwidthLevelUpdateEvent.ts?')},"./ts/com/quickhellou/application/events/RetryJobEvent.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.RetryJobEvent = void 0;\r\nvar RetryJobEvent = /** @class */ (function () {\r\n    function RetryJobEvent() {\r\n    }\r\n    RetryJobEvent.COMPLETE = "complete";\r\n    return RetryJobEvent;\r\n}());\r\nexports.RetryJobEvent = RetryJobEvent;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/events/RetryJobEvent.ts?')},"./ts/com/quickhellou/application/model/BandwidthLevel.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.BandwidthLevel = void 0;\r\n/**\r\n * Bandwidth level.\r\n *\r\n * @export\r\n * @class BandwidthLevel\r\n */\r\nvar BandwidthLevel = /** @class */ (function () {\r\n    function BandwidthLevel() {\r\n    }\r\n    /**\r\n     * Checks if a bitrate is in the lower range.\r\n     *\r\n     * @static\r\n     * @param {number} bitrate\r\n     * @returns {boolean}\r\n     * @memberof BandwidthLevel\r\n     */\r\n    BandwidthLevel.isLow = function (bitrate) {\r\n        return bitrate > 0 && bitrate < BandwidthLevel.LOW_BITRATE;\r\n    };\r\n    /**\r\n     * Checks if a bitrate is in the medium range.\r\n     *\r\n     * @static\r\n     * @param {number} bitrate\r\n     * @returns {boolean}\r\n     * @memberof BandwidthLevel\r\n     */\r\n    BandwidthLevel.isMedium = function (bitrate) {\r\n        return (bitrate > BandwidthLevel.LOW_BITRATE &&\r\n            bitrate < BandwidthLevel.HIGH_BITRATE);\r\n    };\r\n    /**\r\n     * Checks if a bitrate is in the higher range.\r\n     *\r\n     * @static\r\n     * @param {number} bitrate\r\n     * @returns {boolean}\r\n     * @memberof BandwidthLevel\r\n     */\r\n    BandwidthLevel.isHigh = function (bitrate) {\r\n        return bitrate >= BandwidthLevel.HIGH_BITRATE;\r\n    };\r\n    /**\r\n     * Gets a bitrate to adjust stream.\r\n     *\r\n     * @static\r\n     * @param {string} level\r\n     * @returns {string}\r\n     * @memberof BandwidthLevel\r\n     */\r\n    BandwidthLevel.getBitrate = function (level) {\r\n        if (level === BandwidthLevel.LOW) {\r\n            return "30";\r\n        }\r\n        if (level === BandwidthLevel.MEDIUM) {\r\n            return "150";\r\n        }\r\n        if (level === BandwidthLevel.HIGH) {\r\n            return "unlimited";\r\n        }\r\n    };\r\n    BandwidthLevel.LOW = "low";\r\n    BandwidthLevel.MEDIUM = "medium";\r\n    BandwidthLevel.HIGH = "high";\r\n    BandwidthLevel.LOW_BITRATE = 50;\r\n    BandwidthLevel.HIGH_BITRATE = 150;\r\n    return BandwidthLevel;\r\n}());\r\nexports.BandwidthLevel = BandwidthLevel;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/BandwidthLevel.ts?')},"./ts/com/quickhellou/application/model/ColliderServiceEvent.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ColliderServiceEvent = void 0;\r\nvar ColliderServiceEvent = /** @class */ (function () {\r\n    function ColliderServiceEvent() {\r\n    }\r\n    ColliderServiceEvent.CLOSE = 'close';\r\n    ColliderServiceEvent.DESTROY = 'destroy';\r\n    ColliderServiceEvent.MESSAGE = 'message';\r\n    return ColliderServiceEvent;\r\n}());\r\nexports.ColliderServiceEvent = ColliderServiceEvent;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/ColliderServiceEvent.ts?")},"./ts/com/quickhellou/application/model/MediaEvent.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.MediaEvent = void 0;\r\nvar MediaEvent = /** @class */ (function () {\r\n    function MediaEvent() {\r\n    }\r\n    MediaEvent.DISPLAY_MEDIA_DISPLAYED = "display_media_displayed";\r\n    MediaEvent.DISPLAY_MEDIA_CLOSED = "display_media_closed";\r\n    return MediaEvent;\r\n}());\r\nexports.MediaEvent = MediaEvent;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/MediaEvent.ts?')},"./ts/com/quickhellou/application/model/PeerConnectionIdentity.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.PeerConnectionIdentity = void 0;\r\n/**\r\n * Peer connection identity object.\r\n *\r\n * @export\r\n * @class PeerConnectionIdentity\r\n */\r\nvar PeerConnectionIdentity = /** @class */ (function () {\r\n    function PeerConnectionIdentity() {\r\n    }\r\n    return PeerConnectionIdentity;\r\n}());\r\nexports.PeerConnectionIdentity = PeerConnectionIdentity;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/PeerConnectionIdentity.ts?')},"./ts/com/quickhellou/application/model/PeerConnectionResponseType.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.PeerConnectionResponseType = void 0;\r\nvar StringUtils_1 = __webpack_require__(/*! ../../../genb/base/utils/StringUtils */ "./ts/com/genb/base/utils/StringUtils.ts");\r\nvar Util_1 = __webpack_require__(/*! ../../Util */ "./ts/com/quickhellou/Util.ts");\r\n/**\r\n * Peer connection response types.\r\n *\r\n * @export\r\n * @class PeerConnectionResponseType\r\n */\r\nvar PeerConnectionResponseType = /** @class */ (function () {\r\n    function PeerConnectionResponseType() {\r\n    }\r\n    PeerConnectionResponseType.isType = function (type, otherType) {\r\n        return StringUtils_1.StringUtils.equals(type, otherType);\r\n    };\r\n    PeerConnectionResponseType.isResponse = function (type) {\r\n        return this.isType(this.RESPONSE, type);\r\n    };\r\n    PeerConnectionResponseType.isAnswer = function (type) {\r\n        return this.isType(this.ANSWER, type);\r\n    };\r\n    PeerConnectionResponseType.isOffer = function (type) {\r\n        return this.isType(this.OFFER, type);\r\n    };\r\n    PeerConnectionResponseType.isCandidate = function (type) {\r\n        return this.isType(this.CANDIDATE, type);\r\n    };\r\n    PeerConnectionResponseType.isBye = function (type) {\r\n        return this.isType(this.BYE, type);\r\n    };\r\n    PeerConnectionResponseType.isTextChatMessage = function (messageJson) {\r\n        if (this.isType(this.BROADCAST, messageJson.type)) {\r\n            var bodyJson = Util_1.Util.parseJSON(messageJson.body);\r\n            return this.isType(this.TEXT_CHAT_MESSAGE, bodyJson.type);\r\n        }\r\n        return false;\r\n    };\r\n    PeerConnectionResponseType.isRemoteIceComplete = function (type) {\r\n        return this.isType(this.REMOTE_ICE_COMPLETE, type);\r\n    };\r\n    /**\r\n     * Checks if response is a ping type call.\r\n     *\r\n     * @static\r\n     * @param {string} type\r\n     * @returns {boolean}\r\n     * @memberof PeerConnectionResponseType\r\n     */\r\n    PeerConnectionResponseType.isPing = function (type) {\r\n        return this.isType(this.PING, type);\r\n    };\r\n    PeerConnectionResponseType.isUnreachableClient = function (type) {\r\n        return this.isType(this.UNREACHABLE_CLIENT, type);\r\n    };\r\n    PeerConnectionResponseType.RESPONSE = "response";\r\n    PeerConnectionResponseType.ANSWER = "answer";\r\n    PeerConnectionResponseType.OFFER = "offer";\r\n    PeerConnectionResponseType.CANDIDATE = "candidate";\r\n    PeerConnectionResponseType.BROADCAST = "broadcast";\r\n    PeerConnectionResponseType.TEXT_CHAT_MESSAGE = "text-chat-message";\r\n    PeerConnectionResponseType.BYE = "bye";\r\n    PeerConnectionResponseType.PING = "ping";\r\n    PeerConnectionResponseType.UNREACHABLE_CLIENT = "unreachable_client";\r\n    PeerConnectionResponseType.REMOTE_ICE_COMPLETE = "remote_ice_complete";\r\n    return PeerConnectionResponseType;\r\n}());\r\nexports.PeerConnectionResponseType = PeerConnectionResponseType;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/PeerConnectionResponseType.ts?')},"./ts/com/quickhellou/application/model/RegisterOptions.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.RegisterOptions = void 0;\r\n/**\r\n * Peer registration data.\r\n *\r\n * @export\r\n * @class RegisterOptions\r\n */\r\nvar RegisterOptions = /** @class */ (function () {\r\n    function RegisterOptions() {\r\n        this.name = "remoteClientRegistered";\r\n    }\r\n    return RegisterOptions;\r\n}());\r\nexports.RegisterOptions = RegisterOptions;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/RegisterOptions.ts?')},"./ts/com/quickhellou/application/model/RemoteVideosEvent.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.RemoteVideosEvent = void 0;\r\nvar RemoteVideosEvent = /** @class */ (function () {\r\n    function RemoteVideosEvent() {\r\n    }\r\n    RemoteVideosEvent.REMOTE_VIDEO_ADDED = "remote_video_added";\r\n    RemoteVideosEvent.REMOTE_VIDEO_REMOVED = "remote_video_removed";\r\n    RemoteVideosEvent.ADD_STREAM_SUCCESS = "add_stream_success";\r\n    RemoteVideosEvent.ADD_STREAM_FAILURE = "add_stream_failure";\r\n    return RemoteVideosEvent;\r\n}());\r\nexports.RemoteVideosEvent = RemoteVideosEvent;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/RemoteVideosEvent.ts?')},"./ts/com/quickhellou/application/model/Room.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Room = void 0;\r\n/**\r\n * Room data object.\r\n *\r\n * @export\r\n * @class Room\r\n */\r\nvar Room = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of Room.\r\n     *\r\n     * @param {string} id\r\n     * @param {string} link\r\n     * @memberof Room\r\n     */\r\n    function Room(id, link) {\r\n        if (id === void 0) { id = null; }\r\n        if (link === void 0) { link = null; }\r\n        this.id = id;\r\n        this.link = link;\r\n    }\r\n    return Room;\r\n}());\r\nexports.Room = Room;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/Room.ts?')},"./ts/com/quickhellou/application/model/RtcSession.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.RtcSession = void 0;\r\n/**\r\n * RTC connection session data.\r\n *\r\n * @export\r\n * @class RtcSession\r\n */\r\nvar RtcSession = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of RtcSession.\r\n     *\r\n     * @param {string} id\r\n     * @param {*} messages\r\n     * @param {string} otherClientId\r\n     * @param {boolean} isInitiator\r\n     * @param {boolean} isForward\r\n     * @memberof RtcSession\r\n     */\r\n    function RtcSession(id, messages, otherClientId, isInitiator, isForward) {\r\n        if (isInitiator === void 0) { isInitiator = false; }\r\n        if (isForward === void 0) { isForward = false; }\r\n        this.id = id;\r\n        this.messages = messages;\r\n        this.otherClientId = otherClientId;\r\n        this.isInitiator = isInitiator;\r\n        this.isForward = isForward;\r\n    }\r\n    return RtcSession;\r\n}());\r\nexports.RtcSession = RtcSession;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/RtcSession.ts?')},"./ts/com/quickhellou/application/model/SessionInit.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.SessionInit = void 0;\r\n/**\r\n * RTC connection sessions intitlization data.\r\n *\r\n * @export\r\n * @class SessionInit\r\n */\r\nvar SessionInit = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of SessionInit.\r\n     *\r\n     * @memberof SessionInit\r\n     */\r\n    function SessionInit() {\r\n        this.sessions = [];\r\n    }\r\n    /**\r\n     * Adds a session.\r\n     *\r\n     * @param {RtcSession} session\r\n     * @memberof SessionInit\r\n     */\r\n    SessionInit.prototype.addSession = function (session) {\r\n        this.sessions.push(session);\r\n    };\r\n    return SessionInit;\r\n}());\r\nexports.SessionInit = SessionInit;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/SessionInit.ts?')},"./ts/com/quickhellou/application/model/SessionOptions.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.SessionOptions = void 0;\r\nvar SessionOptions = /** @class */ (function () {\r\n    function SessionOptions() {\r\n        this.name = "remoteSession";\r\n    }\r\n    return SessionOptions;\r\n}());\r\nexports.SessionOptions = SessionOptions;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/SessionOptions.ts?')},"./ts/com/quickhellou/application/model/ShareScreenEvent.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.ShareScreenEvent = void 0;\r\nvar ShareScreenEvent = /** @class */ (function () {\r\n    function ShareScreenEvent() {\r\n    }\r\n    ShareScreenEvent.START_SHARING = "start_sharing";\r\n    ShareScreenEvent.STOP_SHARING = "stop_sharing";\r\n    ShareScreenEvent.NOT_ALLOWED = "not_allowed";\r\n    return ShareScreenEvent;\r\n}());\r\nexports.ShareScreenEvent = ShareScreenEvent;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/ShareScreenEvent.ts?')},"./ts/com/quickhellou/application/model/VideoTrackEventOptions.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.VideoTrackEventOptions = void 0;\r\n/**\r\n * Data for video track update event.\r\n *\r\n * @export\r\n * @class VideoTrackEventOptions\r\n */\r\nvar VideoTrackEventOptions = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of VideoTrackEventOptions.\r\n     *\r\n     * @param {MediaStreamTrack} track\r\n     * @param {string} [type=LocalVideoTrackEventOptions.CAMERA]\r\n     * @memberof VideoTrackEventOptions\r\n     */\r\n    function VideoTrackEventOptions(track, type) {\r\n        if (type === void 0) { type = VideoTrackEventOptions.CAMERA; }\r\n        this.track = track;\r\n        this.type = type;\r\n    }\r\n    VideoTrackEventOptions.CAMERA = "camera";\r\n    VideoTrackEventOptions.SCREEN_CAPTURE = "screen_capture";\r\n    return VideoTrackEventOptions;\r\n}());\r\nexports.VideoTrackEventOptions = VideoTrackEventOptions;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/model/VideoTrackEventOptions.ts?')},"./ts/com/quickhellou/application/service/ColliderService.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ColliderService = void 0;\r\nvar Util_1 = __webpack_require__(/*! ../../Util */ \"./ts/com/quickhellou/Util.ts\");\r\nvar ColliderServiceEvent_1 = __webpack_require__(/*! ../model/ColliderServiceEvent */ \"./ts/com/quickhellou/application/model/ColliderServiceEvent.ts\");\r\nvar FormService_1 = __webpack_require__(/*! ../../../genb/base/services/FormService */ \"./ts/com/genb/base/services/FormService.ts\");\r\nvar Log_1 = __webpack_require__(/*! ../../../genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\r\nvar BaseUtils_1 = __webpack_require__(/*! ../../../genb/base/utils/BaseUtils */ \"./ts/com/genb/base/utils/BaseUtils.ts\");\r\nvar StringUtils_1 = __webpack_require__(/*! ../../../genb/base/utils/StringUtils */ \"./ts/com/genb/base/utils/StringUtils.ts\");\r\n/**\r\n * Signaling channel WebSocket facade.\r\n * Handles communication with the Collider service.\r\n *\r\n * @export\r\n * @class ColliderService\r\n * @extends {EventDispatcherService}\r\n */\r\nvar ColliderService = /** @class */ (function (_super) {\r\n    __extends(ColliderService, _super);\r\n    /**\r\n     * Creates an instance of ColliderService.\r\n     *\r\n     * @private\r\n     * @param {string} [wssUrl]\r\n     * @param {string} [wssPostUrl]\r\n     * @memberof ColliderService\r\n     */\r\n    function ColliderService(wssUrl, wssPostUrl) {\r\n        var _this = _super.call(this) || this;\r\n        _this.isSet = false;\r\n        _this.registered = false;\r\n        _this.ROOM_TYPE = 'room';\r\n        if (BaseUtils_1.BaseUtils.isObjectDefined(wssUrl)) {\r\n            _this.wssUrl = wssUrl;\r\n        }\r\n        if (BaseUtils_1.BaseUtils.isObjectDefined(wssPostUrl)) {\r\n            _this.wssPostUrl = wssPostUrl;\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Setups an instance.\r\n     *\r\n     * @static\r\n     * @param {string} wssUrl the WebSocket URL\r\n     * @param {string} wssPostUrl th WebSocket POST URL\r\n     * @param {boolean} force force instance setup\r\n     * @returns {ColliderService}\r\n     * @memberof ColliderService\r\n     */\r\n    ColliderService.setupInstance = function (wssUrl, wssPostUrl, force) {\r\n        if (!ColliderService.instance || force) {\r\n            ColliderService.instance = new ColliderService(wssUrl, wssPostUrl);\r\n            this.instance.isSet = true;\r\n        }\r\n        return ColliderService.instance;\r\n    };\r\n    /**\r\n     * Gets an instance.\r\n     *\r\n     * @static\r\n     * @returns\r\n     * @memberof ColliderService\r\n     */\r\n    ColliderService.getInstance = function () {\r\n        if (!!ColliderService.instance) {\r\n            if (BaseUtils_1.BaseUtils.isObjectDefined(this.instance.isSet)) {\r\n                return ColliderService.instance;\r\n            }\r\n        }\r\n        // Log.warn('ColliderService::getInstance Collider service is not set.')\r\n        return null;\r\n    };\r\n    /**\r\n     * Opens signaling channel.\r\n     *\r\n     * @public\r\n     * @returns {Promise<any>}\r\n     * @memberof ColliderService\r\n     */\r\n    ColliderService.prototype.open = function () {\r\n        var _this = this;\r\n        if (BaseUtils_1.BaseUtils.isObjectDefined(this.websocket)) {\r\n            Log_1.Log.log('ERROR: ColliderService has been already opened.');\r\n            return;\r\n        }\r\n        if (this.wssUrl === undefined) {\r\n            Log_1.Log.error('The WebSocket address is either invalid or unset. Breaking.');\r\n            return;\r\n        }\r\n        Log_1.Log.log(\"Opening signaling channel: \" + this.wssUrl);\r\n        return new Promise(function (resolve, reject) {\r\n            _this.websocket = new WebSocket(_this.wssUrl);\r\n            _this.websocket.onopen = function () {\r\n                Log_1.Log.log('Signaling channel opened.');\r\n                _this.websocket.onerror = function (event) {\r\n                    reject(\"Signaling channel error. \" + event);\r\n                };\r\n                _this.websocket.onclose = function (event) {\r\n                    Log_1.Log.log(\"Collider channel closed with code:\" + event.code);\r\n                    _this.websocket = null;\r\n                    _this.registered = false;\r\n                    _this.dispatchEvent(ColliderServiceEvent_1.ColliderServiceEvent.CLOSE, event.code);\r\n                };\r\n                if (BaseUtils_1.BaseUtils.isObjectDefined(_this.clientID) &&\r\n                    BaseUtils_1.BaseUtils.isObjectDefined(_this.roomId)) {\r\n                    _this.register(_this.roomId, _this.clientID);\r\n                }\r\n                resolve();\r\n            };\r\n            _this.websocket.onmessage = function (event) {\r\n                Log_1.Log.log('Collider -> Client: ', JSON.parse(event.data));\r\n                var message = Util_1.Util.parseJSON(event.data);\r\n                if (!BaseUtils_1.BaseUtils.isObjectDefined(message)) {\r\n                    Log_1.Log.log('Failed to parse WSS message: ' + event.data);\r\n                    return;\r\n                }\r\n                if (!StringUtils_1.StringUtils.isEmpty(message.error)) {\r\n                    Log_1.Log.log('Signaling server error message: ' + message.error);\r\n                    return;\r\n                }\r\n                _this.dispatchEvent(ColliderServiceEvent_1.ColliderServiceEvent.MESSAGE, message.msg);\r\n            };\r\n            _this.websocket.onerror = function (ev) {\r\n                reject(Error(\"WebSocket error. \" + ev));\r\n            };\r\n        });\r\n    };\r\n    /**\r\n     * Responds on ping request.\r\n     *\r\n     * @public\r\n     * @memberof ColliderService\r\n     */\r\n    ColliderService.prototype.respondOnPingRequest = function () {\r\n        var pingMessage = {\r\n            cmd: 'ping',\r\n            roomid: this.roomId,\r\n            roomtype: this.ROOM_TYPE,\r\n            clientid: this.clientID,\r\n        };\r\n        this.postMessage(pingMessage);\r\n    };\r\n    /**\r\n     * Calls update session logic to clear non-referenced message out.\r\n     *\r\n     * @public\r\n     * @param {string} sessionsList\r\n     * @memberof ColliderService\r\n     */\r\n    ColliderService.prototype.updateSession = function (sessionsList) {\r\n        var message = {\r\n            cmd: 'session-update',\r\n            roomid: this.roomId,\r\n            roomtype: this.ROOM_TYPE,\r\n            msg: sessionsList,\r\n        };\r\n        this.postMessage(message);\r\n    };\r\n    /**\r\n     * Register client into room.\r\n     *\r\n     * @public\r\n     * @param {string} roomId\r\n     * @param {string} clientID\r\n     * @returns {Promise<any>}\r\n     * @memberof ColliderService\r\n     */\r\n    ColliderService.prototype.register = function (roomId, clientID) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this.roomId = roomId;\r\n            _this.clientID = clientID;\r\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(_this.roomId)) {\r\n                Log_1.Log.log('ERROR: Missing roomID. Stopping client registration.');\r\n                return reject({ code: 0, message: 'Missing roomID.' });\r\n            }\r\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(_this.clientID)) {\r\n                Log_1.Log.log('ERROR: Missing clientID. Stopping client registration.');\r\n                return reject({ code: 0, message: 'Missing clientID.' });\r\n            }\r\n            if (!_this.websocket || _this.websocket.readyState !== WebSocket.OPEN) {\r\n                return reject({ code: 0, message: 'WebSocket not open.' });\r\n            }\r\n            var registerMessage = {\r\n                cmd: 'register',\r\n                roomid: _this.roomId,\r\n                roomtype: _this.ROOM_TYPE,\r\n                clientid: _this.clientID,\r\n            };\r\n            _this.websocket.send(JSON.stringify(registerMessage));\r\n            _this.registered = true;\r\n            return resolve({ code: 1, message: 'Signaling channel registered.' });\r\n        });\r\n    };\r\n    /**\r\n     * Deregisters client form the websocket service.\r\n     *\r\n     * @param roomId the room ID\r\n     * @param clientId the client ID\r\n     * @returns the deregistration result\r\n     */\r\n    ColliderService.prototype.deregister = function (roomId, clientId) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(_this.roomId)) {\r\n                Log_1.Log.log('ERROR: Missing roomID. Stopping client registration.');\r\n                return reject({ code: 0, message: 'Missing roomID.' });\r\n            }\r\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(_this.clientID)) {\r\n                Log_1.Log.log('ERROR: Missing clientID. Stopping client registration.');\r\n                return reject({ code: 0, message: 'Missing clientID.' });\r\n            }\r\n            if (!_this.websocket || _this.websocket.readyState !== WebSocket.OPEN) {\r\n                return reject({ code: 0, message: 'WebSocket not open.' });\r\n            }\r\n            var registerMessage = {\r\n                cmd: 'deregister',\r\n                roomid: roomId,\r\n                roomtype: _this.ROOM_TYPE,\r\n                clientid: clientId,\r\n            };\r\n            _this.websocket.send(JSON.stringify(registerMessage));\r\n            _this.registered = false;\r\n            return resolve({ code: 1, message: 'Signaling channel deregistered.' });\r\n        });\r\n    };\r\n    /**\r\n     * Destroy application transmitter.\r\n     */\r\n    ColliderService.prototype.destroy = function () {\r\n        this.dispatchEvent(ColliderServiceEvent_1.ColliderServiceEvent.DESTROY);\r\n    };\r\n    ColliderService.prototype.touch = function (roomId, clientID) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this.roomId = roomId;\r\n            _this.clientID = clientID;\r\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(_this.roomId)) {\r\n                Log_1.Log.log('ERROR: Missing roomID. Stopping client registration.');\r\n                return reject({ code: 0, message: 'Missing roomID.' });\r\n            }\r\n            if (!BaseUtils_1.BaseUtils.isObjectDefined(_this.clientID)) {\r\n                Log_1.Log.log('ERROR: Missing clientID. Stopping client registration.');\r\n                return reject({ code: 0, message: 'Missing clientID.' });\r\n            }\r\n            if (!_this.websocket || _this.websocket.readyState !== WebSocket.OPEN) {\r\n                return reject({ code: 0, message: 'WebSocket not open.' });\r\n            }\r\n            var registerMessage = {\r\n                cmd: 'touch',\r\n                roomid: _this.roomId,\r\n                roomtype: _this.ROOM_TYPE,\r\n                clientid: _this.clientID,\r\n            };\r\n            _this.websocket.send(JSON.stringify(registerMessage));\r\n            return resolve({ code: 1, message: 'Touch sent.' });\r\n        });\r\n    };\r\n    /**\r\n     * Closes signaling channel.\r\n     *\r\n     * @public\r\n     * @param {boolean} async\r\n     * @returns\r\n     * @memberof ColliderService\r\n     */\r\n    ColliderService.prototype.close = function (async) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var path, error_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        Log_1.Log.log('Closing websocket.');\r\n                        if (!!this.websocket) {\r\n                            this.websocket.close();\r\n                            this.websocket = null;\r\n                        }\r\n                        if (!this.clientID || !this.roomId) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        path = this.getWssPostUrl();\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, Util_1.Util.sendUrlRequest('POST', path, async, 'DELETE')];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        error_1 = _a.sent();\r\n                        Log_1.Log.log('Error deleting web socket connection: ' + error_1.message);\r\n                        return [3 /*break*/, 4];\r\n                    case 4:\r\n                        this.clientID = null;\r\n                        this.roomId = null;\r\n                        this.registered = false;\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Sends a websocket message.\r\n     *\r\n     * @public\r\n     * @param {*} message\r\n     * @param {boolean} [persistant=true]\r\n     * @returns\r\n     * @memberof ColliderService\r\n     */\r\n    ColliderService.prototype.send = function (message, persistant) {\r\n        if (persistant === void 0) { persistant = true; }\r\n        if (!this.roomId || !this.clientID) {\r\n            Log_1.Log.log('ERROR: ColliderService has not registered.');\r\n            return;\r\n        }\r\n        var wssMessage = {\r\n            cmd: 'send',\r\n            msg: message,\r\n            persistant: persistant.toString(),\r\n        };\r\n        this.postMessage(wssMessage);\r\n    };\r\n    /**\r\n     * Sends a message to other client.\r\n     *\r\n     * @param {string} roomId\r\n     * @param {string} clientId\r\n     * @param {string} otherClientId\r\n     * @param {*} message\r\n     * @returns\r\n     * @memberof ColliderService\r\n     */\r\n    ColliderService.prototype.sendToOther = function (roomId, clientId, otherClientId, message) {\r\n        if (!this.roomId || !this.clientID) {\r\n            Log_1.Log.log('ERROR: ColliderService has not registered.');\r\n            return;\r\n        }\r\n        var wssMessage = {\r\n            cmd: 'send-to-other',\r\n            roomid: roomId,\r\n            clientid: clientId,\r\n            otherid: otherClientId,\r\n            msg: message,\r\n        };\r\n        this.postMessage(wssMessage);\r\n    };\r\n    /**\r\n     * Broadcasts a message.\r\n     *\r\n     * @param {string} type\r\n     * @param {*} data\r\n     * @memberof ColliderService\r\n     */\r\n    ColliderService.prototype.broadcast = function (inputType, inputData) {\r\n        var wssMessage = {\r\n            cmd: 'broadcast',\r\n            msg: JSON.stringify({\r\n                type: inputType,\r\n                roomid: this.roomId,\r\n                clientid: this.clientID,\r\n                data: inputData,\r\n            }),\r\n        };\r\n        this.postMessage(wssMessage);\r\n    };\r\n    /**\r\n     * Gets WebSocket communication path.\r\n     *\r\n     * @public\r\n     * @returns {string}\r\n     * @memberof ColliderService\r\n     */\r\n    ColliderService.prototype.getWssPostUrl = function () {\r\n        return this.wssPostUrl + \"/\" + this.roomId + \"/\" + this.clientID;\r\n    };\r\n    /**\r\n     * If WebSocket connection is available then it sends a WebSocket message.\r\n     * Otherwise, it sends a POST message.\r\n     *\r\n     * @private\r\n     * @param {any} wssMessage\r\n     * @memberof ColliderService\r\n     */\r\n    ColliderService.prototype.postMessage = function (wssMessage) {\r\n        var msgString = JSON.stringify(wssMessage);\r\n        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\r\n            this.websocket.send(msgString);\r\n        }\r\n        else {\r\n            this.post(this.getWssPostUrl(), wssMessage.msg);\r\n        }\r\n    };\r\n    ColliderService.MESSAGE = 'message';\r\n    return ColliderService;\r\n}(FormService_1.FormService));\r\nexports.ColliderService = ColliderService;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/service/ColliderService.ts?")},"./ts/com/quickhellou/application/utils/MovingAverage.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.MovingAverage = void 0;\r\n/**\r\n * Expotential moving average utility.\r\n *\r\n * @export\r\n * @class MovingAverage\r\n */\r\nvar MovingAverage = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of MovingAverage.\r\n     *\r\n     * @param {any}\r\n     * @memberof MovingAverage\r\n     */\r\n    function MovingAverage(range) {\r\n        this.range = range;\r\n        this.values = Array(range * 2).fill(0);\r\n    }\r\n    MovingAverage.prototype.update = function (newValue) {\r\n        if (this.values.length > this.range * 2) {\r\n            this.values.shift();\r\n        }\r\n        this.values.push(newValue);\r\n        return this.calculate();\r\n    };\r\n    MovingAverage.prototype.calculate = function () {\r\n        var c = this.smooth(this.range);\r\n        var average = this.average(this.values.slice(0, this.range));\r\n        var acc = [this.toFixed(average)];\r\n        for (var i = this.range; i < this.values.length; i++) {\r\n            average = c * Number(this.values[i]) + (1 - c) * average;\r\n            acc.push(this.toFixed(average));\r\n        }\r\n        return acc.pop();\r\n    };\r\n    MovingAverage.prototype.average = function (arr) {\r\n        var len = arr.length;\r\n        var i = -1;\r\n        var num = 0;\r\n        while (++i < len) {\r\n            num += Number(arr[i]);\r\n        }\r\n        return num / len;\r\n    };\r\n    MovingAverage.prototype.smooth = function (n) {\r\n        return 2 / (n + 1);\r\n    };\r\n    MovingAverage.prototype.toFixed = function (n) {\r\n        return n.toFixed(2);\r\n    };\r\n    return MovingAverage;\r\n}());\r\nexports.MovingAverage = MovingAverage;\r\n\n\n//# sourceURL=webpack:///./ts/com/quickhellou/application/utils/MovingAverage.ts?')},"./ts/web_app.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nvar _this = this;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__webpack_require__(/*! ../scss/web_app.scss */ \"./scss/web_app.scss\");\r\nvar HTMLUtils_1 = __webpack_require__(/*! ./com/genb/base/utils/HTMLUtils */ \"./ts/com/genb/base/utils/HTMLUtils.ts\");\r\nvar Log_1 = __webpack_require__(/*! ./com/genb/base/utils/Log */ \"./ts/com/genb/base/utils/Log.ts\");\r\nvar StringUtils_1 = __webpack_require__(/*! ./com/genb/base/utils/StringUtils */ \"./ts/com/genb/base/utils/StringUtils.ts\");\r\nvar AppController_1 = __webpack_require__(/*! ./com/quickhellou/AppController */ \"./ts/com/quickhellou/AppController.ts\");\r\nvar AppControllerEvent_1 = __webpack_require__(/*! ./com/quickhellou/AppControllerEvent */ \"./ts/com/quickhellou/AppControllerEvent.ts\");\r\n__webpack_require__(/*! expose-loader?exposes=videochat!./ComProxy */ \"../node_modules/expose-loader/dist/cjs.js?exposes=videochat!./ts/ComProxy-exposed.ts\");\r\nvar appController;\r\nLog_1.Log.setEnvironment(\"development\");\r\nLog_1.Log.log(\"Quick Hellou v. \" + \"0.9.0\" + \" \" + \"development\" + \" build (webrtc-adapter v. 8.1.0)\");\r\nwindow.addEventListener('load', function () {\r\n    preinit();\r\n});\r\nvar preinit = function () {\r\n    var roomIdElement = document.querySelector('meta[name=\"room_id\"]');\r\n    if (roomIdElement !== null) {\r\n        var roomId = roomIdElement.getAttribute('content');\r\n        if (StringUtils_1.StringUtils.isNotEmpty(roomId)) {\r\n            init(roomId, getInitType(), getVideoAppUrl());\r\n        }\r\n        else {\r\n            setTimeout(reinit, 1000);\r\n        }\r\n    }\r\n    else {\r\n        Log_1.Log.warn('No room parameter.');\r\n    }\r\n};\r\nvar init = function (roomId, initType, videoAppUrl) {\r\n    appController = new AppController_1.AppController(roomId, initType, videoAppUrl);\r\n    Log_1.Log.log('init', roomId, initType, videoAppUrl);\r\n    appController.addEventListener(AppControllerEvent_1.AppControllerEvent.INITIALIZED, function () {\r\n        var main = HTMLUtils_1.HTMLUtils.get('div.main');\r\n        main.classList.add('js-visible');\r\n        // remove loader after when the main element is visible\r\n        setTimeout(function () {\r\n            if (HTMLUtils_1.HTMLUtils.exists('div.loader')) {\r\n                var loader = HTMLUtils_1.HTMLUtils.get('div.loader');\r\n                loader.remove();\r\n            }\r\n        }, 1000);\r\n        // service workers facade\r\n        // new ServiceWorkers()\r\n    }, _this);\r\n    appController.addEventListener(AppControllerEvent_1.AppControllerEvent.DESTROY, function () {\r\n        appController = null;\r\n        preinit();\r\n    }, _this);\r\n    appController.init();\r\n};\r\nvar reinit = function () {\r\n    var roomId = document\r\n        .querySelector('meta[name=\"room_id\"]')\r\n        .getAttribute('content');\r\n    if (StringUtils_1.StringUtils.isNotEmpty(roomId)) {\r\n        init(roomId, getInitType(), getVideoAppUrl());\r\n    }\r\n    else {\r\n        setTimeout(function () { return reinit(); }, 2000);\r\n    }\r\n};\r\nvar getInitType = function () {\r\n    var metaInitType = document.querySelector('meta[name=\"init\"]');\r\n    var urlParams = new URLSearchParams(window.location.search);\r\n    var initType = urlParams.get('init');\r\n    if (initType !== null) {\r\n        return initType;\r\n    }\r\n    if (metaInitType !== null) {\r\n        return metaInitType.getAttribute('content');\r\n    }\r\n    return '';\r\n};\r\nvar getVideoAppUrl = function () {\r\n    var metaVideoAppUrl = document.querySelector('meta[name=\"video_app_url\"]');\r\n    if (metaVideoAppUrl !== null) {\r\n        return metaVideoAppUrl.getAttribute('content');\r\n    }\r\n    return '';\r\n};\r\n\n\n//# sourceURL=webpack:///./ts/web_app.ts?")},0:function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__(/*! ./ts/web_app.ts */"./ts/web_app.ts");\n\n\n//# sourceURL=webpack:///multi_./ts/web_app.ts?')}});